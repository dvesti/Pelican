<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Pelican-200 - Contributing</title><link href="https://blog.dmitriev.ee/" rel="alternate"></link><link href="https://blog.dmitriev.ee/feeds/contributing.atom.xml" rel="self"></link><id>https://blog.dmitriev.ee/</id><updated>2019-12-01T23:13:00+02:00</updated><subtitle>О теме Elegant для Pelican</subtitle><entry><title>Use PostCSS To Compile CSS Style Sheets</title><link href="https://blog.dmitriev.ee/2019/12/01/use-postcss-to-compile-css-style-sheets/" rel="alternate"></link><published>2019-12-01T23:13:00+02:00</published><updated>2019-12-01T23:13:00+02:00</updated><author><name>Talha Mansoor</name></author><id>tag:blog.dmitriev.ee,2019-12-01:/2019/12/01/use-postcss-to-compile-css-style-sheets/</id><summary type="html"></summary><content type="html">&lt;p&gt;Elegant uses &lt;a href="https://gulpjs.com/"&gt;GulpJS&lt;/a&gt; and &lt;a href="https://postcss.org/"&gt;PostCSS&lt;/a&gt; to do pre and post processing, like &lt;a href="https://github.com/postcss/autoprefixer"&gt;adding vendor prefixes&lt;/a&gt; or &lt;a href="https://cssnano.co/"&gt;compressing the &lt;span class="caps"&gt;CSS&lt;/span&gt; file&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="why-not-use-pelican-assets-plugin"&gt;Why not use Pelican assets plugin?&lt;a class="headerlink" href="#why-not-use-pelican-assets-plugin" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/getpelican/pelican-plugins/tree/master/assets"&gt;Pelican&amp;#8217;s assets plugin&lt;/a&gt; uses &lt;a href="https://github.com/miracle2k/webassets"&gt;Python&amp;#8217;s webassets package&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Unfortunately, webassets have not had a release &lt;a href="https://github.com/miracle2k/webassets/releases"&gt;since early 2017&lt;/a&gt;. Requests to revive the project have &lt;a href="https://github.com/miracle2k/webassets/issues/505"&gt;gone unheeded&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I tired to install webassets from the Git repository to use its PostCSS filter but it didn&amp;#8217;t work. Instead of wasting time in wrestling the code of an unmaintained project, I decided to use PostCSS which is modern and actively&amp;nbsp;maintained.&lt;/p&gt;
&lt;h2 id="how-to-use-postcss"&gt;How to use PostCSS&lt;a class="headerlink" href="#how-to-use-postcss" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is closely related to &lt;a href="https://blog.dmitriev.ee/2019/07/19/live-reload-elegant-documentation-using-gulpjs/"&gt;LiveReload Elegant Documentation Using&amp;nbsp;Gulp.js&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="prerequisites"&gt;Prerequisites&lt;a class="headerlink" href="#prerequisites" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You need to run following steps only once, to setup the LiveReload using&amp;nbsp;gulp.&lt;/p&gt;
&lt;h4 id="step-1-install-nodejs-and-yarn"&gt;Step 1: Install NodeJS and Yarn &lt;!-- yaspeller ignore --&gt;&lt;a class="headerlink" href="#step-1-install-nodejs-and-yarn" title="Permanent link"&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Install &lt;a href="https://nodejs.org/en/download/"&gt;Node.js&lt;/a&gt; and &lt;a href="https://yarnpkg.com/en/docs/install"&gt;Yarn&lt;/a&gt; on your&amp;nbsp;system.&lt;/p&gt;
&lt;p&gt;If you are on Windows then try installing them with &lt;a href="https://scoop.sh/"&gt;scoop.sh&lt;/a&gt;. It saves time and makes update&amp;nbsp;easier.&lt;/p&gt;
&lt;h4 id="step-2-install-gulp"&gt;Step 2: Install gulp&lt;a class="headerlink" href="#step-2-install-gulp" title="Permanent link"&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Run this command from your command line&amp;nbsp;terminal.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yarn global add gulp-cli
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id="step-3-install-dependencies"&gt;Step 3: Install Dependencies&lt;a class="headerlink" href="#step-3-install-dependencies" title="Permanent link"&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;In the root of the Elegant repository,&amp;nbsp;run&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yarn install
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;yarn&lt;/code&gt; will create &lt;code&gt;node_modules&lt;/code&gt; folder in the&amp;nbsp;root.&lt;/p&gt;
&lt;h4 id="step-4-run-gulp"&gt;Step 4: Run &lt;code&gt;gulp&lt;/code&gt;&lt;a class="headerlink" href="#step-4-run-gulp" title="Permanent link"&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;In the root of the Elegant repository,&amp;nbsp;run&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gulp css
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It will compile the &lt;span class="caps"&gt;CSS&lt;/span&gt; present in &lt;a href="https://github.com/Pelican-Elegant/elegant/tree/master/static/css"&gt;&lt;code&gt;static/css&lt;/code&gt;&lt;/a&gt; folder into &lt;code&gt;static/css/elegant.prod.css&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To live preview your changes,&amp;nbsp;use&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gulp
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="how-does-it-work"&gt;How does it work?&lt;a class="headerlink" href="#how-does-it-work" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Gulp and PostCSS, takes all the &lt;span class="caps"&gt;CSS&lt;/span&gt; files present inside &lt;code&gt;static/css&lt;/code&gt; folder. It applies PostCSS plugins on it like &lt;span class="caps"&gt;CSS&lt;/span&gt;&amp;nbsp;compression.&lt;/p&gt;
&lt;p&gt;It then writes the generated version in &lt;code&gt;static/css/elegant.prod.css&lt;/code&gt; file. This is the file a Pelican blog uses when it uses Elegant&amp;nbsp;theme.&lt;/p&gt;
&lt;p&gt;If user has enabled &lt;a href="https://blog.dmitriev.ee/2014/03/24/avoid-unnecessary-http-requests/"&gt;&lt;code&gt;assets&lt;/code&gt; plugin&lt;/a&gt;, then this file is again made to go through webassets cssmin filter. Although this step is redundant because &lt;code&gt;elegant.prod.css&lt;/code&gt; is already compressed. But it is necessary in case user has decided &lt;a href="https://blog.dmitriev.ee/2019/07/03/customize-style/"&gt;to customize the theme using &lt;code&gt;custom.css&lt;/code&gt;&lt;/a&gt;. In which, assets cssmin filter will combine &lt;code&gt;elegant.prod.css&lt;/code&gt; and &lt;code&gt;custom.css&lt;/code&gt; into one file &lt;code&gt;style.min.css&lt;/code&gt;.&lt;/p&gt;</content><category term="Contributing"></category><category term="postcss"></category><category term="gulp"></category></entry><entry><title>Using ‘yaspeller’ with Elegant</title><link href="https://blog.dmitriev.ee/2019/08/04/yaspeller-for-elegant/" rel="alternate"></link><published>2019-08-04T23:17:00+03:00</published><updated>2019-08-04T23:17:00+03:00</updated><author><name>Jack De Winter</name></author><id>tag:blog.dmitriev.ee,2019-08-04:/2019/08/04/yaspeller-for-elegant/</id><summary type="html">&lt;p&gt;Elegant use the &amp;#8216;yaspeller&amp;#8217; tool to scan for spelling mistakes.  This article gives more information about the tool and how to run it&amp;nbsp;locally.&lt;/p&gt;</summary><content type="html">
&lt;p&gt;Even with most code editors having a spell checker installed and active by default, there is a
need to have the Elegant builds verify spelling against a known dictionary. The spell check
tool that was decided on by the team is the
&lt;a href="https://github.com/hcodes/yaspeller"&gt;yaspeller tool&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This tool is useful in that it has a number of options for altering what it considers eligible
for scanning. In its default mode, the &lt;code&gt;yaspeller&lt;/code&gt; tool will scan everything in a Markdown
document except for text encapsulated within code blocks, such as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;```text
[text ommitted for breverity]
```

OR

this `yaspeller` tool is cool
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While &lt;code&gt;yaspeller&lt;/code&gt; is a useful tool, it is not foolproof. When scanning the documentation
files, it often requires a bit of assistance in determining how to properly handle words which
do not appear in the standard dictionary.&lt;/p&gt;
&lt;h2 id="what-to-do-with-spelling-mistakes"&gt;What To Do With Spelling Mistakes&lt;a class="headerlink" href="#what-to-do-with-spelling-mistakes" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There are typically 4 categories of spelling mistakes: an honest mistake, a word to be added
to the project dictionary, a single situational misspelling, and intentional misspellings
within a block of text.&lt;/p&gt;
&lt;p&gt;The way to address mistakes in the first category is simple. Fix them. If you are not 100%
sure that the word is spelled properly, consider using
&lt;a href="https://www.dictionary.com/"&gt;dictionary.com&lt;/a&gt; to verify the spelling. If you search for a
given word and a simpler form of that word appears, scroll down to the related words section
and see if it is there.&lt;/p&gt;
&lt;h2 id="adding-a-word-to-the-project-dictionary"&gt;Adding A Word to the Project Dictionary&lt;a class="headerlink" href="#adding-a-word-to-the-project-dictionary" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If the spelling mistake has been verified to be a properly spelled word, then the word jumps
over to the second category: a word to be added to the project dictionary. The root directory
of the project contains
&lt;a href="https://github.com/Pelican-Elegant/elegant/blob/master/.yaspeller.json"&gt;the project dictionary&lt;/a&gt;
with a list of words that &lt;code&gt;yaspeller&lt;/code&gt; should consider acceptable. Words added to the
dictionary in lower case will match upper case and lower case versions of the word, while words
added with any capitalization will force &lt;code&gt;yaspeller&lt;/code&gt; to perform a case-sensitive match.&lt;/p&gt;
&lt;h2 id="a-single-intentional-misspellings-within-a-line-of-text"&gt;A Single Intentional Misspellings within a Line of Text&lt;a class="headerlink" href="#a-single-intentional-misspellings-within-a-line-of-text" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For the third category, a single situational misspelling, the best example is included in the
article &lt;a href="https://blog.dmitriev.ee/2019/07/20/git-commit-guidelines/"&gt;Git Commit Guidelines&lt;/a&gt;.
In that article, there is &lt;a href="https://blog.dmitriev.ee/2019/07/20/git-commit-guidelines/#type"&gt;a section&lt;/a&gt; describing the
legal values that can be associated with a commit type. While most of the values are fine,
there is one value that is the short form for “performance”:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;- **perf**: A code change that improves performance &amp;lt;!-- yaspeller ignore --&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As this is the only word in the article that is intentionally spelled the way it is, the
line ends with the &lt;code&gt;&amp;lt;!-- yaspeller ignore --&amp;gt;&lt;/code&gt; suffix to tell the &lt;code&gt;yaspeller&lt;/code&gt; tool to ignore
the entire line. While we could add that single word to the project dictionary, it is more
clear to ignore the word for this given situation instead of adding it to the dictionary.&lt;/p&gt;
&lt;h2 id="intentional-misspellings-within-a-block-of-text"&gt;Intentional Misspellings within a Block of Text&lt;a class="headerlink" href="#intentional-misspellings-within-a-block-of-text" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The final category, intentional misspellings within a block of text, is an extension of the
previous category, but dealing with multiple intentional misspellings, instead of a single
one. A good example of that would be specifying the contents for a table to show an example
to the user, such as the following:&lt;/p&gt;
&lt;!-- yaspeller ignore:start --&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Key&lt;/th&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;th&gt;File Name&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;abc&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;stat-counter.md&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;def&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;favicons-speed-dial-icons.md&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;!-- yaspeller ignore:end --&gt;
&lt;p&gt;If you look at the &lt;a href="https://blog.dmitriev.ee/2019/08/04/yaspeller-for-elegant/"&gt;Markdown for this article&lt;/a&gt;,
notice how the table is surrounded with two &lt;span class="caps"&gt;HTML&lt;/span&gt; comments:
&lt;code&gt;&amp;lt;!-- yaspeller ignore:start --&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;!-- yaspeller ignore:end --&amp;gt;&lt;/code&gt; with blank lines between
the comments and the block they are there to ignore.&lt;/p&gt;
&lt;p&gt;With those comments in place, the &lt;code&gt;yaspeller&lt;/code&gt; tool does not raise any issues with the Markdown
that generates this file, as it has been told to ignore everything starting with the first
comment and ending with the second comment. If these are removed, the &lt;code&gt;yaspeller&lt;/code&gt; tool will
output the following errors:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[ERR] /enlistments/elegant/documentation/content/articles/Contributing/ya-spell-check.md 3450 ms
-----
Typos: 2
1. def (129:3)
2. favicons (129:13)

Capitalization: 1
1. abc (128:3, suggest: ABC)
-----
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="why-spell-check-locally"&gt;Why Spell Check Locally&lt;a class="headerlink" href="#why-spell-check-locally" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Similar to the other checks that are performed on every submission, a spell check failure will
cause the build to fail.&lt;/p&gt;
&lt;p&gt;Addressing any failures reported locally by this tool results in a smaller turn around time in
getting any spelling mistakes addressed. This in turn will save time when submitting changes
in a Pull Request, as you have already dealt with any errors that this tool may report.&lt;/p&gt;
&lt;h3 id="prerequisites-for-local-installation"&gt;Prerequisites For Local Installation&lt;a class="headerlink" href="#prerequisites-for-local-installation" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Either &lt;a href="https://nodejs.org/en/download/"&gt;Node.js&lt;/a&gt; or
&lt;a href="https://yarnpkg.com/en/docs/install"&gt;Yarn&lt;/a&gt; must be installed on your system.&lt;/p&gt;
&lt;h3 id="how-do-i-install-it-locally"&gt;How Do I Install It Locally&lt;a class="headerlink" href="#how-do-i-install-it-locally" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You can install the &lt;code&gt;yaspeller&lt;/code&gt; package using either &lt;span class="caps"&gt;NPM&lt;/span&gt; (Node.js) or Yarn as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;npm install -g yaspeller
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class="caps"&gt;OR&lt;/span&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yarn global add yaspeller
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="how-do-i-use-it-locally"&gt;How Do I Use It Locally&lt;a class="headerlink" href="#how-do-i-use-it-locally" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To invoke the &lt;code&gt;yaspeller&lt;/code&gt; package for the documentation files for the Elegant project, go to
the root directory of your local repository and enter the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yaspeller --only-errors documentation/content/ *.md
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When executed, the &lt;code&gt;yaspeller&lt;/code&gt; tool will recursively scan all of the &lt;code&gt;*.md&lt;/code&gt; files under the
&lt;code&gt;documentation/content/&lt;/code&gt; directory from the root of your local repository. The &lt;code&gt;--only-errors&lt;/code&gt;
flags merely restricts any of the output to any errors that occur, instead of an ongoing stream
of what files it is scanning. As omitting the &lt;code&gt;--only-errors&lt;/code&gt; flag only affects the output
and not the detection of spelling mistakes, feel free to not use it when running locally.&lt;/p&gt;</content><category term="Contributing"></category></entry><entry><title>Как я могу внести свой вклад?</title><link href="https://blog.dmitriev.ee/2019/08/04/how-to-contribute/" rel="alternate"></link><published>2019-08-04T22:17:00+03:00</published><updated>2019-08-04T22:17:00+03:00</updated><author><name>Jack De Winter</name></author><id>tag:blog.dmitriev.ee,2019-08-04:/2019/08/04/how-to-contribute/</id><summary type="html">&lt;p&gt;This article provides a sweeping overview of the Elegant contribution&amp;nbsp;workflow.&lt;/p&gt;</summary><content type="html">
&lt;p&gt;Once you have decided to &lt;a href="https://blog.dmitriev.ee/2019/07/03/invitation-to-participate/"&gt;contribute to the project&lt;/a&gt;, we need to
go over some rules and guidelines before you can start. These rules and guidelines help us
work together as a team and give us a common set of directions that keep us all on the same
page. In the case of any disagreements on what needs to be done, we can always refer to the
guidelines to help us find our way from disagreement to consensus.&lt;/p&gt;
&lt;h2 id="before-we-start"&gt;Before We Start&lt;a class="headerlink" href="#before-we-start" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This document strives to provide a solid path through contributing a change to Elegant, from
setting up your environment to submitting and responding to a Pull Request.&lt;/p&gt;
&lt;p&gt;To stay focused on that solid path, additional information that is typically needed to provide
a complete picture of the topic being discussed will be presented in other articles and linked
to from this article.&lt;/p&gt;
&lt;p&gt;Please take the time to familiarize yourself with the information in the attached articles,
as they will help you build a complete understanding of our entire contribution process.&lt;/p&gt;
&lt;h2 id="getting-the-big-rule-out-of-the-way"&gt;Getting The Big Rule Out of the Way&lt;a class="headerlink" href="#getting-the-big-rule-out-of-the-way" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As the project is an open source project, anything you contribute to the project is covered by
the project’s &lt;a href="https://blog.dmitriev.ee/2019/07/03/contribution-license/"&gt;Contributions License&lt;/a&gt;. If you are not
willing or unable to abide by those licenses, we cannot have you contribute to the project.&lt;/p&gt;
&lt;h2 id="primary-goal"&gt;Primary Goal&lt;a class="headerlink" href="#primary-goal" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The primary goal of this project is to provide a theme for Pelican that provides the
&lt;a href="https://blog.dmitriev.ee/2019/07/03/look-and-feel/"&gt;Elegant Look and Feel&lt;/a&gt; to our user’s websites. To that end,
any features or changes must:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;not negatively effect readability and reading experience&lt;/li&gt;
&lt;li&gt;not cause distraction for the reader&lt;/li&gt;
&lt;li&gt;any changes must work out of the box with sensible defaults for the user&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These are not negotiable.&lt;/p&gt;
&lt;h2 id="developing-changes-locally"&gt;Developing Changes Locally&lt;a class="headerlink" href="#developing-changes-locally" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The Elegant project is &lt;a href="https://github.com/Pelican-Elegant/elegant"&gt;hosted in GitHub&lt;/a&gt; and
requires your machine to have a local &lt;a href="https://git-scm.com/downloads"&gt;Git Client&lt;/a&gt; to
contribute. The &lt;a href="https://git-scm.com/doc"&gt;Git documentation site&lt;/a&gt; has good instructions and
videos on how to get started with Git, as well as numerous instructional videos on
&lt;a href="https://www.youtube.com/results?search_query=git+clients"&gt;YouTube&lt;/a&gt; to get you going. If you
are new to Git, they are a great place to start!&lt;/p&gt;
&lt;h3 id="read-the-guides"&gt;Read The Guides&lt;a class="headerlink" href="#read-the-guides" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In addition to installing Git locally, we request that you take a solid look through the
following guides. The first guide,
&lt;a href="https://blog.dmitriev.ee/2019/07/03/git-tips-for-beginners/"&gt;Git Tips For Beginners&lt;/a&gt;, is a walk through of things that our
team has found useful in the past to help get people up and going with their contributions.
While this guide is optional, pointing people at this guide has resolved a fair number of
questions in the past.&lt;/p&gt;
&lt;p&gt;The second guide, our team’s &lt;a href="https://blog.dmitriev.ee/2019/07/20/git-commit-guidelines/"&gt;Git Commit Guidelines&lt;/a&gt;,
is required reading for all contributors. These guidelines document the rules we require every
contributor to follow when submitting commits for consideration.&lt;/p&gt;
&lt;p&gt;To make things easier for contributors, the repository includes configuration to
&lt;a href="https://blog.dmitriev.ee/2019/07/22/use-commitizen-for-git-commits/"&gt;use Commitizen for Git commits&lt;/a&gt;. Entering &lt;code&gt;git-cz&lt;/code&gt; on the command
line within the repository will walk you through a series of prompts to build a commit message
that is fully compliant with our guidelines. It’s usage is highly recommended to avoid issues.&lt;/p&gt;
&lt;h3 id="optional-setup"&gt;Optional Setup&lt;a class="headerlink" href="#optional-setup" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To assist you in preparing your contributions with minimal friction, you can optionally run
one or more pieces of our automated build pipeline on your local machine. Depending on the
depth and complexity of your changes, having these present on your local machine are often a
time saver in terms of detecting bugs before you submit a
&lt;a href="#submitting-a-change-for-consideration"&gt;Pull Request for your changes&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Choosing to run any of these checks locally will shorten the minimum time required to notice a
failure from 3-5 minutes for them to run on the GitHub machines to an average of 60 seconds or
less for those same checks to run on your local machine.&lt;/p&gt;
&lt;h4 id="running-pre-commit-hooks-locally"&gt;Running Pre-Commit Hooks Locally&lt;a class="headerlink" href="#running-pre-commit-hooks-locally" title="Permanent link"&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Facilitating the early detecting of pre-commit hook failures, an option is to install the
&lt;a href="https://blog.dmitriev.ee/2019/07/22/use-pre-commit-git-hooks/"&gt;Pre-commit tool&lt;/a&gt; in your local repository. With the
Pre-commit tool installed, any commits to your local Elegant repository will be subjected
to the same verification that is performed when you submit a
&lt;a href="#submitting-a-change-for-consideration"&gt;Pull Request for your changes&lt;/a&gt;.
This tool integrates with your local repository, so once installed it is automatically
executed as part of your normal &lt;code&gt;git commit&lt;/code&gt; process.&lt;/p&gt;
&lt;h4 id="running-the-spell-checker-locally"&gt;Running the Spell Checker Locally&lt;a class="headerlink" href="#running-the-spell-checker-locally" title="Permanent link"&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;As the dictionary in the environment that you develop changes in may be different than other
contributors, the team has elected to include a the
&lt;a href="https://blog.dmitriev.ee/2019/08/04/yaspeller-for-elegant/"&gt;yaspeller tool&lt;/a&gt;
as part of our build pipeline. While this does not integrate with your local repository
like the Pre-commit tool, running this locally can help shorten the cycle for ensuring that
your spelling is spot on!&lt;/p&gt;
&lt;h2 id="making-your-changes-to-elegant"&gt;Making Your Changes to Elegant&lt;a class="headerlink" href="#making-your-changes-to-elegant" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With all of the required, recommended and optional setup behind us, and all of the submitting
of the changes ahead of us, it is time to focus on how to develop features for Elegant. To
ensure that this topic is given the focus it requires, the article
&lt;a href="https://blog.dmitriev.ee/2019/07/22/developing-for-elegant/"&gt;Developing Features For Elegant&lt;/a&gt;
is dedicated to providing that information to contributors.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;While this section rightfully belongs where it is in terms of workflow, it is recommended that you continue reading this article to it’s end.  This will allow you to understand what comes after your changes, and may influence implementtion changes to avoid possible problems later on in the workflow.&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id="submitting-a-change-for-consideration"&gt;Submitting a Change For Consideration&lt;a class="headerlink" href="#submitting-a-change-for-consideration" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Submitting your changes is performed using the GitHub
&lt;a href="https://help.github.com/en/articles/creating-a-pull-request"&gt;Pull Request feature&lt;/a&gt;. Before
starting the Pull Request, you must push any committed changes from your local repository to
your forked Elegant repository on GitHub. Once that has been done, go to the
&lt;a href="https://github.com/Pelican-Elegant/elegant/compare"&gt;Compare Changes page&lt;/a&gt; and click on the
&lt;code&gt;compare across forks&lt;/code&gt; text right underneath the title.&lt;/p&gt;
&lt;p&gt;Across the top of the page, you will see 4 selection drop downs that look like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="fork drop downs" src="https://blog.dmitriev.ee/images/compare-changes.png"/&gt;&lt;/p&gt;
&lt;p&gt;These drop downs allow you to select where to compare changes from and to. Leave the first
selection alone, and unless instructed otherwise, select &lt;code&gt;next&lt;/code&gt; from the second selection.
Select the name of your repository fork from the third selection, typically your GitHub account
name followed by &lt;code&gt;/Elegant&lt;/code&gt;. Finally, select the branch that your changes are in on the
forked repository in the last selection.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;Typically, most people synchronize the branch name of their local repository with the branch name they push to on their forked repository.  If you push your local changes to a different branch on your forked repository, select the name of the branch in the last selection.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Once you confirm that the changes that are now visible at the bottom of the page are the ones
you intend to submit, press the &lt;code&gt;Create New Pull Request&lt;/code&gt; button. The edit field at the
top of the page must have a name that identifies what the change is and is important to relay
the scope of your change. However, the editor field below it is where most of the required information is.&lt;/p&gt;
&lt;p&gt;Currently there are 2 pre-requisites steps and 3 recommended steps as requirements of every
Pull Request. If you have satisfied these requirements, change the &lt;code&gt;[ ]&lt;/code&gt; text to &lt;code&gt;[x]&lt;/code&gt;
indicating that you have complied with the pre-requisite. Then proceed to the &lt;code&gt;Description&lt;/code&gt; at
the bottom and add a description that provides a good amount of information about what you
changed and why. If there were any reported issues that you resolved, it doesn’t hurt to
mention them in this section.&lt;/p&gt;
&lt;p&gt;When you are done with adding that information, double check it and press the
&lt;code&gt;Create pull request&lt;/code&gt; button to submit the request.&lt;/p&gt;
&lt;h2 id="building-your-changes-on-the-github-server"&gt;Building Your Changes on the GitHub Server&lt;a class="headerlink" href="#building-your-changes-on-the-github-server" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After pushing the &lt;code&gt;Create pull request&lt;/code&gt; button, you are transferred to another page that is
mostly the same as any other GitHub Pull Request page. The main difference is the merge
section near the bottom, where you will see something like the following:&lt;/p&gt;
&lt;p&gt;&lt;img alt="image" src="https://blog.dmitriev.ee/images/started-pull-request.png"/&gt;&lt;/p&gt;
&lt;p&gt;If the build verifies your changes, all 6 of the current checks will either have a grey box
in front of them or a green checkmark. If any of the verifications fail, they will have a
red X in front of the verification that failed. Click on the &lt;code&gt;Details&lt;/code&gt; text on the right side
to get more information on why those checks failed.&lt;/p&gt;
&lt;h3 id="build-verification-actions"&gt;Build Verification Actions&lt;a class="headerlink" href="#build-verification-actions" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To ensure each Pull Request contains solid changes, there are 3 sets of verification actions
performed on each Pull Request.&lt;/p&gt;
&lt;p&gt;The first set of actions are the &lt;code&gt;Header rules&lt;/code&gt;,
&lt;code&gt;Mixed content&lt;/code&gt;, &lt;code&gt;Pages changed&lt;/code&gt;, and &lt;code&gt;Redirect rules&lt;/code&gt; which are simple checks with
pre-defined rule sets. These rules employ simple rule sets looking for changes that are
outside the scope of the rest of the project, and rarely fire if you keep to the format
of the other files in the repository.&lt;/p&gt;
&lt;p&gt;The next verification action is the Travis &lt;span class="caps"&gt;CI&lt;/span&gt; action that performs a complete build of the
project, represented by the &lt;code&gt;continuous-integration/travis-ci/pr&lt;/code&gt; action. A complete build
of the project often takes 3-5 minutes, so this is the verification action you will be
waiting on the longest.&lt;/p&gt;
&lt;p&gt;It is this part of the build that puts all of the changes through strict checks to make
sure that the submitted changes are solid.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;install pre-requisites for building&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.dmitriev.ee/2019/07/22/use-pre-commit-git-hooks/"&gt;Pre-commit&lt;/a&gt; on the project source&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.dmitriev.ee/2019/08/04/yaspeller-for-elegant/"&gt;yaspeller&lt;/a&gt; on the project source&lt;/li&gt;
&lt;li&gt;publish for the documentation site&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/Online-W3C-Validator/"&gt;w3c_validator&lt;/a&gt; on the documentation site &lt;!-- yaspeller ignore --&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/html5validator/"&gt;html5validator&lt;/a&gt; on the documentation site &lt;!-- yaspeller ignore --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;More information on how our team uses Travis &lt;span class="caps"&gt;CI&lt;/span&gt; is detailed
&lt;a href="https://blog.dmitriev.ee/2018/12/07/travis-ci-and-doc-website/"&gt;in this article&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id="previewing-changes"&gt;Previewing Changes&lt;a class="headerlink" href="#previewing-changes" title="Permanent link"&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The final verification action is a simple build and internal deploy of the
&lt;a href="https://elegant.oncrashreboot.com/"&gt;Elegant documentation website&lt;/a&gt;, represented by the
&lt;code&gt;netlify/pelicanelegant/deploy-preview&lt;/code&gt; action. Clicking on the &lt;code&gt;Details&lt;/code&gt; text on the
right side of the action will redirect your browser to temporary deployment of the
documentation website deployed using &lt;a href="https://www.netlify.com/"&gt;Netlify&lt;/a&gt;. If the changes
that your are submitting are documentation changes or have an impact on the look and feel
of Elegant, you should use the preview to manually verify your changes.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;The documentation preview is deployed to Netlify without performing a full build as detailed above, and is not dependant on the full build step.  As such, you can manually verify your changes on the preview website while the full build is ongoing.&lt;/p&gt;
&lt;/div&gt;
&lt;h4 id="view-previews-for-other-pull-requests"&gt;View Previews For Other Pull Requests&lt;a class="headerlink" href="#view-previews-for-other-pull-requests" title="Permanent link"&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;This Netlify temporary deployment is also useful tool that can be used to see the effects
of any Pull Request on the documentation website. For example, if we want to look at what
the effects of &lt;a href="https://github.com/Pelican-Elegant/elegant/pull/458"&gt;Pull Request #458&lt;/a&gt; were,
we have a solid path to view those changes.&lt;/p&gt;
&lt;p&gt;Each of the
&lt;a href="https://github.com/Pelican-Elegant/elegant/pulls?q=is%3Apr+is%3Aclosed"&gt;recently close Pull Requests&lt;/a&gt;
was built with Netlify support enabled. As such, if you switch from the default
&lt;code&gt;Conversation&lt;/code&gt; tab to the &lt;code&gt;Checks&lt;/code&gt; tab, you can see if Netlify succeeded. If it did
succeed, there will be a &lt;code&gt;View more details on Netlify&lt;/code&gt; link at the bottom of the page
which will take you to the Netlify deployment of the Pull Request. At the top of the
&lt;code&gt;Deploy Log&lt;/code&gt; section is a &lt;code&gt;Preview&lt;/code&gt; button that will take you to the temporary deployment
of the documentation website, as if you had clicked on the &lt;code&gt;Details&lt;/code&gt; link from the
Pull Request page itself.&lt;/p&gt;
&lt;h3 id="what-happens-if-the-build-detects-errors"&gt;What Happens If The Build Detects Errors?&lt;a class="headerlink" href="#what-happens-if-the-build-detects-errors" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Once you fix any errors that the build detected, go through your normal verification process
and submit the changes to your forked repository. If your Pull Request is still open, when
GitHub detects that one of the repository/branch pairings in a Pull Request has been updated,
it will execute any required checks from the beginning. At that point, you are effectively
back at the
&lt;a href="#building-your-changes-on-the-github-server"&gt;Building Your Changes on the GitHub Server&lt;/a&gt;
section above.&lt;/p&gt;
&lt;p&gt;This looping will continue until one of two things happen: all errors are dealt with &lt;span class="caps"&gt;OR&lt;/span&gt; you
give up. At any point before the Pull Request is accepted and merged with the main
repository, you can push the &lt;code&gt;Close pull request&lt;/code&gt; button at the bottom of the page and close
the Pull Request. This will perform a “soft close” on the Pull Request, with the option to
re-open the Pull Request at a later date.&lt;/p&gt;
&lt;h4 id="consider-using-a-draft-pull-request"&gt;Consider Using a Draft Pull Request&lt;a class="headerlink" href="#consider-using-a-draft-pull-request" title="Permanent link"&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;If you want to make sure that your Pull Request builds on the server before submitting it for
consideration by the team, consider using a Draft Pull Request. Instead of pressing the
&lt;code&gt;Create pull request&lt;/code&gt; button in the
&lt;a href="#building-your-changes-on-the-github-server"&gt;Building Your Changes on the GitHub Server&lt;/a&gt;
section, click on the arrow on the right side of the button and select
&lt;code&gt;Create draft pull request&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="draft pull request" src="https://blog.dmitriev.ee/images/draft-pull-request.png"/&gt;&lt;/p&gt;
&lt;p&gt;A draft request is exactly like a normal Pull Request except that it is not visible to anyone
other than yourself. In this way, you can make sure the Pull Request is exactly the way
you want it before asking for it to be considered part of the project.&lt;/p&gt;
&lt;p&gt;Something that is often forgotten about Pull Requests, and therefore Draft Pull Requests, is
that you can edit most of the contents of the Pull Request after you have created it. Use this
to your advantage as you get your Pull Request ready!&lt;/p&gt;
&lt;h3 id="what-happens-if-team-members-ask-for-changes"&gt;What Happens If Team Members Ask For Changes?&lt;a class="headerlink" href="#what-happens-if-team-members-ask-for-changes" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As we are a team, when changes are submitted for consideration, the team will offer feedback
on the changes. The feedback will generally fall into 3 categories: yes, no, or almost.&lt;/p&gt;
&lt;p&gt;With the “yes” category, the changes will be accepted “as is” into the project.&lt;/p&gt;
&lt;p&gt;Conversely, in the “no” category, the changes are rejected, usually with a decent description
of why they were rejected. Depending on the rejection reason, it may be possible to adjust
your changes according to feedback in the rejection reason and submit it as a new Pull Request
at a later date.&lt;/p&gt;
&lt;p&gt;In the “almost” category, the feedback will usually contain specific things that one or more of
the team members want to see changed before it can be merged. This feedback can be a simple
as a grammar error they want to see fixed, or asking for a more complete article documenting
how to use your changes. The important part to note about this category is that the team
feels that after the suggested changes have been performed, you can easily move to the “yes” category.&lt;/p&gt;
&lt;p&gt;Regardless of what category the feedback for your changes falls into, please remember that we
are a team and we are at our best when we work together. If you have a disagreement, ask for
clarifications and initiate a conversation to understand where the reviewer of the Pull Request
is coming from. Work with that person to help yourself see their viewpoint.&lt;/p&gt;</content><category term="Contributing"></category></entry><entry><title>Developing Features For Elegant</title><link href="https://blog.dmitriev.ee/2019/07/22/developing-for-elegant/" rel="alternate"></link><published>2019-07-22T23:17:00+03:00</published><updated>2019-07-22T23:17:00+03:00</updated><author><name>Jack De Winter</name></author><id>tag:blog.dmitriev.ee,2019-07-22:/2019/07/22/developing-for-elegant/</id><summary type="html">&lt;p&gt;Elegant development is typically broken up into three concerns.  This article talks about each of&amp;nbsp;them.&lt;/p&gt;</summary><content type="html">&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;this document is under&amp;nbsp;construction&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;In most cases, this default is to have any configuration variables that support
those changes have a value of &lt;code&gt;None&lt;/code&gt;. There is a bit more leeway given for supporting plugins,
which are &lt;a href="#extending"&gt;covered below&lt;/a&gt;, but even Elegant enhancement to support those plugins
must follow these&amp;nbsp;rules.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.dmitriev.ee/2019/07/03/code-style-for-jinja2/"&gt;Jinja&amp;nbsp;Style&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.dmitriev.ee/2019/07/19/what-is-live-reload/"&gt;Live&amp;nbsp;Reload&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.dmitriev.ee/2019/07/19/live-reload-elegant-documentation-using-pelican/"&gt;Live Reload With&amp;nbsp;Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.dmitriev.ee/2019/07/19/live-reload-elegant-documentation-using-gulpjs/"&gt;Live Reload With&amp;nbsp;Gulp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Contributing"></category></entry><entry><title>Using Pre-Commit Git Hooks</title><link href="https://blog.dmitriev.ee/2019/07/22/use-pre-commit-git-hooks/" rel="alternate"></link><published>2019-07-22T23:17:00+03:00</published><updated>2019-07-22T23:17:00+03:00</updated><author><name>Talha Mansoor</name></author><id>tag:blog.dmitriev.ee,2019-07-22:/2019/07/22/use-pre-commit-git-hooks/</id><summary type="html">&lt;p&gt;Elegant use the Pre-commit tool to standardize on various concepts.  This article gives more information about the tool and how to run it&amp;nbsp;locally.&lt;/p&gt;</summary><content type="html">
&lt;p&gt;When there was a single developer working on the Elegant project, there were none of the
common problems associated with team projects: different styles and different processes. After
the project was moved to the current
&lt;a href="https://blog.dmitriev.ee/2019/01/05/community-led-project/"&gt;bazaar development model&lt;/a&gt;, the team thought it
best that all changes should follow the same set of stylistic guidelines.&lt;/p&gt;
&lt;p&gt;The Git clients provide a concept called
&lt;a href="https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks"&gt;Git hooks&lt;/a&gt;. Git hooks allow for
custom code to be triggered when certain actions are performed with Git. One of the most
common triggers is the pre-commit trigger, used to activate a program between a client
request to commit and the actual act of committing the change. If the program reports a
failure, the commit is aborted, hopefully with the failed program providing enough information
for the user to diagnose the issue.&lt;/p&gt;
&lt;h2 id="arent-git-hooks-hard-to-get-right"&gt;Aren’t Git Hooks Hard to Get Right?&lt;a class="headerlink" href="#arent-git-hooks-hard-to-get-right" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you have tried to set up Git hooks before, there are usually two problems you have faced:
the concept can be hard for people to understand and Git hooks are often frustrating difficult
to debug. Add onto this the different operating systems and versions of those systems on top
of that, and you can quickly get into nightmare territory for maintaining a Git hook.&lt;/p&gt;
&lt;p&gt;To solve most of these problems, the team decided to use the
&lt;a href="https://pre-commit.com/"&gt;Pre-Commit&lt;/a&gt;
Python package which provides a simple layer of abstraction over the Git hooks. The Pre-commit
package makes managing, sharing and updating the Git hooks very easy. As it installs itself as
a Git hook, once you have installed it properly, you may easily confuse it as a part of Git’s
commit process.&lt;/p&gt;
&lt;h2 id="why-use-pre-commit-locally"&gt;Why Use Pre-commit Locally?&lt;a class="headerlink" href="#why-use-pre-commit-locally" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Pre-commit runs Git hooks that among other things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Run &lt;a href="https://github.com/prettier/prettier"&gt;Prettier&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;applies common styling for Markdown, &lt;span class="caps"&gt;CSS&lt;/span&gt;, &lt;span class="caps"&gt;JS&lt;/span&gt; and json files&lt;/li&gt;
&lt;li&gt;Run &lt;a href="https://github.com/python/black"&gt;Black&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;applies common styling for Python files&lt;/li&gt;
&lt;li&gt;Removes trailing whitespace on lines&lt;/li&gt;
&lt;li&gt;Fixes the end of files to a common style&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Addressing any failures reported by these hooks locally will result in a smaller turn around
time in getting those issues addressed. This in turn will save time when submitting changes
in a Pull Request, as you have already dealt with any errors that this tool may report.&lt;/p&gt;
&lt;h2 id="how-do-i-install-it"&gt;How Do I Install It?&lt;a class="headerlink" href="#how-do-i-install-it" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The package itself is installed in typical Python fashion by using the Pip command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install pre-commit
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once installed in your environment, you can install the Git hooks for your local repository
by changing your directory to the root of that repository and executing the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pre-commit install
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="how-do-i-use-it-locally"&gt;How Do I Use It Locally?&lt;a class="headerlink" href="#how-do-i-use-it-locally" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Once installed, Pre-commit appears to be part of the Git commit process. When you perform
your next &lt;code&gt;git commit&lt;/code&gt; command (including using the &lt;code&gt;git-cz&lt;/code&gt; command for the
&lt;a href="https://blog.dmitriev.ee/2019/07/22/use-commitizen-for-git-commits/"&gt;Commitizen tool&lt;/a&gt;), the Pre-commit package will download any tools
it requires to properly run any required hooks. These tools are cached, so you will typically
only experience a long wait on the first time the Pre-commit package is executed.&lt;/p&gt;
&lt;p&gt;If the hooks run by the Pre-commit package fail for some reason, they will clearly notify
you of which of the hooks failed and typically present you with a reason why the hook failed.
Note that some of the hooks, such as the &lt;code&gt;prettier&lt;/code&gt; hook, may make some changes to your
files to bring them in line with the project’s common style. If any changes occur, they
will not be staged to your local repository, making any changes visible using the &lt;code&gt;git status&lt;/code&gt;
command.&lt;/p&gt;
&lt;p&gt;If the hook failed due to an error, you need to fix that error before it will allow you to
continue. If the hook failed because it made a change, make sure to verify the change that
was made for you, after making sure it will not have a negative effect on your changes. It
is then your responsibility to stage all changes to the repository before committing the
change again.&lt;/p&gt;
&lt;div class="admonition warning"&gt;
&lt;p class="admonition-title"&gt;For Windows Users&lt;/p&gt;
&lt;p&gt;If you run these checks on Windows, the &lt;code&gt;check-executables-have-shebangs&lt;/code&gt; hook will fail as Windows does not require that executable files start with a &lt;a href="shebang"&gt;shebang&lt;/a&gt; and all files implicitly have the &lt;code&gt;execute&lt;/code&gt; or &lt;code&gt;+x&lt;/code&gt; permission for Linux.&lt;/p&gt;
&lt;p&gt;To skip this check, enter &lt;code&gt;set SKIP=check-executables-have-shebangs&lt;/code&gt; on the command line before you execute the Pre-commit package, either from a Git hook as detailed above, or manually, as detail in the following section.&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id="can-i-run-the-hooks-without-a-commit"&gt;Can I Run The Hooks Without a Commit?&lt;a class="headerlink" href="#can-i-run-the-hooks-without-a-commit" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The full set of hooks are available by entering the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pre-commit run -a
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will run the full set of hooks and report any errors. It is often useful to run this
command before committing, even if you are using
&lt;a href="./commitizien.md"&gt;Commitizen&lt;/a&gt;
for your commits as is recommended.&lt;/p&gt;
&lt;h2 id="how-does-the-project-run-the-hooks-for-submissions"&gt;How Does The Project Run the Hooks For Submissions?&lt;a class="headerlink" href="#how-does-the-project-run-the-hooks-for-submissions" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The Elegant team fully believes in the Git hooks and their benefit to the team. As such, the
Pre-commit package is executed on all of our team builds (using Travis &lt;span class="caps"&gt;CI&lt;/span&gt;) for any commits and
pull requests made on the Travis &lt;span class="caps"&gt;CI&lt;/span&gt; servers. For more information on how we use Travis &lt;span class="caps"&gt;CI&lt;/span&gt; to
build the project, check out the article on
&lt;a href="./travis-ci-and-doc-website.md"&gt;Elegant and Travis &lt;span class="caps"&gt;CI&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;</content><category term="Contributing"></category></entry><entry><title>Elegant Logo</title><link href="https://blog.dmitriev.ee/2019/07/22/elegant-logo/" rel="alternate"></link><published>2019-07-22T21:17:00+03:00</published><updated>2019-07-22T21:17:00+03:00</updated><author><name>Talha Mansoor</name></author><id>tag:blog.dmitriev.ee,2019-07-22:/2019/07/22/elegant-logo/</id><summary type="html">&lt;p&gt;This article provides details on how the current Elegant logo was&amp;nbsp;created.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Elegant community held a &lt;a href="https://github.com/Pelican-Elegant/elegant/issues/190"&gt;discussion&lt;/a&gt; to decide a Logo for the project. We settled on following icon from
&lt;a href="https://thenounproject.com/search/?q=pelican&amp;amp;i=2213839"&gt;Pelican by Smalllike from the Noun Project&lt;/a&gt; &lt;!-- yaspeller ignore --&gt;
.&lt;/p&gt;
&lt;p&gt;&lt;svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 64 80" x="0px" y="0px" width="250" height="250"&gt;&lt;g&gt;&lt;path d="M39,25H24V20H35A11.013,11.013,0,0,0,46,9V3a1,1,0,0,0-1-1H19a5.006,5.006,0,0,0-5,5V38A11.013,11.013,0,0,0,25,49h4v7H27a3,3,0,0,0,0,6H37a3,3,0,0,0,0-6H35V49H50V36A11.013,11.013,0,0,0,39,25Zm0,2a8.953,8.953,0,0,1,5.644,2H35v2H46.478a8.962,8.962,0,0,1,1,2H39v2h8.941A8.935,8.935,0,0,1,48,36v1H44v2h4v2H29a3,3,0,0,1-3-3V27Zm-4-9H24V10H43.941A9.01,9.01,0,0,1,35,18ZM24,4H44V8H24ZM16,7a3,3,0,0,1,3-3h3V25H16ZM37,58a1,1,0,0,1,0,2H27a1,1,0,0,1,0-2Zm-4-2H31V49h2Zm15-9H25a9.01,9.01,0,0,1-9-9V27h2v7h2V27h4V38a5.006,5.006,0,0,0,5,5H48Z"/&gt;&lt;rect x="18" y="36" width="2" height="2"/&gt;&lt;circle cx="20.5" cy="7.5" r="1.5"/&gt;&lt;/g&gt;&lt;text x="0" y="79" fill="#000000" font-size="5px" font-weight="bold" font-family="'Helvetica Neue', Helvetica, Arial-Unicode, Arial, Sans-serif"&gt;Created by Smalllike&lt;/text&gt;&lt;text x="0" y="84" fill="#000000" font-size="5px" font-weight="bold" font-family="'Helvetica Neue', Helvetica, Arial-Unicode, Arial, Sans-serif"&gt;from the Noun Project&lt;/text&gt;&lt;/svg&gt; &lt;!-- yaspeller ignore --&gt;&lt;/p&gt;
&lt;p&gt;Building on top of it, some modifications were made to it using
&lt;a href="https://inkscape.org/"&gt;Inkscape&lt;/a&gt; &lt;!-- yaspeller ignore --&gt;
.&lt;/p&gt;
&lt;p&gt;&lt;svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 67 67" width="250" height="250"&gt;
    &lt;rect width="57.681" height="62.899" x="2.802" y="-11.841" ry="0" fill="none"/&gt;
    &lt;rect width="65.83" height="65.83" x=".585" y=".585" ry="2.398" fill="none" stroke="maroon" stroke-width="1.17"/&gt;
    &lt;g transform="translate(2.518 1.626)"&gt;
        &lt;path d="M39 25H24v-5h11A11.013 11.013 0 0046 9V3a1 1 0 00-1-1H19a5.006 5.006 0 00-5 5v31a11.013 11.013 0 0011 11h4v7h-2a3 3 0 000 6h10a3 3 0 000-6h-2v-7h15V36a11.013 11.013 0 00-11-11zm0 2a8.953 8.953 0 015.644 2H35v2h11.478a8.962 8.962 0 011 2H39v2h8.941A8.935 8.935 0 0148 36v1h-4v2h4v2H29a3 3 0 01-3-3V27zm-4-9H24v-8h19.941A9.01 9.01 0 0135 18zM24 4h20v4H24zm-8 3a3 3 0 013-3h3v21h-6zm21 51a1 1 0 010 2H27a1 1 0 010-2zm-4-2h-2v-7h2zm15-9H25a9.01 9.01 0 01-9-9V27h2v7h2v-7h4v11a5.006 5.006 0 005 5h19z" fill="#8b0000"/&gt;
        &lt;path d="M18 36h2v2h-2z"/&gt;
        &lt;circle cx="20.5" cy="7.5" r="1.5"/&gt;
    &lt;/g&gt;
    &lt;path d="M26.437 7.605V5.578H46.54v4.055H26.437z" fill="#f60"/&gt;
    &lt;path d="M26.437 15.625v-4.066h20.08l-.142.768c-.295 1.594-1.123 3.188-2.318 4.465a9.294 9.294 0 01-4.3 2.613c-.763.216-.916.221-7.05.253l-6.27.033z" fill="#fc0"/&gt;
    &lt;path d="M31.034 42.573c-1.137-.164-2.058-.933-2.45-2.043l-.124-.353-.012-5.77-.012-5.768h6.68c4.323 0 6.854.016 7.173.045 1.68.152 3.39.8 4.668 1.766l.19.144h-9.66v2.04h11.572l.194.308c.195.31.661 1.251.747 1.508l.047.138h-8.53v2.04h4.499c4.244 0 4.5.004 4.527.074.016.041.04.49.054 1l.025.923h-4.044v2.04h4.031v1.955l-9.66-.005c-5.312-.003-9.774-.022-9.915-.042z" stroke="maroon" stroke-width=".043"/&gt;
    &lt;path d="M33.553 54.137v-3.485h1.955v6.969h-1.955zm-4.31 7.426c-.228-.06-.596-.423-.658-.648a.893.893 0 01.054-.682c.107-.229.303-.421.525-.514.112-.047 1.071-.058 5.355-.057 4.97.001 5.226.005 5.387.08.647.296.778 1.177.241 1.62-.32.265-.08.255-5.656.25-3.352-.003-5.138-.02-5.248-.049z" fill="#f60" stroke="maroon" stroke-width=".042"/&gt;
    &lt;path d="M2.306 65.641c-.368-.16-.7-.478-.918-.882l-.174-.324V2.614l.19-.387a1.83 1.83 0 011.044-.914c.452-.161 61.652-.161 62.104 0a1.83 1.83 0 011.044.914l.19.387v61.82l-.174.325c-.223.413-.554.726-.936.885-.27.113-3.443.126-31.194.123-27.422-.003-30.924-.017-31.176-.126zm38.526-2.277c.607-.297 1.086-.772 1.422-1.41.21-.398.228-.502.228-1.322 0-.773-.026-.941-.193-1.277a3.304 3.304 0 00-1.449-1.452c-.534-.263-.55-.265-1.896-.292l-1.358-.027v-6.946h14.977l-.028-7.262c-.027-7.004-.034-7.288-.196-7.99-.505-2.194-1.441-3.938-2.97-5.53-1.094-1.14-3.132-2.357-4.7-2.805-1.558-.445-1.538-.445-10.137-.445h-7.95v-4.928l6.21-.03c5.931-.028 6.243-.036 6.939-.196 3.94-.906 7.003-3.602 8.222-7.24.529-1.58.568-1.944.614-5.791.024-1.924.017-3.67-.014-3.88a1.042 1.042 0 00-.325-.648l-.268-.268H34.35c-15.082 0-14.013-.037-15.144.532-.707.356-1.604 1.2-2.01 1.89a6.506 6.506 0 00-.5 1.139l-.189.606V40.97l.183.824c.489 2.207 1.435 3.997 2.914 5.511 1.509 1.546 3.359 2.587 5.521 3.11.607.146 1.021.17 3.54.202l2.853.037v6.931l-1.396.027c-1.313.025-1.423.04-1.855.242-1.7.797-2.304 2.958-1.254 4.489.357.521.954.967 1.551 1.16.464.15.736.157 6.11.14l5.623-.016z" fill="#fff" stroke="#fff" stroke-width=".08093600000000001"/&gt;
    &lt;path d="M26.5 48.525c-1.283-.147-2.925-.767-4.049-1.53-1.516-1.03-2.8-2.727-3.402-4.497-.47-1.38-.478-1.525-.478-7.973V28.63h1.942v7.04H22.536v-7.04H26.5v5.846c.002 6.462-.004 6.38.519 7.404.604 1.186 1.532 2.001 2.87 2.522l.535.209 10.014.022 10.013.022V48.615l-11.672-.01c-6.42-.006-11.946-.042-12.28-.08zm-3.964-9.903v-1.011H20.513V39.634H22.536zM18.57 17.394c0-10.175-.029-9.59.525-10.425.316-.475.804-.863 1.403-1.115.329-.138.616-.163 2.18-.19l1.8-.03v1.342c0 .739-.033 1.342-.072 1.342-.04 0-.128-.087-.198-.193-.214-.326-.805-.56-1.308-.518-1.841.153-1.884 2.863-.048 3.039.513.05.9-.085 1.234-.429.148-.153.298-.279.331-.28.033 0 .06 3.75.06 8.334v8.335h-5.906z" fill="#fff" stroke="#fff" stroke-width=".08093600000000001"/&gt;
&lt;/svg&gt;&lt;/p&gt;
&lt;p&gt;The we cleaned it using
&lt;a href="https://github.com/svg/svgo"&gt;svgo&lt;/a&gt; &lt;!-- yaspeller ignore --&gt;
tool. It reduced file size by around&amp;nbsp;50%.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ svgo -i elegant_logo.svg --pretty

elegant_logo.svg:
Done in &lt;span class="m"&gt;80&lt;/span&gt; ms!
&lt;span class="m"&gt;8&lt;/span&gt;.029 KiB - &lt;span class="m"&gt;52&lt;/span&gt;.5% &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;.815 KiB
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then, we converted &lt;span class="caps"&gt;SVG&lt;/span&gt; to &lt;span class="caps"&gt;PNG&lt;/span&gt; using
&lt;a href="https://github.com/shakiba/svgexport"&gt;svgexport&lt;/a&gt; &lt;!-- yaspeller ignore --&gt;
.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ svgexport elegant_logo.svg elegant_logo.png &lt;span class="m"&gt;100&lt;/span&gt;%
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The resultant file was around &lt;span class="caps"&gt;1MB&lt;/span&gt; is size. So we optimized it using
&lt;a href="https://imageoptim.com/mac"&gt;ImageOptim&lt;/a&gt; &lt;!-- yaspeller ignore --&gt;
, which reduced the file size by&amp;nbsp;98%.&lt;/p&gt;
&lt;p&gt;Your can download the files from our Git&amp;nbsp;repository.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/Pelican-Elegant/elegant/tree/master/elegant-logo"&gt;https://github.com/Pelican-Elegant/elegant/tree/master/elegant-logo&lt;/a&gt;&lt;/p&gt;</content><category term="Contributing"></category></entry><entry><title>How To Use Commitizen for Git Commits</title><link href="https://blog.dmitriev.ee/2019/07/22/use-commitizen-for-git-commits/" rel="alternate"></link><published>2019-07-22T14:15:00+03:00</published><updated>2019-07-22T14:15:00+03:00</updated><author><name>Talha Mansoor</name></author><id>tag:blog.dmitriev.ee,2019-07-22:/2019/07/22/use-commitizen-for-git-commits/</id><summary type="html">&lt;p&gt;Elegant uses the Commitizen tool to standardize Git commit messages across the&amp;nbsp;project.&lt;/p&gt;</summary><content type="html">
&lt;p&gt;The &lt;a href="https://blog.dmitriev.ee/2019/08/04/how-to-contribute/"&gt;Elegant Contribution Guidelines&lt;/a&gt; require that
each commit submitted for consideration be formatted according to the
&lt;a href="https://blog.dmitriev.ee/2019/07/20/git-commit-guidelines/"&gt;Git Commit Guidelines&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To make this process easier, the Elegant repository is configured to support the
&lt;a href="https://github.com/commitizen/cz-cli"&gt;Commitizen&lt;/a&gt; tool. This tool saves time by controlling
the format of the Git commit messages to a set of predefined options and patterns. This
formatting allows for our release process to be
&lt;a href="https://blog.dmitriev.ee/2019/07/20/fully-automated-version-management-and-release/"&gt;fully automated&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="prerequisites"&gt;Prerequisites&lt;a class="headerlink" href="#prerequisites" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Both &lt;a href="https://nodejs.org/en/download/"&gt;Node.js&lt;/a&gt; and &lt;a href="https://yarnpkg.com/en/docs/install"&gt;Yarn&lt;/a&gt;
must be installed on your system.&lt;/p&gt;
&lt;h3 id="install-commitizen"&gt;Install Commitizen&lt;a class="headerlink" href="#install-commitizen" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;From your command line terminal, go into the directory containing your fork of the Elegant
repository, then execute the following commands:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yarn global add commitizen
yarn install
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="use-commitizen"&gt;Use Commitizen&lt;a class="headerlink" href="#use-commitizen" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As the Elegant team has already made the repository
&lt;a href="https://github.com/commitizen/cz-cli#making-your-repo-commitizen-friendly"&gt;Commitizen friendly&lt;/a&gt;,
you can start using it for your commits by entering &lt;code&gt;git-cz&lt;/code&gt; in your command shell instead
of &lt;code&gt;git commit&lt;/code&gt;. Make sure the changes that you want to commit to your fork are staged.&lt;/p&gt;
&lt;p&gt;Once invoked, Commitizen will prompt you for answers to a number of questions. As mentioned
previously, the answers to these questions are formatted according to the
&lt;a href="https://blog.dmitriev.ee/2019/07/20/git-commit-guidelines/"&gt;Git Commit Guidelines&lt;/a&gt;
before being placed into the message field for the commit. Commitizen then follows through and
invokes &lt;code&gt;git commit&lt;/code&gt;, committing the staged changes along with the formatted message that was
crafted for you from the answers you provided.&lt;/p&gt;
&lt;p&gt;In some cases, such as a &lt;a href="https://blog.dmitriev.ee/2019/07/22/use-pre-commit-git-hooks/"&gt;Git pre-commit hook failure&lt;/a&gt;, you may
not want to re-answer the questions again. Once you fix the issues that prevented the
commit from happening, you can use &lt;code&gt;git-cz --retry&lt;/code&gt; to submit the commit again using the same
answers that were used in the failed attempt.&lt;/p&gt;
&lt;h2 id="video-demonstration"&gt;Video Demonstration&lt;a class="headerlink" href="#video-demonstration" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For a quick video on how this process works in real life, click on the play button below.&lt;/p&gt;
&lt;script async="" id="asciicast-258540" src="https://asciinema.org/a/258540.js"&gt;&lt;/script&gt;</content><category term="Contributing"></category></entry><entry><title>Automated Version Management and Release</title><link href="https://blog.dmitriev.ee/2019/07/20/fully-automated-version-management-and-release/" rel="alternate"></link><published>2019-07-20T23:17:00+03:00</published><updated>2019-07-20T23:17:00+03:00</updated><author><name>Talha Mansoor</name></author><id>tag:blog.dmitriev.ee,2019-07-20:/2019/07/20/fully-automated-version-management-and-release/</id><summary type="html">&lt;p&gt;Elegant utilizes a &amp;#8216;release early, release often&amp;#8217; philosophy that embraces a fully automated release&amp;nbsp;process.&lt;/p&gt;</summary><content type="html">
&lt;p&gt;The Elegant project follows a “release early, release often” software development philosophy.
By employing this philosophy, we are able to have each team member working on a different
aspect of the project with next to no friction from each other’s changes. At any point, any
team member can pull changes that have been made in another branch to their fork of the
repository and exercise their changes with complete confidence.&lt;/p&gt;
&lt;p&gt;Release process should be fully automated to materialize this goal.&lt;/p&gt;
&lt;h2 id="release-versions"&gt;Release Versions&lt;a class="headerlink" href="#release-versions" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Version management and publishing is accomplished using the
&lt;a href="https://github.com/semantic-release/semantic-release"&gt;semantic-release&lt;/a&gt; tool and it’s
&lt;a href="https://github.com/Pelican-Elegant/elegant/blob/master/.releaserc.json"&gt;configuration file&lt;/a&gt;.
This tool entirely removes human intervention from deciding the type and label of the next release of the project.&lt;/p&gt;
&lt;h3 id="how-does-versioning-work"&gt;How Does Versioning Work?&lt;a class="headerlink" href="#how-does-versioning-work" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Semantic release bases it’s decisions on the
&lt;a href="https://semver.org/"&gt;Semantic Versioning 2.0.0 specification&lt;/a&gt;, which is very specific.&lt;/p&gt;
&lt;p&gt;A quick summary is as follows. Each version is detailed in the form: &lt;code&gt;MAJOR.MINOR.PATCH&lt;/code&gt;.
The &lt;strong&gt;&lt;span class="caps"&gt;PATCH&lt;/span&gt;&lt;/strong&gt; version is incremented when only backwards compatible bug fixes are made in the
release. The &lt;strong&gt;&lt;span class="caps"&gt;MINOR&lt;/span&gt;&lt;/strong&gt; version is incremented (and &lt;strong&gt;&lt;span class="caps"&gt;PATCH&lt;/span&gt;&lt;/strong&gt; reset to 0) when functionality
is added in a backwards compatible manner to the release, along with any backwards compatible
bug fixes. The &lt;strong&gt;&lt;span class="caps"&gt;MAJOR&lt;/span&gt;&lt;/strong&gt; version is incremented (and &lt;strong&gt;&lt;span class="caps"&gt;MINOR&lt;/span&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;span class="caps"&gt;PATCH&lt;/span&gt;&lt;/strong&gt; reset to 0) when
incompatible &lt;span class="caps"&gt;API&lt;/span&gt; changes are introduced, along with any backwards compatible features or fixes.&lt;/p&gt;
&lt;p&gt;Here are some examples of release types that are generated based on commit messages:&lt;/p&gt;
&lt;!-- yaspeller ignore:start --&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Commit Message&lt;/th&gt;
&lt;th&gt;Release Type&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;fix(pencil): stop graphite breaking when too much pressure applied&lt;/td&gt;
&lt;td&gt;Patch Release&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;feat(pencil): add ‘graphiteWidth’ option&lt;/td&gt;
&lt;td&gt;Minor Feature Release&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;perf(pencil): remove graphiteWidth option&lt;br/&gt;&lt;br/&gt;&lt;span class="caps"&gt;BREAKING&lt;/span&gt; &lt;span class="caps"&gt;CHANGE&lt;/span&gt;: The graphiteWidth option has been removed.&lt;br/&gt;The default graphite width of 10mm is always used for performance reasons.&lt;/td&gt;
&lt;td&gt;Major Breaking Release&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;!-- yaspeller ignore:end --&gt;
&lt;p&gt;Note that the release type is specified as if that commit was the only commit in the release.
If the first two commits were put together in the release, the &lt;code&gt;Minor Feature Release&lt;/code&gt; of the
second commit would take precedence over the &lt;code&gt;Patch Release&lt;/code&gt; of the first commit. In the same
manner, the &lt;code&gt;Major Breaking Release&lt;/code&gt; of the third commit would take precedence if all three
commits were submitted in the same release.&lt;/p&gt;
&lt;h2 id="changelog-file-updates"&gt;&lt;span class="caps"&gt;CHANGELOG&lt;/span&gt; File Updates&lt;a class="headerlink" href="#changelog-file-updates" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;An integral part of the release is updating the
&lt;a href="https://github.com/Pelican-Elegant/elegant/blob/master/CHANGELOG.md"&gt;&lt;span class="caps"&gt;CHANGELOG&lt;/span&gt;&lt;/a&gt;.
By mandating that any commits for the project follow a
&lt;a href="https://blog.dmitriev.ee/2019/07/20/git-commit-guidelines/"&gt;mandated format for the commit messages&lt;/a&gt;,
the commits being added to the release can have their commit messages scanned by a tool,
including relevant portions into the release notes. This too is done automatically.&lt;/p&gt;
&lt;h3 id="example-of-an-automated-release"&gt;Example of an Automated Release&lt;a class="headerlink" href="#example-of-an-automated-release" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Here is an example of an automated release. This is the
&lt;a href="https://github.com/Pelican-Elegant/elegant/releases/tag/V3.2.0"&gt;Version 3.2.0&lt;/a&gt; that
was released on 30-Jul-2019. The specifics about the release can be obtained by clicking
on the 7 digit hexadecimal number below the version tag on the left side of the page, which
will take you to the &lt;a href="https://github.com/Pelican-Elegant/elegant/commit/48f39643edd6c3b7449af5dae8ade6323bc7c21f"&gt;release commit&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="automated release" src="https://blog.dmitriev.ee/images/automated-release.png"/&gt;&lt;/p&gt;
&lt;p&gt;This release can also be viewed by performing a &lt;code&gt;git log --grep=chore(release)&lt;/code&gt; command and
looking for the specific release information in the logs. You can then view the specific
information for that commit by using the &lt;code&gt;git show&lt;/code&gt; command with the hash for the release’s
commit, &lt;code&gt;git show 48f39643edd6c3b7449af5dae8ade6323bc7c21f&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Using either process, the result will look like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;commit 48f39643edd6c3b7449af5dae8ade6323bc7c21f
Author: semantic-release-bot &amp;lt;semantic-release-bot@martynus.net&amp;gt;
Date:   Tue Jul 30 19:56:10 2019 +0000

    chore(release): 3.2.0 [skip ci]

    # [3.2.0](https://github.com/Pelican-Elegant/elegant/compare/V3.1.0...V3.2.0) (2019-07-30)

    ### Bug Fixes

    * **freelists:** open FreeLists subscription form in a new tab ([f81657c](https://github.com/Pelican-Elegant/elegant/commit/f81657c))
    * **freelists:** replace deprecated subscription form with button ([9bfe3c1](https://github.com/Pelican-Elegant/elegant/commit/9bfe3c1)), closes [#412](https://github.com/Pelican-Elegant/elegant/issues/412)
    * **freelists:** rm unused include ([27f0831](https://github.com/Pelican-Elegant/elegant/commit/27f0831))

    ### Features

    * **comments:** reduce transition duration from 500 to 200 ([b86e13d](https://github.com/Pelican-Elegant/elegant/commit/b86e13d))
    * **favicon:** add 180x180 dimension shortcut icon support ([dd2ed24](https://github.com/Pelican-Elegant/elegant/commit/dd2ed24))
    * **filter:** add black list, white list feature for Disqus ([4887aec](https://github.com/Pelican-Elegant/elegant/commit/4887aec))
    * **filter:** add black list, white list feature for FreeLists ([2407cc8](https://github.com/Pelican-Elegant/elegant/commit/2407cc8))
    * **filter:** add black list, white list feature for Mailchimp ([b96122d](https://github.com/Pelican-Elegant/elegant/commit/b96122d))
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the main body of the output, there are links with associated text which are 7 digit
hexadecimal numbers. Each of these links is to a specific commit that was part of the
release. If you follow the link, you can verify that the correct text is being used for the
release notes.&lt;/p&gt;
&lt;p&gt;Additionally, there are links that are associated with text that starts with the &lt;code&gt;#&lt;/code&gt;
character followed by an integer. Each of these links is to an issue that was either updated or
fixed by the given commit. As with the above paragraph, you can verify that the correct
issue was associated with the commit in the release notes by following the commit links and
looking for any issue number at the end of the commit text.&lt;/p&gt;
&lt;p&gt;As the commits added in to this release included features, the &lt;code&gt;Minor Feature Release&lt;/code&gt; release
type was used, incrementing the minor part of the version number from 3.1.0 to 3.2.0.&lt;/p&gt;</content><category term="Contributing"></category></entry><entry><title>Git Commit Guidelines</title><link href="https://blog.dmitriev.ee/2019/07/20/git-commit-guidelines/" rel="alternate"></link><published>2019-07-20T23:17:00+03:00</published><updated>2019-07-20T23:17:00+03:00</updated><author><name>Talha Mansoor</name></author><id>tag:blog.dmitriev.ee,2019-07-20:/2019/07/20/git-commit-guidelines/</id><summary type="html">&lt;p&gt;Elegant has a mandatory Git commit message format that is described&amp;nbsp;here.&lt;/p&gt;</summary><content type="html">
&lt;p&gt;The Elegant release process is &lt;a href="https://blog.dmitriev.ee/2019/07/20/fully-automated-version-management-and-release/"&gt;fully automated&lt;/a&gt;. To make
this work, all commit message must adhere to a given set of rules.&lt;/p&gt;
&lt;h2 id="why-have-commit-message-rules"&gt;Why Have Commit Message Rules?&lt;a class="headerlink" href="#why-have-commit-message-rules" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;From the &lt;a href="https://github.com/semantic-release/semantic-release#commit-message-format"&gt;semantic-release project&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;semantic-release uses the commit messages to determine the type of changes in the codebase. Following formalized conventions for commit messages, semantic-release automatically determines the next semantic version number, generates a changelog and publishes the release.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;What does that mean? It means that semantic-release parses the commit messages to arrive
at a unbiased version number for a new release, and then creates that new release. This
allows for a new release to be put together with little human involvement.&lt;/p&gt;
&lt;h2 id="what-are-those-rules"&gt;What are those rules?&lt;a class="headerlink" href="#what-are-those-rules" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The Elegant development team chose to use the
&lt;a href="https://github.com/angular/angular.js/blob/master/DEVELOPERS.md#-git-commit-guidelines"&gt;Angular Commit Message Conventions&lt;/a&gt;
as the baseline for the team’s commit message conventions.&lt;/p&gt;
&lt;p&gt;Our conventions are largely derived from the Angular team’s guidelines
&lt;a href="https://gist.github.com/stephenparish/9941e89d80e2bc58a153"&gt;as documented here&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="is-there-something-to-help-me-with-the-rules"&gt;Is There Something to Help Me With The Rules?&lt;a class="headerlink" href="#is-there-something-to-help-me-with-the-rules" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Reading, understanding, and then getting used to following guidelines may take time. Even
then, if you are in a hurry, you can sometimes forget what the rules are. It’s only human.&lt;/p&gt;
&lt;p&gt;Our team has found life easier since we started using
&lt;a href="https://blog.dmitriev.ee/2019/07/22/use-commitizen-for-git-commits/"&gt;Commitizen for Git commits&lt;/a&gt;.
Our project includes configuration for Commitizen that automatically formats each commit
message to conform to our guidelines by walking you through a series of prompts. When you
finish those prompts, a new commit messages is authored for you with the information from those
prompts, following all of the rules in the following sections on the Commit Message Format.&lt;/p&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="admonition-title"&gt;Tip&lt;/p&gt;
&lt;p&gt;&lt;a href="https://blog.dmitriev.ee/2019/07/22/use-commitizen-for-git-commits/"&gt;Use Commitizen for Git commits&lt;/a&gt;.  It does make life easier.   It automatically formats the commit message to conform to our guidelines.&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id="commit-message-format"&gt;Commit Message Format&lt;a class="headerlink" href="#commit-message-format" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Each line of the commit message must be shorter than 101 characters! This allows the message
to be easier to read on GitHub as well as in various git tools.&lt;/p&gt;
&lt;p&gt;Each commit message consists of a &lt;strong&gt;header&lt;/strong&gt;, a &lt;strong&gt;body&lt;/strong&gt; and a &lt;strong&gt;footer&lt;/strong&gt;, as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;header&amp;gt;
&amp;lt;BLANK LINE&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;BLANK LINE&amp;gt;
&amp;lt;footer&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="header"&gt;Header&lt;a class="headerlink" href="#header" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The header is mandatory. It has a special format that includes a required &lt;strong&gt;type&lt;/strong&gt;, an
optional &lt;strong&gt;scope&lt;/strong&gt; and a required &lt;strong&gt;subject&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;type&amp;gt;(&amp;lt;scope&amp;gt;): &amp;lt;subject&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="type"&gt;Type&lt;a class="headerlink" href="#type" title="Permanent link"&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The type must be one of the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;feat&lt;/strong&gt;: A new feature&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;fix&lt;/strong&gt;: A bug fix&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;docs&lt;/strong&gt;: Documentation only changes&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;style&lt;/strong&gt;: Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc.)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;refactor&lt;/strong&gt;: A code change that neither fixes a bug nor adds a feature&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;perf&lt;/strong&gt;: A code change that improves performance &lt;!-- yaspeller ignore --&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;test&lt;/strong&gt;: Adding missing or correcting existing tests&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;chore&lt;/strong&gt;: Changes to the build process or auxiliary tools and libraries such as documentation generation&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;revert&lt;/strong&gt;: A revert to a previous commit. See the section &lt;a href="#revert-commits"&gt;Revert Commits&lt;/a&gt; below.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="scope"&gt;Scope&lt;a class="headerlink" href="#scope" title="Permanent link"&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The scope is intended to provide extra context on the changes included in the commit is for.
This context should provide useful information to someone reading the commit log, including
the reading of the commit log in the release notes.&lt;/p&gt;
&lt;p&gt;For example, if you fix something in the
&lt;a href="https://blog.dmitriev.ee/2018/12/07/adding-author-blurbs/"&gt;authors blurb&lt;/a&gt; section, a scope of &lt;code&gt;authors&lt;/code&gt; would be appropriate. If you are changing something with how the
&lt;a href="https://blog.dmitriev.ee/2019/07/01/unique-home-page-features/"&gt;landing page&lt;/a&gt;
works, a scope of &lt;code&gt;landing page&lt;/code&gt; or &lt;code&gt;home&lt;/code&gt; would be appropriate.&lt;/p&gt;
&lt;h4 id="subject"&gt;Subject&lt;a class="headerlink" href="#subject" title="Permanent link"&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The subject part of the header must follow these rules:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;always use the imperative, present tense: “change” not “changed”, “changes”, or “changing”&lt;/li&gt;
&lt;li&gt;do not capitalize the first letter&lt;/li&gt;
&lt;li&gt;no period (&lt;code&gt;.&lt;/code&gt;) at the end of the line&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id="what-is-imperative-mode"&gt;What is Imperative mode?&lt;a class="headerlink" href="#what-is-imperative-mode" title="Permanent link"&gt; &lt;/a&gt;&lt;/h5&gt;
&lt;p&gt;Chris Beams, in his article on
&lt;a href="https://chris.beams.io/posts/git-commit/#imperative"&gt;how to write a good commit message&lt;/a&gt;,
gives a very good explanation of imperative mode.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Imperative mood just means “spoken or written as if giving a command or instruction”. A few examples:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Clean your room&lt;/li&gt;
&lt;li&gt;Close the door&lt;/li&gt;
&lt;li&gt;Take out the trash&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The imperative can sound a little rude; that’s why we don’t often use it. But it’s perfect for Git commit subject lines.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id="revert-commits"&gt;Revert Commits&lt;a class="headerlink" href="#revert-commits" title="Permanent link"&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;If the commit reverts a previous commit, it must be specified with the &lt;code&gt;revert&lt;/code&gt; type, followed
by the complete header of the reverted commit as the subject. The body of the commit must
start with the text: &lt;code&gt;This reverts commit &amp;lt;hash&amp;gt;.&lt;/code&gt;, where the hash is the &lt;span class="caps"&gt;SHA&lt;/span&gt; of the commit
being reverted.&lt;/p&gt;
&lt;h3 id="body"&gt;Body&lt;a class="headerlink" href="#body" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The body of the commit message must follow these rules:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;always use the imperative, present tense: “change” not “changed”, “changes”, or “changing”&lt;/li&gt;
&lt;li&gt;include your motivation for the change and how it contrasts with the previous behavior&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="breaking-changes"&gt;Breaking changes&lt;a class="headerlink" href="#breaking-changes" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;All breaking changes have to be mentioned in the body with the description of the change,
justification and migration notes. The body must be prefixed with the text &lt;code&gt;BREAKING CHANGE:&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The following example is from the
&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/9b5b2eca2a34a5d9898173a8118cb5e37621dfd5"&gt;Elegant project repository&lt;/a&gt;.
After the required prefix, it describes the problem it is solving, and why it was needed.
In retrospect, while it does mention that &lt;code&gt;LANDING_PAGE_ABOUT&lt;/code&gt; is no longer used, it should
have gone into more detail on where to look up information on what was replacing it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;feat(home): write about me in markdown, reST or asciidoc

BREAKING CHANGE: Previously LANDING_PAGE_ABOUT was a dictionary that contained html tags. We used it
to create landing page. But users have demanded from the very beginning to be able to write the
landing page in markdown. This patch adds this feature. But in order to use it, you have to update
your configuration.

Closes #85
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="footer"&gt;Footer&lt;a class="headerlink" href="#footer" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;h4 id="referencing-issues"&gt;Referencing issues&lt;a class="headerlink" href="#referencing-issues" title="Permanent link"&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Closed bugs should be listed on a separate line in the footer prefixed with the &lt;code&gt;Closes&lt;/code&gt;
keyword.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Closes #234
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If your commit closes multiple issues, list them on the same line separated by a comma.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Closes #123, #245, #992
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If your commit affects an issue, but does not fix it completely, use the “Updates” keyword&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Updates #234
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="correct-message-format-examples"&gt;Correct Message Format Examples&lt;a class="headerlink" href="#correct-message-format-examples" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The following are commits from our own repository that shows how Elegant has used these guidelines.&lt;/p&gt;
&lt;h3 id="new-features"&gt;New Features&lt;a class="headerlink" href="#new-features" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;feat(monetization): add BestAzon support
feat(Chinese): add better font support for Chinese language
feat(footer): make external links Nofollow
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="fixes"&gt;Fixes&lt;a class="headerlink" href="#fixes" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;fix(reST): indents in line blocks is not preserved
fix(gist): embedded Github gist are not laid out correctly
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="documentation"&gt;Documentation&lt;a class="headerlink" href="#documentation" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docs(add): metadata variables
docs(add): release notes for 3.0.0
docs(update): change category of reading-time article
docs(update): set author information
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="miscellaneous"&gt;Miscellaneous&lt;a class="headerlink" href="#miscellaneous" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;chore(livereload): use es2015 syntax for gulp configuration
ci(docs): use sitemap plugin in production only
ci(docs): add default tasks.py file
refactor: move Google and Bing claims to their individual files
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="incorrect-message-format-examples"&gt;Incorrect Message Format Examples&lt;a class="headerlink" href="#incorrect-message-format-examples" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This commit message starts with a capital letter and ends with a period&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;doc(changes): Rewrite of multi-part plugin per issue 308.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This commit message does not use imperative mode.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docs(change): updating status doc to reflect current state
&lt;/pre&gt;&lt;/div&gt;</content><category term="Contributing"></category></entry><entry><title>LiveReload Elegant Documentation Using Gulp.js</title><link href="https://blog.dmitriev.ee/2019/07/19/live-reload-elegant-documentation-using-gulpjs/" rel="alternate"></link><published>2019-07-19T23:17:00+03:00</published><updated>2019-07-19T23:17:00+03:00</updated><author><name>Talha Mansoor</name></author><id>tag:blog.dmitriev.ee,2019-07-19:/2019/07/19/live-reload-elegant-documentation-using-gulpjs/</id><summary type="html">&lt;p&gt;Elegant has setup &lt;a href="https://gulpjs.com/"&gt;gulp.js&lt;/a&gt; and &lt;a href="https://www.browsersync.io/"&gt;BrowserSync&lt;/a&gt; for LiveReload feature to its developers and documentation writers. This is a better alternative to the &lt;a href="https://blog.dmitriev.ee/2019/07/19/live-reload-elegant-documentation-using-pelican/"&gt;Python LiveReload solution that Pelican offers by default&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="prerequisites"&gt;Prerequisites&lt;a class="headerlink" href="#prerequisites" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You need to run following steps only once, to setup the LiveReload using&amp;nbsp;gulp.&lt;/p&gt;
&lt;h3 id="step-1-install-nodejs-and-yarn"&gt;Step 1: Install NodeJS …&lt;/h3&gt;</summary><content type="html">&lt;p&gt;Elegant has setup &lt;a href="https://gulpjs.com/"&gt;gulp.js&lt;/a&gt; and &lt;a href="https://www.browsersync.io/"&gt;BrowserSync&lt;/a&gt; for LiveReload feature to its developers and documentation writers. This is a better alternative to the &lt;a href="https://blog.dmitriev.ee/2019/07/19/live-reload-elegant-documentation-using-pelican/"&gt;Python LiveReload solution that Pelican offers by default&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="prerequisites"&gt;Prerequisites&lt;a class="headerlink" href="#prerequisites" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You need to run following steps only once, to setup the LiveReload using&amp;nbsp;gulp.&lt;/p&gt;
&lt;h3 id="step-1-install-nodejs-and-yarn"&gt;Step 1: Install NodeJS and Yarn &lt;!-- yaspeller ignore --&gt;&lt;a class="headerlink" href="#step-1-install-nodejs-and-yarn" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Install &lt;a href="https://nodejs.org/en/download/"&gt;Node.js&lt;/a&gt; and &lt;a href="https://yarnpkg.com/en/docs/install"&gt;Yarn&lt;/a&gt; on your&amp;nbsp;system.&lt;/p&gt;
&lt;p&gt;If you are on Windows then try installing them with &lt;a href="https://scoop.sh/"&gt;scoop.sh&lt;/a&gt;. It saves time and makes update&amp;nbsp;easier.&lt;/p&gt;
&lt;h3 id="step-2-install-gulp"&gt;Step 2: Install gulp&lt;a class="headerlink" href="#step-2-install-gulp" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Run this command from your command line&amp;nbsp;terminal.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yarn global add gulp-cli
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="step-3-install-dependencies"&gt;Step 3: Install Dependencies&lt;a class="headerlink" href="#step-3-install-dependencies" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In the root of the Elegant repository,&amp;nbsp;run&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yarn install
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;yarn&lt;/code&gt; will create &lt;code&gt;node_modules&lt;/code&gt; folder in the&amp;nbsp;root.&lt;/p&gt;
&lt;h2 id="use-livereload"&gt;Use LiveReload&lt;a class="headerlink" href="#use-livereload" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Run &lt;code&gt;gulp&lt;/code&gt; command in the root of the elegant&amp;nbsp;repository.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gulp
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It will launch the browser and open the home page. Now when you edit the templates, &lt;span class="caps"&gt;CSS&lt;/span&gt; rules, JavaScript files, Markdown, or reStructuredText files, all opened tabs will automatically reload and reflect the&amp;nbsp;change.&lt;/p&gt;
&lt;p&gt;It is set to serve the documentation at &lt;a href="http://localhost:9001"&gt;http://localhost:9001&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="why-browsersync-is-better-than-python-livereload"&gt;Why BrowserSync is better than Python-LiveReload&lt;a class="headerlink" href="#why-browsersync-is-better-than-python-livereload" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;BrowserSync supports pretty URLs, which &lt;a href="https://blog.dmitriev.ee/2019/07/19/live-reload-elegant-documentation-using-pelican/#known-issue"&gt;Python-LiveReload doesn&amp;#8217;t&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;BrowserSync has number of additional powerful&amp;nbsp;features.&lt;/p&gt;
&lt;h3 id="interaction-sync"&gt;Interaction Sync&lt;a class="headerlink" href="#interaction-sync" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This is an extremely powerful and useful&amp;nbsp;feature.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Your scroll, click, refresh and form actions are mirrored between browsers while you&amp;nbsp;test.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;What it means is when you have &lt;span class="caps"&gt;URL&lt;/span&gt; open in more than one tabs or browsers. If you scroll in one tab, other tabs mirror the scroll&amp;nbsp;movement.&lt;/p&gt;
&lt;p&gt;You can use this feature to test your website in desktop and mobile widths simultaneously. Open a link in one tab normally, and in other tab in responsive&amp;nbsp;mode.&lt;/p&gt;
&lt;h3 id="browser-based-ui"&gt;Browser Based &lt;span class="caps"&gt;UI&lt;/span&gt;&lt;a class="headerlink" href="#browser-based-ui" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;BrowserSync offers and easy to use &lt;span class="caps"&gt;UI&lt;/span&gt;. To access it, run &lt;code&gt;gulp&lt;/code&gt;, open &lt;a href="http://localhost:9002/"&gt;http://localhost:9002/&lt;/a&gt; in your&amp;nbsp;browser.&lt;/p&gt;
&lt;h3 id="debug-css"&gt;Debug &lt;span class="caps"&gt;CSS&lt;/span&gt;&lt;a class="headerlink" href="#debug-css" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You can add simple and depth &lt;span class="caps"&gt;CSS&lt;/span&gt; outlines to elements, or overlay &lt;span class="caps"&gt;CSS&lt;/span&gt; grid using BrowserSync. Open &lt;a href="http://localhost:9002/remote-debug"&gt;http://localhost:9002/remote-debug&lt;/a&gt; in your&amp;nbsp;browser.&lt;/p&gt;
&lt;h3 id="network-throttle"&gt;Network Throttle&lt;a class="headerlink" href="#network-throttle" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You can test website on a slower network connection. To access open &lt;a href="http://localhost:9002/network-throttle"&gt;http://localhost:9002/network-throttle&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="is-gulpjs-necessary-to-use"&gt;Is gulp.js necessary to use?&lt;a class="headerlink" href="#is-gulpjs-necessary-to-use" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We have plans to use gulp.js to utilize tools like
PostCSS &lt;!-- yaspeller ignore --&gt;
and
Autoprefixer &lt;!-- yaspeller ignore --&gt;
, in future. Currently we use gulp.js to watch for file&amp;nbsp;changes.&lt;/p&gt;
&lt;p&gt;Pelican helper scripts does not watch for file changes. BrowserSync only watches the files that it servers, i.e. &lt;span class="caps"&gt;HTML&lt;/span&gt;, &lt;span class="caps"&gt;CSS&lt;/span&gt; and &lt;span class="caps"&gt;JS&lt;/span&gt; files. This means you need an external tool like gulp.js to watch Markdown and Jinja2&amp;nbsp;files.&lt;/p&gt;
&lt;h2 id="can-i-avoid-using-gulpjs"&gt;Can I avoid using gulp.js?&lt;a class="headerlink" href="#can-i-avoid-using-gulpjs" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;No. You shouldn&amp;#8217;t. Because the alternate is not&amp;nbsp;nice.&lt;/p&gt;
&lt;p&gt;We tried to use BrowserSync without gulp.js but due to limitation in Pelican helper scripts, it didn&amp;#8217;t pan&amp;nbsp;out.&lt;/p&gt;
&lt;p&gt;We installed BrowserSync. Then on one terminal, from &lt;code&gt;documentation&lt;/code&gt; folder, we&amp;nbsp;ran&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;invoke regenerate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In other terminal, from &lt;code&gt;documentation&lt;/code&gt; folder, we&amp;nbsp;ran&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;browser-sync start --server output --files output
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;regenerate&lt;/code&gt; task compiles Markdown files to &lt;span class="caps"&gt;HTML&lt;/span&gt;. BrowserSync automatically picks the changed &lt;span class="caps"&gt;HTML&lt;/span&gt; files and reload the&amp;nbsp;URLs.&lt;/p&gt;
&lt;p&gt;Unfortunately, &lt;code&gt;regenerate&lt;/code&gt; keeps &amp;#8220;regenerating&amp;#8221; even if no file has changed. As a result, BrowserSync keeps reloading the &lt;span class="caps"&gt;URL&lt;/span&gt; every second. It becomes useless because you cannot inspect &lt;span class="caps"&gt;HTML&lt;/span&gt; elements, view console or change &lt;span class="caps"&gt;CSS&lt;/span&gt; rules from the browser, because the &lt;span class="caps"&gt;URL&lt;/span&gt; is constantly&amp;nbsp;overloading.&lt;/p&gt;
&lt;p&gt;This forced us to resort to gulp.js for file&amp;nbsp;watching.&lt;/p&gt;</content><category term="Contributing"></category><category term="gulp"></category></entry><entry><title>LiveReload Elegant Documentation Using Pelican</title><link href="https://blog.dmitriev.ee/2019/07/19/live-reload-elegant-documentation-using-pelican/" rel="alternate"></link><published>2019-07-19T22:17:00+03:00</published><updated>2019-07-19T22:17:00+03:00</updated><author><name>Talha Mansoor</name></author><id>tag:blog.dmitriev.ee,2019-07-19:/2019/07/19/live-reload-elegant-documentation-using-pelican/</id><summary type="html">&lt;p&gt;Pelican introduced support for LiveReload in &lt;a href="https://github.com/getpelican/pelican/releases/tag/4.1.0"&gt;Version 4.1.0&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To use it, you need to install LiveReload pip&amp;nbsp;package.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install livereload
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then run from the root of the&amp;nbsp;documentation,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;invoke livereload
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You need to install &lt;code&gt;invoke&lt;/code&gt; and &lt;code&gt;tasks.py&lt;/code&gt; for this feature. It does &lt;strong&gt;not&lt;/strong&gt; work with&amp;nbsp;Makefile …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Pelican introduced support for LiveReload in &lt;a href="https://github.com/getpelican/pelican/releases/tag/4.1.0"&gt;Version 4.1.0&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To use it, you need to install LiveReload pip&amp;nbsp;package.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install livereload
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then run from the root of the&amp;nbsp;documentation,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;invoke livereload
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You need to install &lt;code&gt;invoke&lt;/code&gt; and &lt;code&gt;tasks.py&lt;/code&gt; for this feature. It does &lt;strong&gt;not&lt;/strong&gt; work with&amp;nbsp;Makefile.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install invoke
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="known-issue"&gt;Known Issue&lt;a class="headerlink" href="#known-issue" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;div class="admonition danger"&gt;
&lt;p class="admonition-title"&gt;Pretty URLs Do Not&amp;nbsp;Work&lt;/p&gt;
&lt;p&gt;Remove or comment out &lt;code&gt;ARTICLE_URL = "{slug}"&lt;/code&gt; from Pelican configuration to make LiveReload&amp;nbsp;work&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Unfortunately, Pelican LiveReload depends on &lt;a href="https://github.com/lepture/python-livereload"&gt;Python-LiveReload&lt;/a&gt;, which &lt;a href="https://github.com/lepture/python-livereload/pull/131"&gt;does not support extension less files&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;What does it&amp;nbsp;mean?&lt;/p&gt;
&lt;p&gt;Your &lt;span class="caps"&gt;URL&lt;/span&gt; must end at &lt;code&gt;.html&lt;/code&gt;,&amp;nbsp;like,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;http://127.0.0.1:9000/live-reload-elegant-documentation.html
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If it does not have the &lt;code&gt;.html&lt;/code&gt; in the end, then LiveReload will return 404&amp;nbsp;error.&lt;/p&gt;
&lt;p&gt;This can happen if your Pelican configuration&amp;nbsp;has&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;ARTICLE_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;{slug}&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Therefore, to make LiveReload work, comment out the above&amp;nbsp;line.&lt;/p&gt;
&lt;p&gt;This issues has been reported to the Pelican team. You can track it &lt;a href="https://github.com/getpelican/pelican/issues/2595"&gt;here&lt;/a&gt;.&lt;/p&gt;</content><category term="Contributing"></category></entry><entry><title>What is LiveReload</title><link href="https://blog.dmitriev.ee/2019/07/19/what-is-live-reload/" rel="alternate"></link><published>2019-07-19T21:17:00+03:00</published><updated>2019-07-19T21:17:00+03:00</updated><author><name>Talha Mansoor</name></author><id>tag:blog.dmitriev.ee,2019-07-19:/2019/07/19/what-is-live-reload/</id><summary type="html">&lt;p&gt;What does LiveReload&amp;nbsp;do?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;LiveReload monitors changes in the file system. As soon as you save a file, it is pre-processed as needed, and the browser is&amp;nbsp;refreshed.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Elegant documentation is LiveReload ready. This feature saves a lot of time. Next time when you are writing or updating an article …&lt;/p&gt;</summary><content type="html">&lt;p&gt;What does LiveReload&amp;nbsp;do?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;LiveReload monitors changes in the file system. As soon as you save a file, it is pre-processed as needed, and the browser is&amp;nbsp;refreshed.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Elegant documentation is LiveReload ready. This feature saves a lot of time. Next time when you are writing or updating an article for Elegant&amp;nbsp;documentation,&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;just open a browser on one side of your monitor (or on secondary&amp;nbsp;monitor)&lt;/li&gt;
&lt;li&gt;open &lt;span class="caps"&gt;URL&lt;/span&gt; of your article in the browser, for example &lt;a href="http://localhost:9001/what-is-live-reload"&gt;http://localhost:9001/what-is-live-reload&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;open the Markdown file of your article and start&amp;nbsp;typing&lt;/li&gt;
&lt;li&gt;when you save the file, your markdown file will be compiled into &lt;span class="caps"&gt;HTML&lt;/span&gt; using Pelican, then your browser tab will reload automatically and show you the&amp;nbsp;changes&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There are two ways to get LiveReload working for Elegant&amp;nbsp;documentation.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://blog.dmitriev.ee/2019/07/19/live-reload-elegant-documentation-using-gulpjs/"&gt;Using gulp.js&amp;nbsp;(Recommended)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.dmitriev.ee/2019/07/19/live-reload-elegant-documentation-using-pelican/"&gt;Using&amp;nbsp;Pelican&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><category term="Contributing"></category></entry><entry><title>Code Style for Jinja2</title><link href="https://blog.dmitriev.ee/2019/07/03/code-style-for-jinja2/" rel="alternate"></link><published>2019-07-03T22:17:00+03:00</published><updated>2019-07-03T22:17:00+03:00</updated><author><name>Talha Mansoor</name></author><id>tag:blog.dmitriev.ee,2019-07-03:/2019/07/03/code-style-for-jinja2/</id><summary type="html">&lt;p&gt;Elegant&amp;#8217;s Jinja templates adhere to the code style described in this&amp;nbsp;article.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Please make sure to follow the code style of the existing code&amp;nbsp;base.&lt;/p&gt;
&lt;p&gt;Specifically:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;use single (&lt;code&gt;''&lt;/code&gt;) rather than double (&lt;code&gt;""&lt;/code&gt;) quotation marks for Jinja&amp;nbsp;strings&lt;/li&gt;
&lt;li&gt;in Jinja print statements, surround the variable with spaces inside curly braces – for example: &lt;code&gt;{{ foo.bar }}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;use double (&lt;code&gt;""&lt;/code&gt;) quotation marks around &lt;span class="caps"&gt;HTML&lt;/span&gt;&amp;nbsp;attributes&lt;/li&gt;
&lt;li&gt;end files with a&amp;nbsp;newline&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can run &lt;code&gt;gulp validate&lt;/code&gt; task to validate the templates files using &lt;a href="https://github.com/ramonsaraiva/jinjaninja"&gt;Jinja Ninja&lt;/a&gt;.
It is not comprehensive but it does point out obvious mistakes. You can read more about using &lt;code&gt;gulp&lt;/code&gt; &lt;a href="https://blog.dmitriev.ee/2019/07/19/live-reload-elegant-documentation-using-gulpjs/"&gt;here&lt;/a&gt;.&lt;/p&gt;</content><category term="Contributing"></category></entry><entry><title>Contributions License</title><link href="https://blog.dmitriev.ee/2019/07/03/contribution-license/" rel="alternate"></link><published>2019-07-03T22:07:00+03:00</published><updated>2019-07-03T22:07:00+03:00</updated><author><name>Talha Mansoor</name></author><id>tag:blog.dmitriev.ee,2019-07-03:/2019/07/03/contribution-license/</id><summary type="html">&lt;p&gt;The licensing terms under which Elegant is&amp;nbsp;developed.&lt;/p&gt;</summary><content type="html">
&lt;p&gt;By submitting a change to the project, you implicitly acknowledge that you are following
the following license rules.&lt;/p&gt;
&lt;h2 id="licensing"&gt;Licensing&lt;a class="headerlink" href="#licensing" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;All contributions to the project are understood to be submitted under the same (inbound)
license as the main (outbound) license of the main Elegant repository.&lt;/p&gt;
&lt;p&gt;All code and theme contributions are submitted according to the
&lt;a href="https://spdx.org/licenses/MIT.html"&gt;&lt;span class="caps"&gt;MIT&lt;/span&gt; License&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;All documentation contributions are submitted according to the
&lt;a href="https://spdx.org/licenses/CC-BY-SA-4.0.html"&gt;&lt;span class="caps"&gt;CC&lt;/span&gt;-&lt;span class="caps"&gt;BY&lt;/span&gt;-&lt;span class="caps"&gt;SA&lt;/span&gt;-4.0 License&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;All contributions of code where the submitter is not the owner of the submission must indicate
the source of the code, who the author or copyright holder is, and what license or licensing
terms are being used to allow the contribution in the Elegant project.&lt;/p&gt;</content><category term="Contributing"></category></entry><entry><title>Git Tips for Beginners</title><link href="https://blog.dmitriev.ee/2019/07/03/git-tips-for-beginners/" rel="alternate"></link><published>2019-07-03T21:57:00+03:00</published><updated>2019-07-03T21:57:00+03:00</updated><author><name>Talha Mansoor</name></author><id>tag:blog.dmitriev.ee,2019-07-03:/2019/07/03/git-tips-for-beginners/</id><summary type="html">&lt;p&gt;This article contains a number of tips useful for working with Elegant and&amp;nbsp;Git.&lt;/p&gt;</summary><content type="html">
&lt;p&gt;Here are some tips we have found useful for using Git to contribute to the project.&lt;/p&gt;
&lt;h2 id="how-to-set-up-your-git-repository"&gt;How To Set Up Your Git Repository&lt;a class="headerlink" href="#how-to-set-up-your-git-repository" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Create your own fork of Elegant by going to the project repository webpage &lt;a href="https://github.com/Pelican-Elegant/elegant"&gt;on GitHub&lt;/a&gt; and pressing the &lt;code&gt;Fork&lt;/code&gt; button.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="Fork Button" src="https://blog.dmitriev.ee/images/github-fork-button.png"/&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You will now be redirected to the page representing your fork of the repository. To clone the your fork of the repository to your computer, press the &lt;code&gt;Clone or download&lt;/code&gt; button and follow the instructions provided.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="Clone or Download button" src="https://blog.dmitriev.ee/images/github-clone-button.png"/&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a directory to host your repository in and change to that directory. Run the following command to set your forked repository as &lt;code&gt;Upstream&lt;/code&gt;:&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;bash
   git remote add upstream https://github.com/Pelican-Elegant/pelican-elegant.git&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="pull-before-starting-changes"&gt;Pull Before Starting Changes&lt;a class="headerlink" href="#pull-before-starting-changes" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Most of the changes that you will submit will be against the Upstream repository’s &lt;code&gt;next&lt;/code&gt;
branch. Whether you decide to work in your local repository’s &lt;code&gt;next&lt;/code&gt; branch or create a new
branch of your own, it is recommended that you do a &lt;code&gt;git pull&lt;/code&gt; against the Upstream &lt;code&gt;next&lt;/code&gt;
branch before starting to work on a new set of changes. This will ensure that you are starting
from a known good point, and reduce the chance of requiring a merge at a later stage.&lt;/p&gt;
&lt;h2 id="updatingrebasing-to-upstream"&gt;Updating/Rebasing to Upstream&lt;a class="headerlink" href="#updatingrebasing-to-upstream" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It is a good practice to update your repository to it’s Upstream repository one or more times
during the development of your changes. Specifically, the &lt;code&gt;next&lt;/code&gt; branch of the repository
is where most of the changes are submitted to, and you should either rebase or pull any
changes down to your local repository from there. This practice will ensure that any changes
that have been made to that Upstream branch are brought down where you can test your changes
with anyone other changes.&lt;/p&gt;
&lt;p&gt;To update from the &lt;code&gt;next&lt;/code&gt; branch, from within your project directory, enter the following commands:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git fetch upstream next&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git rebase upstream/next&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="squash-commits-more-complex-rebasing"&gt;Squash Commits &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; More Complex Rebasing&lt;a class="headerlink" href="#squash-commits-more-complex-rebasing" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Before you &lt;a href="https://github.com/Pelican-Elegant/elegant/pulls"&gt;create a pull request in GitHub&lt;/a&gt;,
you have the option to squash your commits into a single commit. This is often used to clean
up a series of commits where you were experimenting with something or just had to fiddle with
something to get it &lt;code&gt;just right&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To squash and rebase your commits, use the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git rebase --interactive upstream/master
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="admonition warning"&gt;
&lt;p class="admonition-title"&gt;Warning&lt;/p&gt;
&lt;p&gt;As with all knives, especially Swiss-army knives, please take caution.  Rebasing a repository after pushing one or more commits to another repository can be troublesome.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;For more on the interactive rebase command of Git, see &lt;a href="https://git-scm.com/docs/user-manual#interactive-rebase"&gt;its official documentation&lt;/a&gt; and helper articles such as
&lt;a href="https://makandracards.com/makandra/527-squash-several-git-commits-into-a-single-commit"&gt;this article&lt;/a&gt;.&lt;/p&gt;</content><category term="Contributing"></category></entry><entry><title>Приглашение к участию</title><link href="https://blog.dmitriev.ee/2019/07/03/invitation-to-participate/" rel="alternate"></link><published>2019-07-03T20:07:00+03:00</published><updated>2019-07-03T20:07:00+03:00</updated><author><name>Talha Mansoor</name></author><id>tag:blog.dmitriev.ee,2019-07-03:/2019/07/03/invitation-to-participate/</id><summary type="html">&lt;p&gt;Elegant has a mandatory Git commit message format that is described&amp;nbsp;here.&lt;/p&gt;</summary><content type="html">
&lt;p&gt;This website, &lt;a href="https://elegant.oncrashreboot.com"&gt;elegant.onCrashReboot.com&lt;/a&gt;,
is an excellent demonstration of the theme that all of us contributors love. While looking for
new features that add to what Elegant has to offer, we also continue to take great care that
we adhere to &lt;a href="https://blog.dmitriev.ee/2019/07/03/look-and-feel/"&gt;Elegant’s Look and Feel&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This practice allows you, a website owner, the opportunity to give you readers a clean flow of
reading through the body of the article with minimal destructions, with no loss of
functionality. When new features are added, you can decide whether or not to adopt these
features with the confidence that those new features will be consistent with what you already
are using. This will provide the users of your website with something that is well thought out
and organized, appealing to many readers.&lt;/p&gt;
&lt;p&gt;To accomplish this, Elegant is proudly a
&lt;a href="https://blog.dmitriev.ee/2019/01/05/community-led-project/"&gt;team driven open source project&lt;/a&gt;.
While it was created in 2012 by Talha Mansoor, the change to a community driven project in
early 2019 has energized the development of the project. By asking “how can I help” or
“do you need help with…”, people have slowly joined the team and enriched the theme to what
you see today. The contributions of these people has allowed the project to grow beyond the
scope of what any one of them could accomplish on their own. Their contributions, together as
a team, are responsible for the project you see here today.&lt;/p&gt;
&lt;h2 id="what-can-i-do"&gt;What Can I Do?&lt;a class="headerlink" href="#what-can-i-do" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If using the Elegant theme and reading this invitation inspires you to contribute, we welcome
the addition of your creativity to our team. No coding skills are required to volunteer to
help with Elegant. The theme is mostly composed of templates written in
&lt;a href="http://jinja.pocoo.org/"&gt;Jinja&lt;/a&gt; utilizing
&lt;a href="https://blog.dmitriev.ee/2019/07/03/metadata/"&gt;metadata&lt;/a&gt; associated with each article. We are
confident that if you want to help, we can get you up and running in no time!&lt;/p&gt;
&lt;h2 id="where-do-i-start"&gt;Where Do I Start?&lt;a class="headerlink" href="#where-do-i-start" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As you are volunteering your time and energy, we don’t want you to take on a really big task
to start, scaring you away in the process. For this purpose, we keep a refined list of
&lt;a href="https://github.com/pelican-elegant/elegant/labels/pull%20request%20welcome"&gt;lower priority issues&lt;/a&gt;
to allow you to gently ease yourself into assisting with the project. If none of those
issues appeal to you, feel free to look at all of our
&lt;a href="https://github.com/Pelican-Elegant/elegant/issues?q=is:open+is:issue"&gt;open issues&lt;/a&gt;, and see
if any of those are more attractive to you.&lt;/p&gt;
&lt;p&gt;If none of that appeals to you and you still want to help, don’t worry! We know we are not
perfect and rely on feedback from our users to help us make the theme better for everyone.&lt;/p&gt;
&lt;h2 id="how-can-i-help"&gt;How Can I Help?&lt;a class="headerlink" href="#how-can-i-help" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;See something that isn’t working properly?
&lt;a href="https://github.com/Pelican-Elegant/elegant/issues"&gt;Report a bug&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;See something that you think is missing?
&lt;a href="https://github.com/Pelican-Elegant/elegant/issues"&gt;File a feature request&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;See an article that you think could be clearer?
&lt;a href="https://github.com/Pelican-Elegant/elegant/issues"&gt;File a documentation issue&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We welcome everyone and value every contribution. Our Thanks list exhibits we
value and give credit to not only code contributors, but also the bug reporters
and support seekers.&lt;/p&gt;
&lt;p&gt;We hope you will act professionally and respectfully and will avoid
exclusionary behaviour.&lt;/p&gt;</content><category term="Contributing"></category></entry><entry><title>Why Does Elegant Look The Way It Does?</title><link href="https://blog.dmitriev.ee/2019/07/03/look-and-feel/" rel="alternate"></link><published>2019-07-03T20:07:00+03:00</published><updated>2019-07-03T20:07:00+03:00</updated><author><name>Jack De Winter</name></author><id>tag:blog.dmitriev.ee,2019-07-03:/2019/07/03/look-and-feel/</id><summary type="html">&lt;p&gt;Elegant has been purposefully crafted to follow a specific set of design principles.  This article discusses those design&amp;nbsp;principles.&lt;/p&gt;</summary><content type="html">
&lt;h2 id="discussion"&gt;Discussion&lt;a class="headerlink" href="#discussion" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Elegant is theme that is largely inspired by the following articles/tweets:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.roughtype.com/?p=1378"&gt;Nicholas Carr’s Experiments in delinkification&lt;/a&gt; &lt;!-- yaspeller ignore --&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pdos.csail.mit.edu/~neha/hyperlinks/main-no.html"&gt;Neha Narula response to Carr Article&lt;/a&gt; &lt;!-- yaspeller ignore --&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aroundthesphere.wordpress.com/2010/06/08/give-your-blog-posts-some-ritalin/"&gt;Collection of responses to Carr Article&lt;/a&gt; &lt;!-- yaspeller ignore --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the first source, Nicholas makes a solid argument that embedded hyperlink tags,
&lt;a href="http://www.roughtype.com/?p=1378"&gt;such as this one&lt;/a&gt;, break the reader’s
concentration while reading. He also mentions that studies have been performed which measured
reading comprehension of articles with and without visible hyperlinks.&lt;/p&gt;
&lt;p&gt;From his article:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Even if you don’t click on a link, your eyes notice it, and your frontal cortex has to fire up a bunch of neurons to decide whether to click or not. You may not notice the little extra cognitive load placed on your brain, but it’s there and it matters. People who read hypertext comprehend and learn less, studies show, than those who read the same material in printed form. The more links in a piece of writing, the bigger the hit on comprehension.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Inspired by the article, the Elegant theme was created as an extension of the suggestions in
the
Carr &lt;!-- yaspeller ignore --&gt;
article combined with some of the concerns of the responses. Allowing the user a
clean flow of reading through the body of the article is considered the highest priority for
Elegant theme decisions.&lt;/p&gt;
&lt;p&gt;When present, the links are shown in a muted manner to minimize the
impact on the cognitive load of the reader. Carrying that design choice forward results in
two subsequent design choices: muted colors and sidebars for extra information.&lt;/p&gt;
&lt;p&gt;Following the spirit of the article, Elegant reduces any distraction by blending all elements
with the background and elevating the article’s content against the background. Instead of a
distracting bright-blue hyperlink showing a link to an external source, a dotted underline and
a slightly darker font color is used. Instead of using bold colors for the text and
background of the admonitions and code blocks, lighter colors are used for both.&lt;/p&gt;
&lt;p&gt;Elegant also reduces the distractions by relocating the extra information contained in an
article’s &lt;a href="https://blog.dmitriev.ee/2014/03/18/how-elegant-displays-table-of-contents/"&gt;Table of Contents&lt;/a&gt;
to the left sidebar and displaying it in a smaller font. This allows the table to retain it’s
usefulness to the reader while not intruding on the article. In a similar fashion, the right
sidebar is used to relate any other extra information about the article to the user. Elements
that regularly appear in the right sidebar include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Category&lt;/li&gt;
&lt;li&gt;Last Updated time&lt;/li&gt;
&lt;li&gt;&lt;span class="dquo"&gt;“&lt;/span&gt;Monthly Updates” opt-in&lt;/li&gt;
&lt;li&gt;Published time&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.dmitriev.ee/2019/07/15/add-reading-time-estimate/"&gt;Reading Time&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.dmitriev.ee/2014/04/20/how-to-use-multi-part-plugin/"&gt;Series section&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.dmitriev.ee/2019/08/12/how-to-display-your-social-media-profiles/"&gt;&lt;span class="dquo"&gt;“&lt;/span&gt;Stay in Touch” icons&lt;/a&gt; &lt;!-- yaspeller ignore --&gt;&lt;/li&gt;
&lt;li&gt;Tags&lt;/li&gt;
&lt;/ul&gt;</content><category term="Contributing"></category><category term="design philosophy"></category><category term="distraction"></category><category term="cognitive overload"></category><category term="information overload"></category></entry><entry><title>Elegant grows into a community-led project</title><link href="https://blog.dmitriev.ee/2019/01/05/community-led-project/" rel="alternate"></link><published>2019-01-05T19:40:00+02:00</published><updated>2019-01-05T19:40:00+02:00</updated><author><name>Pablo Iranzo Gómez</name></author><id>tag:blog.dmitriev.ee,2019-01-05:/2019/01/05/community-led-project/</id><summary type="html">&lt;p&gt;Elegant has grown into a community-driven project. It also got a new website and organizational structure, culminating in its biggest release&amp;nbsp;yet.&lt;/p&gt;</summary><content type="html">
&lt;h2 id="adopting-bazar-model"&gt;Adopting Bazar Model&lt;a class="headerlink" href="#adopting-bazar-model" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.oncrashreboot.com"&gt;Talha Mansoor&lt;/a&gt; published the first version of Elegant in 2012. It grew in popularity in a short time, due to its clean and functional style.&lt;/p&gt;
&lt;p&gt;In November 2018,
&lt;a href="https://matija.suklje.name"&gt;Matija Šuklje&lt;/a&gt; &lt;!-- yaspeller ignore --&gt;
called Elegant’s community into a &lt;a href="https://github.com/talha131/pelican-elegant/issues/173"&gt;discussion about the future of the theme&lt;/a&gt;. Response was immense. Talha was the first to support the proposal of changing the development model from a single-developer to a community-led project following the &lt;a href="https://en.wikipedia.org/wiki/The_Cathedral_and_the_Bazaar"&gt;bazaar development model&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.oncrashreboot.com"&gt;He&lt;/a&gt; moved Elegant from a personal repository to a separate organization &lt;a href="https://github.com/Pelican-Elegant/"&gt;Pelican-Elegant&lt;/a&gt;, and added active community members to the &lt;a href="https://github.com/orgs/Pelican-Elegant/people"&gt;team&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This way, the bus factor of the project has greatly improved.&lt;/p&gt;
&lt;!-- yaspeller ignore:start --&gt;
&lt;!-- yaspeller ignore:end --&gt;
&lt;h2 id="new-governance-model"&gt;New Governance Model&lt;a class="headerlink" href="#new-governance-model" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Since the code base is now tended by more than one, &lt;a href="https://github.com/orgs/Pelican-Elegant/people"&gt;team&lt;/a&gt; has put in place some basic rules of governance to avoid people stepping on each-others toes.&lt;/p&gt;
&lt;p&gt;We clarified the outbound and inbound licensing situation. We release Elegant (outbound license) under the &lt;a href="https://spdx.org/licenses/MIT.html"&gt;&lt;span class="caps"&gt;MIT&lt;/span&gt;&lt;/a&gt; license and its documentation under the &lt;a href="https://creativecommons.org/licenses/by/4.0/"&gt;&lt;span class="caps"&gt;CC&lt;/span&gt;-&lt;span class="caps"&gt;BY&lt;/span&gt;-4.0&lt;/a&gt; license. All code contributions are made directly under the “Inbound=Outbound licensing model”. What it means is that, the license everyone contributes their code under (i.e. inbound license) is same as the license that the code is then released under to the general public.&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://github.com/Pelican-Elegant/elegant/blob/master/CONTRIBUTING.md"&gt;contribution guidelines&lt;/a&gt; are also updated and should be easier to follow now.&lt;/p&gt;
&lt;p&gt;We have also started discussing &lt;a href="https://github.com/Pelican-Elegant/elegant/issues/180"&gt;how to vote on new features and other important decisions&lt;/a&gt;, which we will put into effect soon.&lt;/p&gt;
&lt;h2 id="new-documentation-website"&gt;New Documentation Website&lt;a class="headerlink" href="#new-documentation-website" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Any good project needs good documentation and deserves a good homepage.&lt;/p&gt;
&lt;p&gt;We decided to eat our own dog food and host Elegant documentation on an Elegant-themed Pelican instance. This serves three purposes. One, hosts documentation, two, showcases Elegant features, and third, a testing ground to try out new ideas.&lt;/p&gt;
&lt;p&gt;This resulted in &lt;a href="https://elegant.oncrashreboot.com"&gt;elegant.onCrashReboot.com&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="future-releases"&gt;Future releases&lt;a class="headerlink" href="#future-releases" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As we write this blog post, the discussion on &lt;a href="https://github.com/Pelican-Elegant/elegant/issues/192"&gt;how to tackle future releases&lt;/a&gt; is still on-going.&lt;/p&gt;
&lt;p&gt;Right now, the discussion seems to go in the line of:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/Pelican-Elegant/elegant/milestone/3"&gt;2.0&lt;/a&gt; – All those fixes and features that do not require creating Pelican plugins or changes in Pelican code. This release will have updated documentation too.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Pelican-Elegant/elegant/milestone/5"&gt;2.1&lt;/a&gt; – Make theme compatible with Pelican 4.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Pelican-Elegant/elegant/milestone/4"&gt;3.0&lt;/a&gt; – Next generation Elegant – the biggest goal is to remove dependency on Bootstrap, to make it easier to maintain. 3.0.0 should have feature parity with 2.0.0.&lt;/li&gt;
&lt;/ol&gt;</content><category term="Contributing"></category></entry><entry><title>Triggering a travis-ci build on another repository</title><link href="https://blog.dmitriev.ee/2018/12/11/travis-to-trigger-build-in-another-repository/" rel="alternate"></link><published>2018-12-11T21:49:47+01:00</published><updated>2018-12-11T21:49:47+01:00</updated><author><name>Pablo Iranzo Gómez</name></author><id>tag:blog.dmitriev.ee,2018-12-11:/2018/12/11/travis-to-trigger-build-in-another-repository/</id><summary type="html">
&lt;div class="admonition warning"&gt;
&lt;p class="admonition-title"&gt;Outdated&lt;/p&gt;
&lt;p&gt;Elegant no longer uses the procedure described in this article&lt;/p&gt;
&lt;/div&gt;
&lt;h1 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt; &lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;After setting up &lt;a href="https://blog.dmitriev.ee/2018/12/07/travis-ci-and-doc-website/"&gt;build automation&lt;/a&gt; we also wanted it not to happen only when updating the &lt;code&gt;documentation&lt;/code&gt; repository.&lt;/p&gt;
&lt;p&gt;Besides hosting documentation, Elegant website also serves as a live demo of the current release. This meant, the website should …&lt;/p&gt;</summary><content type="html">
&lt;div class="admonition warning"&gt;
&lt;p class="admonition-title"&gt;Outdated&lt;/p&gt;
&lt;p&gt;Elegant no longer uses the procedure described in this article&lt;/p&gt;
&lt;/div&gt;
&lt;h1 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt; &lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;After setting up &lt;a href="https://blog.dmitriev.ee/2018/12/07/travis-ci-and-doc-website/"&gt;build automation&lt;/a&gt; we also wanted it not to happen only when updating the &lt;code&gt;documentation&lt;/code&gt; repository.&lt;/p&gt;
&lt;p&gt;Besides hosting documentation, Elegant website also serves as a live demo of the current release. This meant, the website should be regenerated and updated every time when a documented is added or edited, and also when Elegant theme is updated.&lt;/p&gt;
&lt;p&gt;Github and Travis doesn’t offer dependent builds out of the box, so the trick goes to ‘signal’ via a github token to trigger a Travis build.&lt;/p&gt;
&lt;h1 id="the-technical-solution"&gt;The technical solution&lt;a class="headerlink" href="#the-technical-solution" title="Permanent link"&gt; &lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;The approach goes via tweaking the ‘test validation’ &lt;code&gt;.travis.yaml&lt;/code&gt; and adding some more steps:&lt;/p&gt;
&lt;p&gt;The initial file (similar to the one in our previous article, but for running the ‘page build’ with latest repository checkout) looks like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Copyright (C) 2017, 2018 Pablo Iranzo Gómez &amp;lt;Pablo.Iranzo@gmail.com&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;language&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;python&lt;/span&gt;
&lt;span class="nt"&gt;dist&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;trusty&lt;/span&gt;
&lt;span class="nt"&gt;sudo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;required&lt;/span&gt;

&lt;span class="nt"&gt;python&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;"3.5"&lt;/span&gt;

&lt;span class="c1"&gt;# prepare and move data for execution&lt;/span&gt;

&lt;span class="nt"&gt;before_install&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pip install -U pip&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pip install -U setuptools&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pip install -r tests/requirements.txt&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pip install -r tests/test-requirements.txt&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pip install peru&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;mkdir -p tests/themes/elegant&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;mv templates tests/themes/elegant/&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;mv static tests/themes/elegant/&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;cd tests &amp;amp;&amp;amp; peru sync&lt;/span&gt;

&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pelican content/ -o output/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Is then modified to add:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;before_script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;npm install travis-ci&lt;/span&gt;

&lt;span class="nt"&gt;after_success&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;node trigger-build.js&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This installs Travis-&lt;span class="caps"&gt;CI&lt;/span&gt; utilities and runs a custom script ‘trigger-build.js’ with node, which in turn actually triggers Travis build.&lt;/p&gt;
&lt;p&gt;The script, downloaded from
&lt;a href="https://kamranicus.com/posts/2015-02-26-continuous-deployment-with-travis-ci"&gt;Kamran Ayub blog&lt;/a&gt; &lt;!-- yaspeller ignore --&gt;
has been edited to specify the ‘repository’ we will trigger and the name of the environment variable containing the token:&lt;/p&gt;
&lt;!-- yaspeller ignore:start --&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;Travis&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"travis-ci"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// change this&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;repo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Pelican-Elegant/documentation"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;travis&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Travis&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;version&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"2.0.0"&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;travis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;authenticate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// available through Travis CI&lt;/span&gt;
    &lt;span class="c1"&gt;// see: http://kamranicus.com/blog/2015/02/26/continuous-deployment-with-travis-ci/&lt;/span&gt;
    &lt;span class="nx"&gt;github_token&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;TRATOKEN&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;travis&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;repos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;builds&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nx"&gt;travis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;build_id&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;builds&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;
          &lt;span class="p"&gt;},&lt;/span&gt;
          &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;flash&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;notice&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;!-- yaspeller ignore:end --&gt;
&lt;p&gt;As you can see, in line 14, it grabs the github token from environment variable ‘&lt;span class="caps"&gt;TRATOKEN&lt;/span&gt;’ that we’ve defined in Travis-&lt;span class="caps"&gt;CI&lt;/span&gt; environment for the build.&lt;/p&gt;
&lt;p&gt;This is similar to &lt;a href="https://blog.dmitriev.ee/2018/12/07/travis-ci-and-doc-website/"&gt;what we did&lt;/a&gt; in the documentation repository to push the built website to another repository.&lt;/p&gt;
&lt;p&gt;With this solution in place, when a new commit is merged on ‘master’ branch on the ‘theme’ repository &lt;a href="https://github.com/Pelican-Elegant/elegant"&gt;(&lt;code&gt;elegant&lt;/code&gt;)&lt;/a&gt;, Travis &lt;span class="caps"&gt;CI&lt;/span&gt; does get invoked to schedule a build on the &lt;a href="https://github.com/Pelican-Elegant/documentation"&gt;&lt;code&gt;documentation&lt;/code&gt;&lt;/a&gt; repository, thus, rendering the live website with latest templates.&lt;/p&gt;</content><category term="Contributing"></category><category term="pelican"></category><category term="FOSS"></category><category term="travis"></category><category term="ci/cd"></category><category term="elegant"></category><category term="blog"></category><category term="python"></category></entry><entry><title>Travis-CI Automation for documentation website</title><link href="https://blog.dmitriev.ee/2018/12/07/travis-ci-and-doc-website/" rel="alternate"></link><published>2018-12-07T16:00:47+01:00</published><updated>2018-12-07T16:00:47+01:00</updated><author><name>Pablo Iranzo Gómez</name></author><id>tag:blog.dmitriev.ee,2018-12-07:/2018/12/07/travis-ci-and-doc-website/</id><summary type="html">
&lt;div class="admonition warning"&gt;
&lt;p class="admonition-title"&gt;Outdated&lt;/p&gt;
&lt;p&gt;Elegant no longer uses the procedure described in this article&lt;/p&gt;
&lt;/div&gt;
&lt;h1 id="background"&gt;Background&lt;a class="headerlink" href="#background" title="Permanent link"&gt; &lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/Pelican-Elegant/elegant"&gt;Elegant&lt;/a&gt; theme for pelican has been undergoing a big change from individual-driven effort to community, as part of this, one of the tasks to accomplish, has been the decoupling from author blog to project site for documentation.&lt;/p&gt;
&lt;p&gt;As …&lt;/p&gt;</summary><content type="html">
&lt;div class="admonition warning"&gt;
&lt;p class="admonition-title"&gt;Outdated&lt;/p&gt;
&lt;p&gt;Elegant no longer uses the procedure described in this article&lt;/p&gt;
&lt;/div&gt;
&lt;h1 id="background"&gt;Background&lt;a class="headerlink" href="#background" title="Permanent link"&gt; &lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/Pelican-Elegant/elegant"&gt;Elegant&lt;/a&gt; theme for pelican has been undergoing a big change from individual-driven effort to community, as part of this, one of the tasks to accomplish, has been the decoupling from author blog to project site for documentation.&lt;/p&gt;
&lt;p&gt;As we wanted this process to be both automated and allowed us to demonstrate via
dogfooding &lt;!-- yaspeller ignore --&gt;
that the theme works and how it looks, the idea was to automate the rendering of pelican website with new documents.&lt;/p&gt;
&lt;h1 id="under-the-hood"&gt;Under the hood&lt;a class="headerlink" href="#under-the-hood" title="Permanent link"&gt; &lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Setting an automated build required several steps to be done:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Get a GitHub token that could be used by Travis for pushing to a repository (and configure it in Travis environment variables for the repository in a variable named &lt;code&gt;GITHUB_TOKEN&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;run unit tests for validating new &lt;span class="caps"&gt;PR&lt;/span&gt; before merging&lt;/li&gt;
&lt;li&gt;configure Travis so that it downloads required dependencies in order to run pelican and then publish the generated web to the repository&lt;/li&gt;
&lt;li&gt;a GitHub pages enabled repository so that resulting files can be viewed as a webpage.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;One of the key pieces is a properly configured &lt;code&gt;.travis.yaml&lt;/code&gt; like the one we started using:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;language&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;python&lt;/span&gt;
&lt;span class="nt"&gt;dist&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;trusty&lt;/span&gt;
&lt;span class="nt"&gt;sudo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;required&lt;/span&gt;

&lt;span class="nt"&gt;python&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;"3.5"&lt;/span&gt;

&lt;span class="nt"&gt;before_install&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pip install -U pip&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pip install -U setuptools&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pip install -r requirements.txt&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pip install -r test-requirements.txt&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pip install peru&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;peru sync&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pip install tox&lt;/span&gt;

&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;tox&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;make html&lt;/span&gt;

&lt;span class="nt"&gt;after_success&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;rm -rf .git/&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;git init&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;git config user.name "Travis CI"&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;git config user.email "travis@domain.com"&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;git config --global push.default simple&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;git remote add origin https://${GITHUB_TOKEN}@github.com/Pelican-Elegant/pelican-elegant.github.io.git&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;make github&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="image-setup"&gt;Image setup&lt;a class="headerlink" href="#image-setup" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So, from above file we do:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;language&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;python&lt;/span&gt;
&lt;span class="nt"&gt;dist&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;trusty&lt;/span&gt;
&lt;span class="nt"&gt;sudo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;required&lt;/span&gt;

&lt;span class="nt"&gt;python&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;"3.5"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Configure language as python&lt;/li&gt;
&lt;li&gt;Select distribution&lt;/li&gt;
&lt;li&gt;Confirm we require ‘sudo’ access&lt;/li&gt;
&lt;li&gt;Configure python version as 3.5&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All of this depends on Travis Image being used and their documentation&lt;/p&gt;
&lt;h2 id="preparation-of-environment"&gt;Preparation of environment&lt;a class="headerlink" href="#preparation-of-environment" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Now, we’ll prepare the environment for our tests:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;before_install&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pip install -U pip&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pip install -U setuptools&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pip install -r requirements.txt&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pip install -r test-requirements.txt&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pip install peru&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;peru sync&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pip install tox&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We do install pip, setuptools, repository and test requirements, peru and tox.&lt;/p&gt;
&lt;p&gt;Peru is used to grab additional dependencies for elegant (plugins, latest theme, etc)&lt;/p&gt;
&lt;h2 id="actual-tests"&gt;Actual tests&lt;a class="headerlink" href="#actual-tests" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is really easy in our case:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;tox&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;make html&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We run ‘tox’ that allows to automate Python virtualenv and tests and then, use the Makefile from Pelican to build the site and tests plugins, etc&lt;/p&gt;
&lt;p&gt;If everything succeeds, we’re ready for the next step (publishing)&lt;/p&gt;
&lt;h2 id="after-tests-passed"&gt;After tests passed&lt;a class="headerlink" href="#after-tests-passed" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;All the environment setup and tests have succeed now, we do need to push the site ‘live’&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;after_success&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;rm -rf .git/&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;git init&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;git config user.name "Travis CI"&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;git config user.email "travis@domain.com"&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;git config --global push.default simple&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;git remote add origin https://${GITHUB_TOKEN}@github.com/Pelican-Elegant/pelican-elegant.github.io.git&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;make github&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This piece does the final step, first removes info about the repository containing the actual documentation and allows us to initialize a new one, that we make it point towards the repository we’re pushing (so that we keep separate actual website content from ‘rendered’ website).&lt;/p&gt;
&lt;p&gt;In the final step, ‘make github’ uses the Makefile provided with pelican to push the changes to the ‘master’ branch of the target repository, that then, is ready to be served via github pages as a regular web server would do.&lt;/p&gt;
&lt;h1 id="wrap-up"&gt;Wrap up&lt;a class="headerlink" href="#wrap-up" title="Permanent link"&gt; &lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;So, right now we’ve accomplished several things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We do use pelican in the same way that we’ll do for our own website&lt;/li&gt;
&lt;li&gt;We do also have as a consequence, a &lt;a href="https://elegant.oncrashreboot.com"&gt;‘live’ demo&lt;/a&gt; of latest master branch showcasing features&lt;/li&gt;
&lt;li&gt;We did automate publishing of webpage as soon as contributors send new articles and are approved for merge&lt;/li&gt;
&lt;li&gt;All requires no extra change to regular workflow as &lt;travis-ci.org&gt; is the glue here putting together all the pieces.&lt;/travis-ci.org&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let us know via an &lt;a href="https://github.com/Pelican-Elegant/elegant/issues/new"&gt;issue&lt;/a&gt; if any problem is spotted on the generated documentation website.&lt;/p&gt;</content><category term="Contributing"></category><category term="pelican"></category><category term="foss"></category><category term="travis"></category><category term="ci/cd"></category><category term="elegant"></category><category term="python"></category></entry></feed>