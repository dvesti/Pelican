<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Pelican-200</title><link href="https://dvesti.github.io/Pelican/" rel="alternate"></link><link href="https://dvesti.github.io/Pelican/feeds/all.atom.xml" rel="self"></link><id>https://dvesti.github.io/Pelican/</id><updated>2020-08-03T02:43:00+03:00</updated><subtitle>Блог сайта Dmitriev.ee</subtitle><entry><title>Добавили комментирование</title><link href="https://dvesti.github.io/Pelican/2020/08/03/dobableny-kommentarii-utterances/" rel="alternate"></link><published>2020-08-03T02:43:00+03:00</published><updated>2020-08-03T02:43:00+03:00</updated><author><name>Dvesti</name></author><id>tag:dvesti.github.io,2020-08-03:/Pelican/2020/08/03/dobableny-kommentarii-utterances/</id><summary type="html">&lt;p&gt;Установил на блоге Комментирование &amp;#8212; &lt;a href="https://utteranc.es/"&gt;Utterances&lt;/a&gt;. В теме &lt;em&gt;Elegant&lt;/em&gt; почти всё уже настроено. Повозиться надо, но немного.&lt;br /&gt;
При настройке пользовался статьями &lt;a href="https://dvesti.github.io/Pelican/2019/08/18/enable-utterances-comments/"&gt;этой&lt;/a&gt; и &lt;a href="https://jackdewinter.github.io/2019/10/27/fine-tuning-pelican-connecting-with-readers/"&gt;этой&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;По умолчанию &amp;#8212; комментарии ко всем статьям отключены, кроме тех, которые попадают в исключение. Т.е. я сам в &lt;em&gt;шапке статьи&lt;/em&gt; указываю, что ограничения для неё не работают …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Установил на блоге Комментирование &amp;#8212; &lt;a href="https://utteranc.es/"&gt;Utterances&lt;/a&gt;. В теме &lt;em&gt;Elegant&lt;/em&gt; почти всё уже настроено. Повозиться надо, но немного.&lt;br /&gt;
При настройке пользовался статьями &lt;a href="https://dvesti.github.io/Pelican/2019/08/18/enable-utterances-comments/"&gt;этой&lt;/a&gt; и &lt;a href="https://jackdewinter.github.io/2019/10/27/fine-tuning-pelican-connecting-with-readers/"&gt;этой&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;По умолчанию &amp;#8212; комментарии ко всем статьям отключены, кроме тех, которые попадают в исключение. Т.е. я сам в &lt;em&gt;шапке статьи&lt;/em&gt; указываю, что ограничения для неё не работают: &lt;code&gt;utterances_filter: off&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Здесь, комментарии, конечно же, включу&amp;nbsp;:)&lt;/p&gt;
&lt;p&gt;По уже хорошей традиции, допишу статью позже, как это я уже неоднократно&amp;nbsp;делал&lt;/p&gt;</content><category term="Blog"></category><category term="hack"></category><category term="comments"></category><category term="pelican"></category></entry><entry><title>Поиск на русском языке — сделан?!</title><link href="https://dvesti.github.io/Pelican/2020/07/31/sdelal-poisk-pelican/" rel="alternate"></link><published>2020-07-31T15:43:00+03:00</published><updated>2020-07-31T15:43:00+03:00</updated><author><name>Dvesti</name></author><id>tag:dvesti.github.io,2020-07-31:/Pelican/2020/07/31/sdelal-poisk-pelican/</id><summary type="html">&lt;div class="admonition warning"&gt;
&lt;p class="admonition-title"&gt;Идёт процесс&amp;nbsp;отладки!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;P.S3.&lt;/strong&gt; Поиск опять сломался: очень уж он нежный. Переделывал файлы и даже поиск локального сайта перестал искать. Пришлось всё начинать с &lt;strong&gt;Нуля&lt;/strong&gt;.   Закачал тему &lt;strong&gt;Elegant 1.3&lt;/strong&gt; (за ~~1913~~ 2013 год). И, настроив поиск, обновился до версии &lt;strong&gt;5.3&lt;/strong&gt;.&lt;br /&gt;
Локально работает очень хорошо. А на сервере …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="admonition warning"&gt;
&lt;p class="admonition-title"&gt;Идёт процесс&amp;nbsp;отладки!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;P.S3.&lt;/strong&gt; Поиск опять сломался: очень уж он нежный. Переделывал файлы и даже поиск локального сайта перестал искать. Пришлось всё начинать с &lt;strong&gt;Нуля&lt;/strong&gt;.   Закачал тему &lt;strong&gt;Elegant 1.3&lt;/strong&gt; (за ~~1913~~ 2013 год). И, настроив поиск, обновился до версии &lt;strong&gt;5.3&lt;/strong&gt;.&lt;br /&gt;
Локально работает очень хорошо. А на сервере опять &lt;em&gt;кочевряжется&lt;/em&gt;. Какой-то кэш мешает. Надо&amp;nbsp;разбираться&amp;#8230;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="admonition hint"&gt;
&lt;p class="admonition-title"&gt;Демо-поиск&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;P.S4.&lt;/strong&gt; Сделал демо-поиск на отдельной страничке (&lt;strong&gt;404&lt;/strong&gt;). Пока им можно пользоваться: &lt;a href="https://dvesti.github.io/Pelican/404"&gt;он работает&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="admonition important"&gt;
&lt;p class="admonition-title"&gt;Поиск&amp;nbsp;работает!&lt;/p&gt;
&lt;p&gt;Основной Поиск в верхнем меню &lt;strong&gt;работает штатно&lt;/strong&gt; (русский +&amp;nbsp;english)    &lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Наконец-то сделал поиск по сайту на русском языке. Сайт создан на &lt;em&gt;Pelican&lt;/em&gt;.&lt;br /&gt;
Если коротко, то взял Поиск с &lt;a href="https://github.com/Pelican-Elegant/elegant/releases/tag/V1.3"&gt;версии 1.3&lt;/a&gt;, потом добавил всё остальное. Возможно, придётся поменять некоторые скрипты в папке &lt;strong&gt;tipuesearch&lt;/strong&gt;&lt;br /&gt;
&lt;!--more--&gt;&lt;br /&gt;
Желающие разобраться могут посмотреть файлы &lt;a href="https://github.com/dvesti/Pelican"&gt;в репозитории&lt;/a&gt; (ветка &lt;em&gt;gh-pages&lt;/em&gt;)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span class="caps"&gt;P.S.&lt;/span&gt;&lt;/strong&gt; Впрочем, нет основных файлов в репозитории. Вот так и я по крупицам собирал в Интернете информацию.&lt;br /&gt;
Теперь сайт работоспособный &amp;#8212; подумаю об обратной связи: попробую сделать комментарии. Возможно, что и перееду на свой поддомен: как дело&amp;nbsp;пойдёт&amp;#8230;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;P.S2.&lt;/strong&gt; Необходимо вдогонку отметить, что и сам плагин &lt;code&gt;tipue_search&lt;/code&gt; должен быть старым, чтоб &lt;em&gt;генерил&lt;/em&gt; в формате &lt;em&gt;&lt;span class="caps"&gt;JSON&lt;/span&gt;&lt;/em&gt; &amp;lt;== &lt;strong&gt;это важно!&lt;/strong&gt;)&lt;/p&gt;
&lt;p&gt;Чтобы два раза не вставать, вот код файла &lt;code&gt;blog-plugins\pelican-plugins\tipue_search\tipue_search.py&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;Tipue Search&lt;/span&gt;
&lt;span class="sd"&gt;============&lt;/span&gt;
&lt;span class="sd"&gt;A Pelican plugin to serialize generated HTML to JSON&lt;/span&gt;
&lt;span class="sd"&gt;that can be used by jQuery plugin - Tipue Search.&lt;/span&gt;
&lt;span class="sd"&gt;Copyright (c) Talha Mansoor&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;unicode_literals&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os.path&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bs4&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;codecs&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;urlparse&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;urljoin&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;ImportError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;urllib.parse&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;urljoin&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pelican&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;signals&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Tipue_Search_JSON_Generator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;output_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;output_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;output_path&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;siteurl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;SITEURL&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tpages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;TEMPLATE_PAGES&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;output_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;output_path&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json_nodes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;


    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_json_node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;status&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;published&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;published&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;

        &lt;span class="n"&gt;soup_title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;amp;nbsp;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;html.parser&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;page_title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;soup_title&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;“&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;”&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;’&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;amp;#94;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;soup_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;html.parser&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;page_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;soup_text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;“&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;”&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;’&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;¶&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;amp;#94;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;page_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page_text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;category&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;None&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;None&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;page_category&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;page_category&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;category&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;

        &lt;span class="n"&gt;page_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;siteurl&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;

        &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;page_title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;&amp;#39;text&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;page_text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;&amp;#39;tags&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;page_category&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;&amp;#39;url&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;page_url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;&amp;#39;loc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;page_url&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;# changed from &amp;#39;url&amp;#39; following http://blog.siphos.be/2015/08/updates-on-my-pelican-adventure/ (an update to Pelican made it not work, because the update (e.g., in the theme folder, static/tipuesearch/tipuesearch.js is looking for the &amp;#39;loc&amp;#39; attribute.&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json_nodes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_tpage_node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;srclink&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

        &lt;span class="n"&gt;srcfile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;output_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tpages&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;srclink&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt; &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;soup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;srcfile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;html.parser&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;page_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_text&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="c1"&gt;# What happens if there is not a title.&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;page_title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;page_title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;

        &lt;span class="c1"&gt;# Should set default category?&lt;/span&gt;
        &lt;span class="n"&gt;page_category&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;

        &lt;span class="n"&gt;page_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;urljoin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;siteurl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tpages&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;srclink&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

        &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;page_title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;&amp;#39;text&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;page_text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;&amp;#39;tags&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;page_category&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;&amp;#39;url&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;page_url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;&amp;#39;loc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;page_url&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;# changed from &amp;#39;url&amp;#39; following http://blog.siphos.be/2015/08/updates-on-my-pelican-adventure/ (an update to Pelican made it not work, because the update (e.g., in the theme folder, static/tipuesearch/tipuesearch.js is looking for the &amp;#39;loc&amp;#39; attribute. - commit 2dcdca8c8d&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json_nodes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;generate_output&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;output_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;tipuesearch_content.json&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;pages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pages&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;articles&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;article&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;articles&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
            &lt;span class="n"&gt;pages&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;article&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;translations&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;srclink&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tpages&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_tpage_node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;srclink&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;pages&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_json_node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;root_node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pages&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json_nodes&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root_node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;separators&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;ensure_ascii&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_generators&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;generators&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Tipue_Search_JSON_Generator&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;register&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;signals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_generators&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;get_generators&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="Blog"></category><category term="hack"></category><category term="search"></category><category term="pelican"></category></entry><entry><title>Version 5.3.0</title><link href="https://dvesti.github.io/Pelican/2020/02/06/version-530/" rel="alternate"></link><published>2020-02-06T00:45:00+02:00</published><updated>2020-02-06T00:45:00+02:00</updated><author><name>Dmitriev</name></author><id>tag:dvesti.github.io,2020-02-06:/Pelican/2020/02/06/version-530/</id><content type="html">&lt;!-- yaspeller ignore:start --&gt;

&lt;h2 id="530-2020-02-05"&gt;&lt;a href="https://github.com/Pelican-Elegant/elegant/compare/V5.2.1...V5.3.0"&gt;5.3.0&lt;/a&gt; (2020-02-05)&lt;a class="headerlink" href="#530-2020-02-05" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="bug-fixes"&gt;Bug Fixes&lt;a class="headerlink" href="#bug-fixes" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;gallery:&lt;/strong&gt; change gallery grid to fit on smaller screens (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/d4c1c506d24c61e18089d303ea88bb69db077135"&gt;d4c1c50&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;gallery:&lt;/strong&gt; replace photoswipe-gallery with elegant-gallery (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/17a05daec5d3aa077b96175e97ae5feda6884d9e"&gt;17a05da&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="features"&gt;Features&lt;a class="headerlink" href="#features" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;comments:&lt;/strong&gt; add support for CommentBox (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/c56e61eb60a84d4d65ca2e55e068b6f0f3a87ee1"&gt;c56e61e&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- yaspeller ignore:end --&gt;</content><category term="Release Notes"></category><category term="change-log"></category><category term="project-management"></category></entry><entry><title>Комментарии — включить CommentBox</title><link href="https://dvesti.github.io/Pelican/2020/02/05/enable-commentbox-comments/" rel="alternate"></link><published>2020-02-05T22:35:00+02:00</published><updated>2020-02-05T22:35:00+02:00</updated><author><name>Talha Mansoor</name></author><id>tag:dvesti.github.io,2020-02-05:/Pelican/2020/02/05/enable-commentbox-comments/</id><summary type="html">&lt;p&gt;Elegant offers CommentBox comments out of the box with few unique&amp;nbsp;features&lt;/p&gt;</summary><content type="html">&lt;p&gt;You can use &lt;a href="https://commentbox.io/"&gt;CommentBox&lt;/a&gt; for comments. You have to set &lt;code&gt;COMMENTBOX_PROJECT&lt;/code&gt; to your CommentBox project &lt;span class="caps"&gt;ID&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;That&amp;#8217;s it. Elegant will take care of the&amp;nbsp;rest.&lt;/p&gt;
&lt;p&gt;You can see a working example of CommentBox comments in this&amp;nbsp;article.&lt;/p&gt;
&lt;h2 id="show-commentbox-comments-by-default"&gt;Show CommentBox comments by default&lt;a class="headerlink" href="#show-commentbox-comments-by-default" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Just set &lt;code&gt;COMMENTBOX_PROJECT&lt;/code&gt; variable.&lt;/p&gt;
&lt;h2 id="hide-commentbox-comments-by-default"&gt;Hide CommentBox comments by default&lt;a class="headerlink" href="#hide-commentbox-comments-by-default" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Unset &lt;code&gt;COMMENTBOX_PROJECT&lt;/code&gt; variable.&lt;/p&gt;
&lt;p&gt;This is the default&amp;nbsp;setting.&lt;/p&gt;
&lt;h2 id="hide-commentbox-comments-by-default-show-on-selected"&gt;Hide CommentBox comments by default. Show on Selected&lt;a class="headerlink" href="#hide-commentbox-comments-by-default-show-on-selected" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Set &lt;code&gt;COMMENTBOX_PROJECT&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Set &lt;code&gt;COMMENTBOX_FILTER&lt;/code&gt; to &lt;code&gt;True&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This will hide CommentBox form on all&amp;nbsp;pages.&lt;/p&gt;
&lt;p&gt;Now to show CommentBox form on selected posts, in article metadata&amp;nbsp;set&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;commentbox_filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;off&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="show-commentbox-comments-by-default-hide-on-selected"&gt;Show CommentBox comments by default. Hide on Selected&lt;a class="headerlink" href="#show-commentbox-comments-by-default-hide-on-selected" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Set &lt;code&gt;COMMENTBOX_PROJECT&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Remove &lt;code&gt;COMMENTBOX_FILTER&lt;/code&gt; or set it to &lt;code&gt;False&lt;/code&gt; which is its default&amp;nbsp;value&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This will hide CommentBox form on all&amp;nbsp;pages.&lt;/p&gt;
&lt;p&gt;Now to hide CommentBox form on selected posts, in article metadata&amp;nbsp;set&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;commentbox_filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;on&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="Connecting With Your Readers"></category><category term="interaction"></category></entry><entry><title>Version 5.2.1</title><link href="https://dvesti.github.io/Pelican/2020/02/05/version-521/" rel="alternate"></link><published>2020-02-05T02:14:00+02:00</published><updated>2020-02-05T02:14:00+02:00</updated><author><name>Dmitriev</name></author><id>tag:dvesti.github.io,2020-02-05:/Pelican/2020/02/05/version-521/</id><content type="html">&lt;!-- yaspeller ignore:start --&gt;

&lt;h2 id="521-2020-02-04"&gt;&lt;a href="https://github.com/Pelican-Elegant/elegant/compare/V5.2.0...V5.2.1"&gt;5.2.1&lt;/a&gt; (2020-02-04)&lt;a class="headerlink" href="#521-2020-02-04" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="bug-fixes"&gt;Bug Fixes&lt;a class="headerlink" href="#bug-fixes" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;blockquote:&lt;/strong&gt; regression introduced in last version (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/2aace21d633e11527a224c7201abad5fef811ce3"&gt;2aace21&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- yaspeller ignore:end --&gt;</content><category term="Release Notes"></category><category term="change-log"></category><category term="project-management"></category></entry><entry><title>Version 5.2.0</title><link href="https://dvesti.github.io/Pelican/2020/02/03/version-520/" rel="alternate"></link><published>2020-02-03T23:59:00+02:00</published><updated>2020-02-03T23:59:00+02:00</updated><author><name>Dmitriev</name></author><id>tag:dvesti.github.io,2020-02-03:/Pelican/2020/02/03/version-520/</id><summary type="html">&lt;!-- yaspeller ignore:start --&gt;

&lt;h2 id="520-2020-02-03"&gt;&lt;a href="https://github.com/Pelican-Elegant/elegant/compare/V5.1.0...V5.2.0"&gt;5.2.0&lt;/a&gt; (2020-02-03)&lt;a class="headerlink" href="#520-2020-02-03" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="bug-fixes"&gt;Bug Fixes&lt;a class="headerlink" href="#bug-fixes" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;regression introduced due to cache busting (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/b953a382d77e99884b82800d7392ceb8eae8d77d"&gt;b953a38&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;archives:&lt;/strong&gt; at smaller screen layout does not make the best use of available space (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/a289e9db411b6abeb79a6028a3b0778070f6f553"&gt;a289e9d&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;syntax:&lt;/strong&gt; code blocks with line numbers do not have the correct border radius (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/3a34a3e6b9741e44bc34d723627b0da162fdfa82"&gt;3a34a3e&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;syntax:&lt;/strong&gt; improve the font size and height of …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;!-- yaspeller ignore:start --&gt;

&lt;h2 id="520-2020-02-03"&gt;&lt;a href="https://github.com/Pelican-Elegant/elegant/compare/V5.1.0...V5.2.0"&gt;5.2.0&lt;/a&gt; (2020-02-03)&lt;a class="headerlink" href="#520-2020-02-03" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="bug-fixes"&gt;Bug Fixes&lt;a class="headerlink" href="#bug-fixes" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;regression introduced due to cache busting (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/b953a382d77e99884b82800d7392ceb8eae8d77d"&gt;b953a38&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;archives:&lt;/strong&gt; at smaller screen layout does not make the best use of available space (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/a289e9db411b6abeb79a6028a3b0778070f6f553"&gt;a289e9d&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;syntax:&lt;/strong&gt; code blocks with line numbers do not have the correct border radius (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/3a34a3e6b9741e44bc34d723627b0da162fdfa82"&gt;3a34a3e&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;syntax:&lt;/strong&gt; improve the font size and height of download button (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/07595b3dbd31feef16aee3e907d3c4fc34574e0d"&gt;07595b3&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;typography:&lt;/strong&gt; fix font size and style of &lt;span class="caps"&gt;TOC&lt;/span&gt; (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/2d597abd095de8ce8ac72d8ae77b4914d9daeeed"&gt;2d597ab&lt;/a&gt;), closes &lt;a href="https://github.com/Pelican-Elegant/elegant/issues/509"&gt;#509&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Categories and Tags pages do not have space below the header (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/d78f4e5add9ca7778967d4c5da02053187c3cbd4"&gt;d78f4e5&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;remove invalid &lt;span class="caps"&gt;CSS&lt;/span&gt; rule (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/368cb2cad4b00b40446e7ad1d5357228e48ec34c"&gt;368cb2c&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;use consistent color for border (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/c85b7b84d6ac64a73941ad73ba031fd2f4ddac0f"&gt;c85b7b8&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;use darker color for the site name (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/19f37caf937bd864aaf6b1532078936ad79edf1d"&gt;19f37ca&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;article:&lt;/strong&gt; use loclate_date attribute instead of hardcoding the date format (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/1da552c94775766657f4ee9a0c05e7bcd7f1adf9"&gt;1da552c&lt;/a&gt;), closes &lt;a href="https://github.com/Pelican-Elegant/elegant/issues/552"&gt;#552&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;bootstrap:&lt;/strong&gt; &lt;span class="caps"&gt;WIP&lt;/span&gt;. add Bootstrapv2.3.2 sources file to the project (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/43ee8eb2ad6ba22bac6660bdb514857dadf9bcab"&gt;43ee8eb&lt;/a&gt;), closes &lt;a href="https://github.com/Pelican-Elegant/elegant/issues/429"&gt;#429&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;seo:&lt;/strong&gt; regression introduced in &lt;span class="caps"&gt;PR&lt;/span&gt; &lt;a href="https://github.com/Pelican-Elegant/elegant/issues/556"&gt;#556&lt;/a&gt; (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/28bcb8592cf595761d96904b004df3f425259849"&gt;28bcb85&lt;/a&gt;), closes &lt;a href="https://github.com/Pelican-Elegant/elegant/issues/505"&gt;#505&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;typography:&lt;/strong&gt; about me and my projects heading is not on one line (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/6a7989cc17f46a4ee1075dfe66b03d858956e7c7"&gt;6a7989c&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;typography:&lt;/strong&gt; font size of superscript number in categories and tags page (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/d0a71622bfe23e86478b7727e590dbf8e3a7b87f"&gt;d0a7162&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;typography:&lt;/strong&gt; override Bootstrap base font (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/f6a83a6f31e24754e5001260336b89e9107e1053"&gt;f6a83a6&lt;/a&gt;), closes &lt;a href="https://github.com/Pelican-Elegant/elegant/issues/429"&gt;#429&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;typography:&lt;/strong&gt; top menu bar does not have correct height (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/d30ce82aa8ba366555cbeee55ffb08e70110df0a"&gt;d30ce82&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;typography:&lt;/strong&gt; use consistent font and color for project list (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/477a467bd4bf69a86d71bceb3ac2385b43c57a8c"&gt;477a467&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;typography:&lt;/strong&gt; use consistent font in the footer (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/eeb0e30be3664c86e7b37a151cf1992daa7fd46e"&gt;eeb0e30&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="features"&gt;Features&lt;a class="headerlink" href="#features" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;add support cache busting (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/cde0dc54c68412d8db43ea371e98e6d14e99b9d2"&gt;cde0dc5&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;categories:&lt;/strong&gt; change background color of uncollapsed Category (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/6cc11b8efe8a3c97ccfeddc244a5b84465fff1fb"&gt;6cc11b8&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;gallery:&lt;/strong&gt; add support for PhotoSwipe image gallery using raw &lt;span class="caps"&gt;HTML&lt;/span&gt; (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/ad1bcea67f5515c8c448e1c7009f3ba01965d574"&gt;ad1bcea&lt;/a&gt;), closes &lt;a href="https://github.com/Pelican-Elegant/elegant/issues/567"&gt;#567&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;js:&lt;/strong&gt; combine and minify all &lt;span class="caps"&gt;JS&lt;/span&gt; files into one to improve load speed (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/f5047d4cbce02a187f1b04f11f026817ed1757d9"&gt;f5047d4&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;search:&lt;/strong&gt; improve search results page look (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/73fa743723ebbf35b6cd0e0f51c9497634b1474c"&gt;73fa743&lt;/a&gt;), closes &lt;a href="https://github.com/Pelican-Elegant/elegant/issues/573"&gt;#573&lt;/a&gt; &lt;a href="https://github.com/Pelican-Elegant/elegant/issues/275"&gt;#275&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;search:&lt;/strong&gt; replace tipue_search with lunr.js (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/9d60af14c4065cee90289e48705714865dbbcb9e"&gt;9d60af1&lt;/a&gt;), closes &lt;a href="https://github.com/Pelican-Elegant/elegant/issues/275"&gt;#275&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;span class="caps"&gt;SEO&lt;/span&gt;:&lt;/strong&gt; Add header and documentation for Claiming Website on Yandex (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/2bb691d3bd02f9d586206814992306383640a84c"&gt;2bb691d&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;span class="caps"&gt;SEO&lt;/span&gt;:&lt;/strong&gt; add &lt;span class="caps"&gt;SEO&lt;/span&gt; and &lt;span class="caps"&gt;SMO&lt;/span&gt; meta keywords in site&amp;#8217;s home page (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/c5be0eb7f9e98c9938ae96ca8eb9c48c7482993e"&gt;c5be0eb&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;sharing:&lt;/strong&gt; Enable customizing the sharing links (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/f3e262f3dc6a2b1a4356014e524018603d899fb2"&gt;f3e262f&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;syntax:&lt;/strong&gt; add copy to clipboard button for every code snippet (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/6f733179b80d8225af71bc5945be1fddd98b40ae"&gt;6f73317&lt;/a&gt;), closes &lt;a href="https://github.com/Pelican-Elegant/elegant/issues/574"&gt;#574&lt;/a&gt; &lt;a href="https://github.com/Pelican-Elegant/elegant/issues/525"&gt;#525&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;syntax:&lt;/strong&gt; add support for highlighting lines in code snippets (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/ba2de8ccf971b1e77abe24960532f664e00ef9d9"&gt;ba2de8c&lt;/a&gt;), closes &lt;a href="https://github.com/Pelican-Elegant/elegant/issues/520"&gt;#520&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;syntax:&lt;/strong&gt; add support for liquid_tags.include_code plugin (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/0550a3ab2fa5526a6db7e233f755cdfa36f9db38"&gt;0550a3a&lt;/a&gt;), closes &lt;a href="https://github.com/Pelican-Elegant/elegant/issues/518"&gt;#518&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;syntax:&lt;/strong&gt; use Gruvbox syntax highlighting theme (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/0b50ab1565dd1fa700cea9e4c6cb963bd9591b9f"&gt;0b50ab1&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;typography:&lt;/strong&gt; use consistent fonts (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/8b7a8bd3c828baf1dd3434b75a5bd050a4279495"&gt;8b7a8bd&lt;/a&gt;), closes &lt;a href="https://github.com/Pelican-Elegant/elegant/issues/429"&gt;#429&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;typography:&lt;/strong&gt; use consistent style for timestamps in tags, categories and archives pages (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/a421dcdbc42d87bcff2bfdeb3f3f19e5e6e8c3c2"&gt;a421dcd&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;typography:&lt;/strong&gt; use dns-prefetch and preconnect to improve font load time (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/e4bd582858df6925bbc5c0dff59e62b1cd8c5390"&gt;e4bd582&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;typography:&lt;/strong&gt; use responsive fonts (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/39acdbf4503ee9cdd7163672cba28c24b47d6647"&gt;39acdbf&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- yaspeller ignore:end --&gt;</content><category term="Release Notes"></category><category term="change-log"></category><category term="project-management"></category></entry><entry><title>Копируем код в буфер обмена</title><link href="https://dvesti.github.io/Pelican/2020/02/03/code-snippets-copy-to-clipboard/" rel="alternate"></link><published>2020-02-03T19:17:00+02:00</published><updated>2020-02-03T19:17:00+02:00</updated><author><name>Talha Mansoor</name></author><id>tag:dvesti.github.io,2020-02-03:/Pelican/2020/02/03/code-snippets-copy-to-clipboard/</id><content type="html">&lt;p&gt;Elegant is the only Pelican theme that comes with a &amp;#8220;Copy To Clipboard&amp;#8221; button
on every code&amp;nbsp;snippet.&lt;/p&gt;
&lt;p&gt;Try it&amp;nbsp;out&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello Clipboard&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We use excellent JavaScript library, &lt;a href="https://clipboardjs.com/"&gt;clipboard.js&lt;/a&gt; for this feature. Your readers do not need Flash for this&amp;nbsp;feature.&lt;/p&gt;</content><category term="Components"></category><category term="code-snippets"></category><category term="gist"></category><category term="unique"></category></entry><entry><title>Подсветка кода</title><link href="https://dvesti.github.io/Pelican/2020/02/02/code-snippets-highlight-lines/" rel="alternate"></link><published>2020-02-02T20:12:00+02:00</published><updated>2020-02-02T20:12:00+02:00</updated><author><name>Talha Mansoor</name></author><id>tag:dvesti.github.io,2020-02-02:/Pelican/2020/02/02/code-snippets-highlight-lines/</id><summary type="html">&lt;p&gt;&lt;a href="https://github.com/Python-Markdown/markdown/"&gt;Python-Markdown&lt;/a&gt; uses
&lt;a href="https://python-markdown.github.io/extensions/code_hilite/"&gt;CodeHilite&lt;/a&gt; &lt;!-- yaspeller ignore --&gt;
extension for syntax&amp;nbsp;highlighting.&lt;/p&gt;
&lt;p&gt;This extension lets you highlight specific lines in your code snippets. You can read the instructions &lt;a href="https://python-markdown.github.io/extensions/code_hilite/#colons"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Elegant supports this&amp;nbsp;feature.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="hll"&gt;&lt;span class="c1"&gt;# This line is emphasized&lt;/span&gt;
&lt;/span&gt;&lt;span class="c1"&gt;# This line isn&amp;#39;t&lt;/span&gt;
&lt;span class="hll"&gt;&lt;span class="c1"&gt;# This line is emphasized&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Another&amp;nbsp;example,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;
&lt;span class="hll"&gt;  &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;elegant-gallery&amp;quot;&lt;/span&gt;
&lt;/span&gt;  &lt;span class="na"&gt;itemscope&lt;/span&gt;
  &lt;span class="na"&gt;itemtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://schema.org …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://github.com/Python-Markdown/markdown/"&gt;Python-Markdown&lt;/a&gt; uses
&lt;a href="https://python-markdown.github.io/extensions/code_hilite/"&gt;CodeHilite&lt;/a&gt; &lt;!-- yaspeller ignore --&gt;
extension for syntax&amp;nbsp;highlighting.&lt;/p&gt;
&lt;p&gt;This extension lets you highlight specific lines in your code snippets. You can read the instructions &lt;a href="https://python-markdown.github.io/extensions/code_hilite/#colons"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Elegant supports this&amp;nbsp;feature.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="hll"&gt;&lt;span class="c1"&gt;# This line is emphasized&lt;/span&gt;
&lt;/span&gt;&lt;span class="c1"&gt;# This line isn&amp;#39;t&lt;/span&gt;
&lt;span class="hll"&gt;&lt;span class="c1"&gt;# This line is emphasized&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Another&amp;nbsp;example,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;
&lt;span class="hll"&gt;  &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;elegant-gallery&amp;quot;&lt;/span&gt;
&lt;/span&gt;  &lt;span class="na"&gt;itemscope&lt;/span&gt;
  &lt;span class="na"&gt;itemtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://schema.org/ImageGallery&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Another&amp;nbsp;example,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Code goes here ..&lt;/span&gt;
&lt;span class="hll"&gt;&lt;span class="c1"&gt;# This line is emphasized&lt;/span&gt;
&lt;/span&gt;&lt;span class="c1"&gt;# This line isn&amp;#39;t&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;</content><category term="Components"></category><category term="markdown"></category><category term="code-snippets"></category><category term="gist"></category></entry><entry><title>Фотогалерея — используем PhotoSwipe</title><link href="https://dvesti.github.io/Pelican/2020/02/02/photoswipe-gallery-using-raw-html/" rel="alternate"></link><published>2020-02-02T00:00:00+02:00</published><updated>2020-02-02T00:00:00+02:00</updated><author><name>Talha Mansoor</name></author><id>tag:dvesti.github.io,2020-02-02:/Pelican/2020/02/02/photoswipe-gallery-using-raw-html/</id><summary type="html">&lt;p&gt;Elegant integrates with &lt;a href="https://photoswipe.com/"&gt;PhotoSwipe&lt;/a&gt; to create gallery of images. Here is an&amp;nbsp;example.&lt;/p&gt;
&lt;div class="elegant-gallery" itemscope itemtype="http://schema.org/ImageGallery"&gt;
    &lt;figure itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject"&gt;
        &lt;a href="https://i.picsum.photos/id/1019/5472/3648.jpg" itemprop="contentUrl" data-size="5472x3648"&gt;
            &lt;img src="https://i.picsum.photos/id/1019/200/200.jpg" itemprop="thumbnail" alt="Image description" /&gt;
        &lt;/a&gt;
        &lt;figcaption itemprop="caption description"&gt;Placeholder image from Unsplash&lt;/figcaption&gt;
    &lt;/figure&gt;

    &lt;figure itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject"&gt;
        &lt;a href="https://i.picsum.photos/id/101/2621/1747.jpg" itemprop="contentUrl" data-size="2621x1747"&gt;
            &lt;img src="https://i.picsum.photos/id/101/200/200.jpg" itemprop="thumbnail" alt="Image description" /&gt;
        &lt;/a&gt;
        &lt;figcaption itemprop="caption description"&gt;You can write anything in the caption&lt;/figcaption&gt;
    &lt;/figure&gt;

    &lt;figure itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject"&gt;
        &lt;a href="https://i.picsum.photos/id/1015/6000/4000.jpg" itemprop="contentUrl" data-size="6000x4000"&gt;
            &lt;img src="https://i.picsum.photos/id/1015/200/200.jpg" itemprop="thumbnail" alt="Image description" /&gt;
        &lt;/a&gt;
        &lt;figcaption itemprop="caption description"&gt;You can use &lt;i&gt;&lt;span class="caps"&gt;HTML&lt;/span&gt;&lt;/i&gt; &lt;a href="https://picsum.photos/" target="_blank" rel="nofollow noopener noreferrer" &gt;Unsplash&lt;/a&gt;&lt;/figcaption&gt;
    &lt;/figure&gt;

    &lt;figure itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject"&gt;
        &lt;a href="https://i.picsum.photos/id/127/4032/2272.jpg" itemprop="contentUrl" data-size="4032x2272"&gt;
            &lt;img src="https://i.picsum.photos/id/127/200/200.jpg" itemprop="thumbnail" alt="Image description" /&gt;
        &lt;/a&gt;
        &lt;figcaption itemprop="caption description"&gt;Another sample image&lt;/figcaption&gt;
    &lt;/figure&gt;
    &lt;figure itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject"&gt;
        &lt;a href="https://i.picsum.photos/id/103/2592/1936.jpg" itemprop="contentUrl" data-size="2592x1936"&gt;
            &lt;img src="https://i.picsum.photos/id/103/200/200.jpg" itemprop="thumbnail" alt="Image description" /&gt;
        &lt;/a&gt;
        &lt;figcaption itemprop="caption description"&gt;Last sample image&lt;/figcaption&gt;
    &lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;To use it, you will have to add raw &lt;span class="caps"&gt;HTML&lt;/span&gt; in your markdown&amp;nbsp;file.&lt;/p&gt;
&lt;p&gt;Here …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Elegant integrates with &lt;a href="https://photoswipe.com/"&gt;PhotoSwipe&lt;/a&gt; to create gallery of images. Here is an&amp;nbsp;example.&lt;/p&gt;
&lt;div class="elegant-gallery" itemscope itemtype="http://schema.org/ImageGallery"&gt;
    &lt;figure itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject"&gt;
        &lt;a href="https://i.picsum.photos/id/1019/5472/3648.jpg" itemprop="contentUrl" data-size="5472x3648"&gt;
            &lt;img src="https://i.picsum.photos/id/1019/200/200.jpg" itemprop="thumbnail" alt="Image description" /&gt;
        &lt;/a&gt;
        &lt;figcaption itemprop="caption description"&gt;Placeholder image from Unsplash&lt;/figcaption&gt;
    &lt;/figure&gt;

    &lt;figure itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject"&gt;
        &lt;a href="https://i.picsum.photos/id/101/2621/1747.jpg" itemprop="contentUrl" data-size="2621x1747"&gt;
            &lt;img src="https://i.picsum.photos/id/101/200/200.jpg" itemprop="thumbnail" alt="Image description" /&gt;
        &lt;/a&gt;
        &lt;figcaption itemprop="caption description"&gt;You can write anything in the caption&lt;/figcaption&gt;
    &lt;/figure&gt;

    &lt;figure itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject"&gt;
        &lt;a href="https://i.picsum.photos/id/1015/6000/4000.jpg" itemprop="contentUrl" data-size="6000x4000"&gt;
            &lt;img src="https://i.picsum.photos/id/1015/200/200.jpg" itemprop="thumbnail" alt="Image description" /&gt;
        &lt;/a&gt;
        &lt;figcaption itemprop="caption description"&gt;You can use &lt;i&gt;&lt;span class="caps"&gt;HTML&lt;/span&gt;&lt;/i&gt; &lt;a href="https://picsum.photos/" target="_blank" rel="nofollow noopener noreferrer" &gt;Unsplash&lt;/a&gt;&lt;/figcaption&gt;
    &lt;/figure&gt;

    &lt;figure itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject"&gt;
        &lt;a href="https://i.picsum.photos/id/127/4032/2272.jpg" itemprop="contentUrl" data-size="4032x2272"&gt;
            &lt;img src="https://i.picsum.photos/id/127/200/200.jpg" itemprop="thumbnail" alt="Image description" /&gt;
        &lt;/a&gt;
        &lt;figcaption itemprop="caption description"&gt;Another sample image&lt;/figcaption&gt;
    &lt;/figure&gt;
    &lt;figure itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject"&gt;
        &lt;a href="https://i.picsum.photos/id/103/2592/1936.jpg" itemprop="contentUrl" data-size="2592x1936"&gt;
            &lt;img src="https://i.picsum.photos/id/103/200/200.jpg" itemprop="thumbnail" alt="Image description" /&gt;
        &lt;/a&gt;
        &lt;figcaption itemprop="caption description"&gt;Last sample image&lt;/figcaption&gt;
    &lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;To use it, you will have to add raw &lt;span class="caps"&gt;HTML&lt;/span&gt; in your markdown&amp;nbsp;file.&lt;/p&gt;
&lt;p&gt;Here is the require &lt;span class="caps"&gt;HTML&lt;/span&gt; with two images in&amp;nbsp;it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;
  &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;elegant-gallery&amp;quot;&lt;/span&gt;
  &lt;span class="na"&gt;itemscope&lt;/span&gt;
  &lt;span class="na"&gt;itemtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://schema.org/ImageGallery&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;figure&lt;/span&gt;
    &lt;span class="na"&gt;itemprop&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;associatedMedia&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;itemscope&lt;/span&gt;
    &lt;span class="na"&gt;itemtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://schema.org/ImageObject&amp;quot;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;
      &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://i.picsum.photos/id/1019/5472/3648.jpg&amp;quot;&lt;/span&gt;
      &lt;span class="na"&gt;itemprop&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;contentUrl&amp;quot;&lt;/span&gt;
      &lt;span class="na"&gt;data-size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;5472x3648&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt;
        &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://i.picsum.photos/id/1019/100/100.jpg&amp;quot;&lt;/span&gt;
        &lt;span class="na"&gt;itemprop&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;thumbnail&amp;quot;&lt;/span&gt;
        &lt;span class="na"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Image description&amp;quot;&lt;/span&gt;
      &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;figcaption&lt;/span&gt; &lt;span class="na"&gt;itemprop&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;caption description&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      Placeholder image from Unsplash
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;figcaption&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;figure&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;figure&lt;/span&gt;
    &lt;span class="na"&gt;itemprop&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;associatedMedia&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;itemscope&lt;/span&gt;
    &lt;span class="na"&gt;itemtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://schema.org/ImageObject&amp;quot;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;
      &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://i.picsum.photos/id/101/2621/1747.jpg&amp;quot;&lt;/span&gt;
      &lt;span class="na"&gt;itemprop&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;contentUrl&amp;quot;&lt;/span&gt;
      &lt;span class="na"&gt;data-size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;2621x1747&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt;
        &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://i.picsum.photos/id/101/100/100.jpg&amp;quot;&lt;/span&gt;
        &lt;span class="na"&gt;itemprop&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;thumbnail&amp;quot;&lt;/span&gt;
        &lt;span class="na"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Image description&amp;quot;&lt;/span&gt;
      &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;figcaption&lt;/span&gt; &lt;span class="na"&gt;itemprop&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;caption description&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      You can write anything in the caption
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;figcaption&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;figure&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="elegant-gallery" itemscope itemtype="http://schema.org/ImageGallery"&gt;
 &lt;figure itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject"&gt;
  &lt;a href="https://i.picsum.photos/id/1019/5472/3648.jpg" itemprop="contentUrl" data-size="5472x3648"&gt;
   &lt;img src="https://i.picsum.photos/id/1019/100/100.jpg" itemprop="thumbnail" alt="Image description" /&gt;
  &lt;/a&gt;
  &lt;figcaption itemprop="caption description"&gt;Placeholder image from Unsplash&lt;/figcaption&gt;
 &lt;/figure&gt;

 &lt;figure itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject"&gt;
  &lt;a href="https://i.picsum.photos/id/101/2621/1747.jpg" itemprop="contentUrl" data-size="2621x1747"&gt;
   &lt;img src="https://i.picsum.photos/id/101/100/100.jpg" itemprop="thumbnail" alt="Image description" /&gt;
  &lt;/a&gt;
  &lt;figcaption itemprop="caption description"&gt;You can write anything in the caption&lt;/figcaption&gt;
 &lt;/figure&gt;
&lt;/div&gt;

&lt;h2 id="define-a-div"&gt;Define a &lt;code&gt;div&lt;/code&gt;&lt;a class="headerlink" href="#define-a-div" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;
  &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;elegant-gallery&amp;quot;&lt;/span&gt;
  &lt;span class="na"&gt;itemscope&lt;/span&gt;
  &lt;span class="na"&gt;itemtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://schema.org/ImageGallery&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Notice the class, &lt;code&gt;elegant-gallery&lt;/code&gt;. You should not change&amp;nbsp;it.&lt;/p&gt;
&lt;h2 id="define-figure"&gt;Define &lt;code&gt;figure&lt;/code&gt;&lt;a class="headerlink" href="#define-figure" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Place it inside the &lt;code&gt;div&lt;/code&gt; defined&amp;nbsp;above.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;figure&lt;/span&gt;
  &lt;span class="na"&gt;itemprop&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;associatedMedia&amp;quot;&lt;/span&gt;
  &lt;span class="na"&gt;itemscope&lt;/span&gt;
  &lt;span class="na"&gt;itemtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://schema.org/ImageObject&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;figure&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="link-to-your-image"&gt;Link to your image&lt;a class="headerlink" href="#link-to-your-image" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Place it inside the &lt;code&gt;figure&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;
  &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://i.picsum.photos/id/1019/5472/3648.jpg&amp;quot;&lt;/span&gt;
  &lt;span class="na"&gt;itemprop&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;contentUrl&amp;quot;&lt;/span&gt;
  &lt;span class="na"&gt;data-size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;5472x3648&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;data-size&lt;/code&gt; is important. It should have the correct width and height of the&amp;nbsp;image.&lt;/p&gt;
&lt;h2 id="add-the-thumbnail"&gt;Add the thumbnail&lt;a class="headerlink" href="#add-the-thumbnail" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Create a thumbnail of your image and then place link to it inside the &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; you create&amp;nbsp;above.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt;
  &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://i.picsum.photos/id/1019/100/100.jpg&amp;quot;&lt;/span&gt;
  &lt;span class="na"&gt;itemprop&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;thumbnail&amp;quot;&lt;/span&gt;
  &lt;span class="na"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Image description&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is it. Your gallery should start&amp;nbsp;working.&lt;/p&gt;
&lt;h2 id="define-caption"&gt;Define caption&lt;a class="headerlink" href="#define-caption" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You can also define the caption of your image using &lt;code&gt;figcaption&lt;/code&gt;. You must place it inside the &lt;code&gt;figure&lt;/code&gt; tag.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;figcaption&lt;/span&gt;
  &lt;span class="na"&gt;itemprop=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;caption description&amp;quot;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  You can write anything in the caption
&lt;span class="nt"&gt;&amp;lt;/figcaption&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can use &lt;span class="caps"&gt;HTML&lt;/span&gt; inside the &lt;code&gt;figcaption&lt;/code&gt;.&lt;/p&gt;
&lt;div class="admonition attention"&gt;
&lt;p class="admonition-title"&gt;Developer&amp;nbsp;Required&lt;/p&gt;
&lt;p&gt;Ideally, a Pelican plugin should generate this raw &lt;span class="caps"&gt;HTML&lt;/span&gt;, but at the time of writing, such a plugin does not&amp;nbsp;exist.&lt;/p&gt;
&lt;p&gt;If you create such a plugin, then &lt;a href="https://github.com/Pelican-Elegant/elegant/issues"&gt;let us know&lt;/a&gt;. It will be a big help to thousands of Pelican&amp;nbsp;users.&lt;/p&gt;
&lt;p&gt;The plugin, should create a thumbnail of the image, read size of the image, and then generate the required raw &lt;span class="caps"&gt;HTML&lt;/span&gt;, which then gets inserted into
&lt;code&gt;article.content&lt;/code&gt; or &lt;code&gt;page.content&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The user should be able to insert more than one galleries in the article, at any place. (Currently, the &lt;a href="https://github.com/getpelican/pelican-plugins/tree/master/photos"&gt;Photos plugin&lt;/a&gt; forces themes to append gallery in the bottom of the&amp;nbsp;article.)&lt;/p&gt;
&lt;p&gt;Finally, let the user define gallery images and their captions inside an article in a friendly and easy way. Like, as &lt;span class="caps"&gt;YAML&lt;/span&gt; or &lt;span class="caps"&gt;JSON&lt;/span&gt; inside the&amp;nbsp;markdown.&lt;/p&gt;
&lt;/div&gt;</content><category term="Components"></category><category term="nuances"></category><category term="images"></category><category term="gallery"></category></entry><entry><title>Много-страничная статья — Часть 2</title><link href="https://dvesti.github.io/Pelican/2019/12/08/how-to-use-series-plugin-2/" rel="alternate"></link><published>2019-12-08T00:00:00+02:00</published><updated>2019-12-08T00:00:00+02:00</updated><author><name>Jack De Winter</name></author><id>tag:dvesti.github.io,2019-12-08:/Pelican/2019/12/08/how-to-use-series-plugin-2/</id><summary type="html">&lt;p&gt;Elegant can be configured to provide a series section on the right sidebar. Only visible in articles that are labelled as part of a series, this indicator allows navigation between the articles in the&amp;nbsp;series.&lt;/p&gt;</summary><content type="html">&lt;h2 id="and-now-back-to-your-regular-programming"&gt;And Now Back to Your Regular Programming&lt;a class="headerlink" href="#and-now-back-to-your-regular-programming" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To show how this feature works, with a concrete example, this article was purposefully
split into two parts. The first part of this article can be accessed by looking under
the section labelled &lt;code&gt;Article Series&lt;/code&gt; on the right toolbar. This &lt;code&gt;Part 1&lt;/code&gt; article is
displayed using normal text, while the following &lt;code&gt;Part 2&lt;/code&gt; article is shown in an
italicized text. Click on the &lt;code&gt;Part 1&lt;/code&gt; article text on the right toolbar to go to the
previous&amp;nbsp;article.&lt;/p&gt;
&lt;h2 id="article-metadata"&gt;Article Metadata&lt;a class="headerlink" href="#article-metadata" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Once the configuration for Series is enabled in the configuration file, using this feature for
a given set of articles requires that the article contains the &lt;code&gt;series&lt;/code&gt;
&lt;a href="https://dvesti.github.io/Pelican/2019/07/03/metadata/"&gt;metadata&lt;/a&gt; field&amp;nbsp;value.&lt;/p&gt;
&lt;p&gt;The text assigned to the &lt;code&gt;series&lt;/code&gt; metadata field is the title of the series. When the page is
created, Pelican provides Elegant with a list of all pages that have the same value for the
&lt;code&gt;series&lt;/code&gt; metadata field. By default, Elegant sorts that list according to the publish date for
each article. The titles for those pages is then displayed in sorted order, with the current
page presented in &lt;em&gt;italics&lt;/em&gt; and the other pages presented as a link to those&amp;nbsp;pages.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;series: Maximizing Elegant
series_index: 2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If there is a reason to override the ordering of the articles, the &lt;code&gt;series_index&lt;/code&gt; metadata
field is required. It is recommended that you use the part number you want displayed for the
article as the value to assign to the&amp;nbsp;field.&lt;/p&gt;</content><category term="Supported Plugins"></category><category term="pelican-plugin"></category><category term="navigation"></category><category term="web-design"></category></entry><entry><title>Много-страничная статья — Часть 1</title><link href="https://dvesti.github.io/Pelican/2019/12/07/how-to-use-series-plugin/" rel="alternate"></link><published>2019-12-07T00:00:00+02:00</published><updated>2019-12-07T00:00:00+02:00</updated><author><name>Jack De Winter</name></author><id>tag:dvesti.github.io,2019-12-07:/Pelican/2019/12/07/how-to-use-series-plugin/</id><summary type="html">&lt;p&gt;Elegant can be configured to provide a series section on the right sidebar. Only visible in articles that are labelled as part of a series, this indicator allows navigation between the articles in the&amp;nbsp;series.&lt;/p&gt;</summary><content type="html">&lt;p&gt;When writing articles about certain topics, it is advantageous to split a single article into
multiple articles. Without splitting the article up, the author would be forced to cram all
of the content into a denser and much longer article, reducing its effectiveness and
readability in the process. Splitting the article allows the author to focus on a specific
concept of the larger article, thereby increasing the overall appearance and&amp;nbsp;readability.&lt;/p&gt;
&lt;p&gt;Elegant provides the ability to present a view of the articles in the series in the middle of
the right sidebar. This section starts with the name of the series, followed by one bullet
point for each of the articles in the series. The text for the article is prefaced with
&amp;#8220;Part N: &amp;#8221; (where N is the index of the article) and then the title for the article. To make
navigation easier, the current article is presented in italics, with the other articles being
presented as links to their respective&amp;nbsp;articles.&lt;/p&gt;
&lt;p&gt;Here is an example of what the Series section may look&amp;nbsp;like:&lt;/p&gt;
&lt;p&gt;&lt;img alt="series example in the sidebar" src="https://dvesti.github.io/Pelican/images/elegant-theme_multi-part-sidebar.png" /&gt;&lt;/p&gt;
&lt;h2 id="configuration"&gt;Configuration&lt;a class="headerlink" href="#configuration" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To enable the reading time for your articles, you need to add &lt;code&gt;series&lt;/code&gt; to the &lt;code&gt;PLUGINS&lt;/code&gt;
configuration variable in your Pelican&amp;nbsp;configuration.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;PLUGINS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;series&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In addition, the &lt;code&gt;SERIES_TITLE&lt;/code&gt; configuration variable can be set to specify the title used for
the Series section, regardless of the&amp;nbsp;series.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;SERIES_TITLE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;More In This Series&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="to-be-continued"&gt;To Be Continued&lt;a class="headerlink" href="#to-be-continued" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To show how this feature works, with a concrete example, this article was purposefully
split into two parts. The second part of this article can be accessed by looking under
the section labelled &lt;code&gt;Article Series&lt;/code&gt; on the right toolbar. This &lt;code&gt;Part 1&lt;/code&gt; article is
displayed using italicized text, while the following &lt;code&gt;Part 2&lt;/code&gt; article is shown using
normal text. Click on the &lt;code&gt;Part 2&lt;/code&gt; article on the right toolbar to go to the next&amp;nbsp;article.&lt;/p&gt;</content><category term="Supported Plugins"></category><category term="pelican-plugin"></category><category term="navigation"></category><category term="web-design"></category></entry><entry><title>Обновляем тему Elegant</title><link href="https://dvesti.github.io/Pelican/2019/12/06/updating-elegant-to-the-latest-release/" rel="alternate"></link><published>2019-12-06T00:00:00+02:00</published><updated>2019-12-06T00:00:00+02:00</updated><author><name>Jack De Winter</name></author><id>tag:dvesti.github.io,2019-12-06:/Pelican/2019/12/06/updating-elegant-to-the-latest-release/</id><summary type="html">&lt;p&gt;Once you have determined that you want to update to the latest release of Elegant, the
process is usually quite simple. There are wo main ways to get the Elegant theme: as
a standalone repository and as part of the Pelican-Themes&amp;nbsp;repository.&lt;/p&gt;
&lt;h2 id="via-the-pelican-themes-repository"&gt;Via the Pelican-Themes Repository&lt;a class="headerlink" href="#via-the-pelican-themes-repository" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you installed the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Once you have determined that you want to update to the latest release of Elegant, the
process is usually quite simple. There are wo main ways to get the Elegant theme: as
a standalone repository and as part of the Pelican-Themes&amp;nbsp;repository.&lt;/p&gt;
&lt;h2 id="via-the-pelican-themes-repository"&gt;Via the Pelican-Themes Repository&lt;a class="headerlink" href="#via-the-pelican-themes-repository" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you installed the Elegant theme as part of the Pelican-Themes repository, all of
the themes available in that project will be located at a level one down from the
directory where you installed the repository into. For example, if you installed
the repository with the following&amp;nbsp;command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone --recursive https://github.com/getpelican/pelican-themes ../blog-themes
&lt;span class="nb"&gt;cd&lt;/span&gt; ../blog-themes
git submodule update --init elegant
git submodule update --remote elegant
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;it installed every theme known to the project in the current directory where the command
was executed from. Along with (at last count) 125 other themes, the Elegant theme is
located under the &lt;code&gt;elegant&lt;/code&gt; directory.&lt;/p&gt;
&lt;h2 id="replacing-with-the-pelican-themes-repository"&gt;Replacing With the Pelican-Themes Repository&lt;a class="headerlink" href="#replacing-with-the-pelican-themes-repository" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The Elegant theme is included into the Pelican-Themes project by using a git concept
called sub-modules. Because of the ways that sub-modules work, if you want to update
one sub-module in a project, it is almost always desired to remove the sub-module that
you want to update and clone it in again. This is accomplished with the following&amp;nbsp;script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rm -rf ../blog-themes/elegant
git clone --jobs &lt;span class="m"&gt;8&lt;/span&gt; --recurse-submodules --depth &lt;span class="m"&gt;1&lt;/span&gt; --shallow-submodules https://github.com/Pelican-Elegant/elegant.git ../blog-themes/elegant
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Assuming the &lt;code&gt;blog-themes&lt;/code&gt; directory is at the same level as your Pelican directory, the
script removes the Elegant directory under the &lt;code&gt;blog-themes&lt;/code&gt; directory, only to recreate
it using the &lt;code&gt;git clone&lt;/code&gt; command on the next&amp;nbsp;line.&lt;/p&gt;
&lt;p&gt;Note that this also has the benefit of updating your Elegant theme to the latest theme
based on Elegant&amp;#8217;s repository, instead of relying on the Pelican-Themes repository.
There is often a lag between when a release is made in Elegant&amp;#8217;s repository and when
it is available &amp;#8220;automatically&amp;#8221; through the Pelican-Themes repository. By using this
method of updating the repository, you keep the directory structure of the Pelican-Themes
repository while making sure you have the latest release of&amp;nbsp;Elegant.&lt;/p&gt;
&lt;h2 id="via-a-standalone-repository"&gt;Via a Standalone Repository&lt;a class="headerlink" href="#via-a-standalone-repository" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you installed the Elegant theme as a standalone repository, you most likely followed
directions like the following to clone the Elegant&amp;nbsp;repository:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir ../blog-theme/Elegant
git clone https://github.com/Pelican-Elegant/elegant ../blog-theme/Elegant
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For this example, the assumption is that the Pelican directory where your website is
stored is at the same level as the &lt;code&gt;blog-theme&lt;/code&gt; directory. As such, the &lt;code&gt;../blog-theme&lt;/code&gt;
part of the path gets us to the theme part of the directory tree. It is possible to just
leave the path at that, but it is recommended to add the &lt;code&gt;/Elegant&lt;/code&gt; at the end as a
reminder of the repository&amp;nbsp;name.&lt;/p&gt;
&lt;p&gt;If the Elegant theme was installed in this manner, you can either update your local
repository or recreate your repository as noted in the following two&amp;nbsp;sections.&lt;/p&gt;
&lt;h3 id="updating-a-standalone-theme"&gt;Updating a Standalone Theme&lt;a class="headerlink" href="#updating-a-standalone-theme" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;master&lt;/code&gt; branch of Elegant&amp;#8217;s Git repository always contains the latest release. To
update to that release, go into the Elegant theme directory (&lt;code&gt;../blog-theme/Elegant&lt;/code&gt;
from the example above), and enter the following&amp;nbsp;command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git pull origin master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that this is the most effective way of updating your standalone repository if you
have not made any changes to the the theme. If you have made some changes, you may be
required to merge the changes in your local repository with any changes in the release
version you pulled down with this&amp;nbsp;command.&lt;/p&gt;
&lt;h3 id="recreate-a-standalone-theme"&gt;Recreate a Standalone Theme&lt;a class="headerlink" href="#recreate-a-standalone-theme" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If you are lucky, you will not reach a time where you believe, even a tiny bit, that you
have messed up the contents of your theme repository. If you have made any changes to the
base Elegant theme, it is inevitable that at some point you will need to reset the
repository to a known good state. Assuming that the repository is in the directory
&lt;code&gt;../blog-theme/Elegant&lt;/code&gt;, per the example above, executing the following&amp;nbsp;command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rmdir -rf ../blog-theme/Elegant
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;will remove the entire theme from your local system. Once this is done, you can follow
the clone directions in the example at the top of this section on standalone
repositories to restore the Elegant theme directory to the same state as Elegant&amp;#8217;s
master branch on&amp;nbsp;GitHub.&lt;/p&gt;
&lt;h3 id="using-the-tasks-framework"&gt;Using The Tasks Framework&lt;a class="headerlink" href="#using-the-tasks-framework" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;div class="admonition warning"&gt;
&lt;p class="admonition-title"&gt;Windows&amp;nbsp;Users&lt;/p&gt;
&lt;p&gt;The tasks framework is set up with commands for a Linux system. If you intend to use the tasks framework on your Windows system, a number of changes will be required.  If you feel like helping us out with this, we will gladly accept a &lt;span class="caps"&gt;PR&lt;/span&gt; to address&amp;nbsp;this!&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;If you are using the Python &lt;code&gt;invoke&lt;/code&gt; framework, then this work is already done for you by
using the &lt;code&gt;theme_sync&lt;/code&gt; task in &lt;code&gt;documentation/tasks.py&lt;/code&gt; file. The &lt;code&gt;invoke&lt;/code&gt; package can
be installed in the usual&amp;nbsp;manner:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install invoke
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once installed, typing &lt;code&gt;invoke theme_sync&lt;/code&gt; will execute that task as defined in the
file &lt;code&gt;tasks.py&lt;/code&gt; as&amp;nbsp;follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@task&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;theme_sync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Make a fresh shallow copy of pelican-elegant theme&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;rm -rf themes&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;git clone --jobs 8 --recurse-submodules --depth 1 --shallow-submodules https://github.com/Pelican-Elegant/elegant.git themes/elegant&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that this script makes a couple of assumptions about where you are invoking the
task from and where you have your themes stored. If you are okay with that, give it a&amp;nbsp;try!&lt;/p&gt;</content><category term="101 — Quick Start"></category><category term="pelican-theme"></category><category term="new-releases"></category></entry><entry><title>Getting Notified About New Releases</title><link href="https://dvesti.github.io/Pelican/2019/12/05/getting-notified-about-new-releases/" rel="alternate"></link><published>2019-12-05T12:00:00+02:00</published><updated>2019-12-05T12:00:00+02:00</updated><author><name>Jack De Winter</name></author><id>tag:dvesti.github.io,2019-12-05:/Pelican/2019/12/05/getting-notified-about-new-releases/</id><summary type="html">&lt;p&gt;Unlike a number of themes that exist for Pelican, the Elegant theme is currently under
active development. The immediate benefit of this for you is that Elegant supports
recent technologies/services such as &lt;a href="https://utteranc.es/"&gt;Utterances&lt;/a&gt; for comments and
the &lt;a href="https://applause-button.com/"&gt;Applause button&lt;/a&gt; for quick and simple user feedback.
The other main benefits …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Unlike a number of themes that exist for Pelican, the Elegant theme is currently under
active development. The immediate benefit of this for you is that Elegant supports
recent technologies/services such as &lt;a href="https://utteranc.es/"&gt;Utterances&lt;/a&gt; for comments and
the &lt;a href="https://applause-button.com/"&gt;Applause button&lt;/a&gt; for quick and simple user feedback.
The other main benefits are that any requests, be they bug reports or feature requests,
are logged in the project&amp;#8217;s Issues&amp;nbsp;database.&lt;/p&gt;
&lt;p&gt;These issues are actively going through triage, being worked on by the Elegant community,
and being addressed in ongoing releases of Elegant. In addition,
&lt;a href="https://github.com/Pelican-Elegant/elegant/milestones"&gt;the roadmap&lt;/a&gt; let&amp;#8217;s you see what
the Elegant team is working on, allowing you to decide if you want to contribute and
help bring some feature of the theme to&amp;nbsp;life!&lt;/p&gt;
&lt;p&gt;To give you the control to decide whether to update your website and benefit from the
latest version of Elegant, we offer two automated ways to find out about new&amp;nbsp;releases.&lt;/p&gt;
&lt;h2 id="subscribe-to-the-email-newsletter"&gt;Subscribe to the email Newsletter&lt;a class="headerlink" href="#subscribe-to-the-email-newsletter" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Each of the article pages on this Elegant documentation website contain a section at
the bottom of the right sidebar titled &lt;code&gt;Get New Release Alert&lt;/code&gt;. By entering your email
address in the box below and clicking on the &lt;code&gt;Notify Me&lt;/code&gt; button, you are signing up for
our newsletter. This simple newsletter uses Elegant&amp;#8217;s support for
&lt;a href="https://mailchimp.com/"&gt;MailChimp&lt;/a&gt;, &lt;!-- yaspeller ignore --&gt;
and is only used to notify people when there are new version of Elegant&amp;nbsp;available.&lt;/p&gt;
&lt;h2 id="subscribe-to-the-rss-feed-for-the-documentation-site"&gt;Subscribe to the &lt;span class="caps"&gt;RSS&lt;/span&gt; feed for the Documentation Site&lt;a class="headerlink" href="#subscribe-to-the-rss-feed-for-the-documentation-site" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you have any reservations about actively subscribing to a newsletter through a
mailing list, you can passively subscribe to receive updates notices for Elegant by
subscribing to the &lt;span class="caps"&gt;RSS&lt;/span&gt; feed for this website using your browser. By selecting the &lt;span class="caps"&gt;RSS&lt;/span&gt;
Feed icon under &lt;code&gt;Stay In Touch&lt;/code&gt;, your browser will handle the information according to
any plugins present in your browser. Once this link is visible, simply copy it into
your favorite &lt;span class="caps"&gt;RSS&lt;/span&gt; reader and you will be notified by that &lt;span class="caps"&gt;RSS&lt;/span&gt; reader when there is a
new&amp;nbsp;release.&lt;/p&gt;</content><category term="101 — Quick Start"></category><category term="pelican-theme"></category><category term="new-releases"></category></entry><entry><title>Version 5.1.0</title><link href="https://dvesti.github.io/Pelican/2019/12/05/version-510/" rel="alternate"></link><published>2019-12-05T09:17:00+02:00</published><updated>2019-12-05T09:17:00+02:00</updated><author><name>Dmitriev</name></author><id>tag:dvesti.github.io,2019-12-05:/Pelican/2019/12/05/version-510/</id><content type="html">&lt;!-- yaspeller ignore:start --&gt;

&lt;h2 id="510-2019-12-05"&gt;&lt;a href="https://github.com/Pelican-Elegant/elegant/compare/V5.0.1...V5.1.0"&gt;5.1.0&lt;/a&gt; (2019-12-05)&lt;a class="headerlink" href="#510-2019-12-05" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="bug-fixes"&gt;Bug Fixes&lt;a class="headerlink" href="#bug-fixes" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;applause:&lt;/strong&gt; applause_button tag does not auto close (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/d37e691e0592bded8dd42531ceacfa61147ad078"&gt;d37e691&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;typography:&lt;/strong&gt; make headings align to the left instead of justify (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/101285e0884ea365e9e3272e6f914fe373fa27fb"&gt;101285e&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="features"&gt;Features&lt;a class="headerlink" href="#features" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;applause:&lt;/strong&gt; add option to set applause_button_id (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/8eda9a4cc7c588ff09a520e9f7fa183d1fb11031"&gt;8eda9a4&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;applause:&lt;/strong&gt; add support for applause button (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/e4872fd558964c3007c516fc616314c88de49eef"&gt;e4872fd&lt;/a&gt;), closes &lt;a href="https://github.com/Pelican-Elegant/elegant/issues/532"&gt;#532&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;applause:&lt;/strong&gt; simplify filter option (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/9f8b60fc3cbc08e7e21cef08f7e44658131677dd"&gt;9f8b60f&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- yaspeller ignore:end --&gt;</content><category term="Release Notes"></category><category term="change-log"></category><category term="project-management"></category></entry><entry><title>Applause Button</title><link href="https://dvesti.github.io/Pelican/2019/12/05/applause-button/" rel="alternate"></link><published>2019-12-05T08:36:00+02:00</published><updated>2019-12-05T08:36:00+02:00</updated><author><name>Talha Mansoor</name></author><id>tag:dvesti.github.io,2019-12-05:/Pelican/2019/12/05/applause-button/</id><summary type="html"></summary><content type="html">&lt;p&gt;Elegant supports &lt;a class="ampl" href="https://applause-button.com/"&gt;Applause Button&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="how-to-enable-applause-button"&gt;How To Enable Applause Button&lt;a class="headerlink" href="#how-to-enable-applause-button" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You can enable and disable the button site wide or on specific&amp;nbsp;articles.&lt;/p&gt;
&lt;h3 id="show-applause-button-in-all-articles"&gt;Show Applause Button in all articles&lt;a class="headerlink" href="#show-applause-button-in-all-articles" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Set &lt;code&gt;APPLAUSE_BUTTON&lt;/code&gt; variable to &lt;code&gt;True&lt;/code&gt; in your Pelican&amp;nbsp;configuration.&lt;/p&gt;
&lt;h3 id="hide-applause-button-in-all-articles"&gt;Hide Applause Button in all articles&lt;a class="headerlink" href="#hide-applause-button-in-all-articles" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Set &lt;code&gt;APPLAUSE_BUTTON&lt;/code&gt; variable to &lt;code&gt;False&lt;/code&gt; in your Pelican configuration. This is the&amp;nbsp;default.&lt;/p&gt;
&lt;h3 id="show-applause-button-in-all-articles-hide-on-selected"&gt;Show Applause Button in all articles. Hide on selected&lt;a class="headerlink" href="#show-applause-button-in-all-articles-hide-on-selected" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Set &lt;code&gt;APPLAUSE_BUTTON&lt;/code&gt; variable to &lt;code&gt;True&lt;/code&gt; in your Pelican configuration. And on specific articles&amp;nbsp;set&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;applause_button&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;off&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="hide-applause-button-in-all-articles-show-on-selected"&gt;Hide Applause Button in all articles. Show on selected&lt;a class="headerlink" href="#hide-applause-button-in-all-articles-show-on-selected" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Set &lt;code&gt;APPLAUSE_BUTTON&lt;/code&gt; variable to &lt;code&gt;False&lt;/code&gt; in your Pelican configuration. And on specific articles&amp;nbsp;set&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;applause_button&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;on&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="extra-configuration"&gt;Extra Configuration&lt;a class="headerlink" href="#extra-configuration" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;By default Elegant passes the article &lt;span class="caps"&gt;URL&lt;/span&gt; as identifier to the Applause Button server. But you can also set &lt;code&gt;applause_button_id&lt;/code&gt; in your article metadata which is given preference over the article &lt;span class="caps"&gt;URL&lt;/span&gt;.&lt;/p&gt;</content><category term="Connecting With Your Readers"></category><category term="interaction"></category><category term="kudos"></category><category term="reaction"></category></entry><entry><title>Version 5.0.1</title><link href="https://dvesti.github.io/Pelican/2019/12/04/version-501/" rel="alternate"></link><published>2019-12-04T08:37:00+02:00</published><updated>2019-12-04T08:37:00+02:00</updated><author><name>Dmitriev</name></author><id>tag:dvesti.github.io,2019-12-04:/Pelican/2019/12/04/version-501/</id><content type="html">&lt;!-- yaspeller ignore:start --&gt;

&lt;h2 id="501-2019-12-04"&gt;&lt;a href="https://github.com/Pelican-Elegant/elegant/compare/V5.0.0...V5.0.1"&gt;5.0.1&lt;/a&gt; (2019-12-04)&lt;a class="headerlink" href="#501-2019-12-04" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="bug-fixes"&gt;Bug Fixes&lt;a class="headerlink" href="#bug-fixes" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;blockquote:&lt;/strong&gt; close quote is not aligned properly (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/80a85c714a16cd01c53831347ac1f18b397dda1a"&gt;80a85c7&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;typography:&lt;/strong&gt; remove unit from line height (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/10286a13fade3248cc752a3ac5416257920d07bf"&gt;10286a1&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- yaspeller ignore:end --&gt;</content><category term="Release Notes"></category><category term="change-log"></category><category term="project-management"></category></entry><entry><title>Version 5.0.0</title><link href="https://dvesti.github.io/Pelican/2019/12/02/version-500/" rel="alternate"></link><published>2019-12-02T18:47:00+02:00</published><updated>2019-12-02T18:47:00+02:00</updated><author><name>Dmitriev</name></author><id>tag:dvesti.github.io,2019-12-02:/Pelican/2019/12/02/version-500/</id><summary type="html">&lt;!-- yaspeller ignore:start --&gt;

&lt;h2 id="500-2019-12-02"&gt;&lt;a href="https://github.com/Pelican-Elegant/elegant/compare/V4.0.0...V5.0.0"&gt;5.0.0&lt;/a&gt; (2019-12-02)&lt;a class="headerlink" href="#500-2019-12-02" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="bug-fixes"&gt;Bug Fixes&lt;a class="headerlink" href="#bug-fixes" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;css:&lt;/strong&gt; linter warning (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/a5f5c8170a61683edf5737918b7fe3cae1b67c00"&gt;a5f5c81&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;page:&lt;/strong&gt; social profiles appear in the sidebar (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/c17077cbd24811bb91e48610ac13d76328e5398d"&gt;c17077c&lt;/a&gt;), closes &lt;a href="https://github.com/Pelican-Elegant/elegant/issues/534"&gt;#534&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;social:&lt;/strong&gt; reduce icon size in the sidebar (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/4e0dc415c114bb07304605c9b1c153e372f1fa4b"&gt;4e0dc41&lt;/a&gt;), closes &lt;a href="https://github.com/Pelican-Elegant/elegant/issues/490"&gt;#490&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;typography:&lt;/strong&gt; adjust heading sizes and set small font-style to italic (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/d3bbf04eabcd89bdb2f039b11fac7a6150729e90"&gt;d3bbf04&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;typography:&lt;/strong&gt; remove border from headings in archive page (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/817bea8d091e99b6d6e5fc3dcc63ba6f627c5b66"&gt;817bea8 …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;!-- yaspeller ignore:start --&gt;

&lt;h2 id="500-2019-12-02"&gt;&lt;a href="https://github.com/Pelican-Elegant/elegant/compare/V4.0.0...V5.0.0"&gt;5.0.0&lt;/a&gt; (2019-12-02)&lt;a class="headerlink" href="#500-2019-12-02" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="bug-fixes"&gt;Bug Fixes&lt;a class="headerlink" href="#bug-fixes" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;css:&lt;/strong&gt; linter warning (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/a5f5c8170a61683edf5737918b7fe3cae1b67c00"&gt;a5f5c81&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;page:&lt;/strong&gt; social profiles appear in the sidebar (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/c17077cbd24811bb91e48610ac13d76328e5398d"&gt;c17077c&lt;/a&gt;), closes &lt;a href="https://github.com/Pelican-Elegant/elegant/issues/534"&gt;#534&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;social:&lt;/strong&gt; reduce icon size in the sidebar (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/4e0dc415c114bb07304605c9b1c153e372f1fa4b"&gt;4e0dc41&lt;/a&gt;), closes &lt;a href="https://github.com/Pelican-Elegant/elegant/issues/490"&gt;#490&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;typography:&lt;/strong&gt; adjust heading sizes and set small font-style to italic (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/d3bbf04eabcd89bdb2f039b11fac7a6150729e90"&gt;d3bbf04&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;typography:&lt;/strong&gt; remove border from headings in archive page (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/817bea8d091e99b6d6e5fc3dcc63ba6f627c5b66"&gt;817bea8&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="features"&gt;Features&lt;a class="headerlink" href="#features" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;blockquote:&lt;/strong&gt; improve blockquote look (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/068d50a455d57e4706525908b174bbc4606c6fb6"&gt;068d50a&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;border:&lt;/strong&gt; change border radius of tags and code blocks to match rest of the theme (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/5d0285f156a5da734b438868674c632b897625ef"&gt;5d0285f&lt;/a&gt;), closes &lt;a href="https://github.com/Pelican-Elegant/elegant/issues/521"&gt;#521&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;border:&lt;/strong&gt; have consistent border radius (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/7307467579d4ab1931987e48b83224eb666e9e5e"&gt;7307467&lt;/a&gt;), closes &lt;a href="https://github.com/Pelican-Elegant/elegant/issues/521"&gt;#521&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;code-block:&lt;/strong&gt; minor refine code-block style (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/2ba22321b35961ebc18dbb2c25f1db535fad64ed"&gt;2ba2232&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;css:&lt;/strong&gt; use PostCSS for processing &lt;span class="caps"&gt;CSS&lt;/span&gt; files (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/2b88865a36780257ac42173b949b5d7b4df516e9"&gt;2b88865&lt;/a&gt;), closes &lt;a href="https://github.com/Pelican-Elegant/elegant/issues/354"&gt;#354&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;links:&lt;/strong&gt; add new style and improve existing style for hyperlinks (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/87fd3d3f88cebac83ca04460ef41e7356df0ccd2"&gt;87fd3d3&lt;/a&gt;), closes &lt;a href="https://github.com/Pelican-Elegant/elegant/issues/533"&gt;#533&lt;/a&gt; &lt;a href="https://github.com/Pelican-Elegant/elegant/issues/519"&gt;#519&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;permalink:&lt;/strong&gt; improve permalink look (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/8059ca84b77ab82bffd1ed80f010235f9ca57ed6"&gt;8059ca8&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;security:&lt;/strong&gt; use rel=&amp;#8221;noopener noreferrer&amp;#8221; with all target=&amp;#8221;_blank&amp;#8221; (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/4c843e9a0c66bb2656ef5df4411d4c891c493a11"&gt;4c843e9&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;typography:&lt;/strong&gt; code inside heading is consistently 80% of the size (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/7180b49ebb659d00a82f10769269e6236057e42c"&gt;7180b49&lt;/a&gt;), closes &lt;a href="https://github.com/Pelican-Elegant/elegant/issues/508"&gt;#508&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;typography:&lt;/strong&gt; headings sizes and other properties are consistent (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/afa99ab89baf715a68627552152b7163ea0534b9"&gt;afa99ab&lt;/a&gt;), closes &lt;a href="https://github.com/Pelican-Elegant/elegant/issues/508"&gt;#508&lt;/a&gt; &lt;a href="https://github.com/Pelican-Elegant/elegant/issues/521"&gt;#521&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;typography:&lt;/strong&gt; use darker color for article heading and increase border size (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/19220758aabf431ae3566b950436fe04a3ee21a8"&gt;1922075&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="breaking-changes"&gt;&lt;span class="caps"&gt;BREAKING&lt;/span&gt; &lt;span class="caps"&gt;CHANGES&lt;/span&gt;&lt;a class="headerlink" href="#breaking-changes" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;links:&lt;/strong&gt; Style of muted links have been changed slightly. It is
  still muted but has modern animation.
  &lt;!-- yaspeller ignore:end --&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Release Notes"></category><category term="change-log"></category><category term="project-management"></category></entry><entry><title>Hyperlinks Styles</title><link href="https://dvesti.github.io/Pelican/2019/12/02/hyperlinks-styles/" rel="alternate"></link><published>2019-12-02T15:09:00+02:00</published><updated>2019-12-02T15:09:00+02:00</updated><author><name>Talha Mansoor</name></author><id>tag:dvesti.github.io,2019-12-02:/Pelican/2019/12/02/hyperlinks-styles/</id><summary type="html"></summary><content type="html">&lt;p&gt;Elegant has three styles for hyperlinks that you can&amp;nbsp;use.&lt;/p&gt;
&lt;h2 id="muted-style"&gt;Muted Style&lt;a class="headerlink" href="#muted-style" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is the default style of&amp;nbsp;link.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.mozilla.org/en-US/firefox/new/"&gt;Example Link - Use Firefox Browser&lt;/a&gt; to support open web&amp;nbsp;standards.&lt;/p&gt;
&lt;p&gt;This style is very suitable for long-form articles. To read the rationale behind this choice, read our help article &lt;a href="https://dvesti.github.io/Pelican/2019/07/03/look-and-feel/"&gt;Why Does Elegant Look The Way It Does?&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="amplified-style"&gt;Amplified Style&lt;a class="headerlink" href="#amplified-style" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We understand not all links should be muted. Some links require&amp;nbsp;attention.&lt;/p&gt;
&lt;p&gt;&lt;a class="ampl" href="https://www.mozilla.org/en-US/firefox/new/"&gt;Example Link - Use Firefox Browser&lt;/a&gt; to support open web standards. &lt;!-- yaspeller ignore --&gt;&lt;/p&gt;
&lt;p&gt;To use this style, you need to enable &lt;a class="ampl" href="https://python-markdown.github.io/extensions/attr_list/"&gt;Markdown attribute list extension&lt;/a&gt;. &lt;!-- yaspeller ignore --&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# Plugins and extensions
MARKDOWN = {
    &amp;quot;extension_configs&amp;quot;: {
        &amp;quot;markdown.extensions.extra&amp;quot;: {},
        &amp;quot;markdown.extensions.meta&amp;quot;: {},
    }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then use this style using &lt;code&gt;ampl&lt;/code&gt; class.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[Example Link](https://www.mozilla.org/){: class=&amp;quot;ampl&amp;quot;} blah blah
&lt;/pre&gt;&lt;/div&gt;</content><category term="Components"></category><category term="style"></category></entry><entry><title>Elegant Is Safe</title><link href="https://dvesti.github.io/Pelican/2019/12/02/elegant-is-safe/" rel="alternate"></link><published>2019-12-02T11:45:00+02:00</published><updated>2019-12-02T11:45:00+02:00</updated><author><name>Talha Mansoor</name></author><id>tag:dvesti.github.io,2019-12-02:/Pelican/2019/12/02/elegant-is-safe/</id><summary type="html"></summary><content type="html">&lt;p&gt;Static sites are usually safer than server side rendered sites. There can be some edge cases though even for a static&amp;nbsp;site.&lt;/p&gt;
&lt;p&gt;We came to know about a potential security issue that involves, &lt;code&gt;target="_blank"&lt;/code&gt;. We have updated our code to follow the recommended&amp;nbsp;fix.&lt;/p&gt;
&lt;p&gt;You can read more about the issue and its fix at these&amp;nbsp;links,&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://mathiasbynens.github.io/rel-noopener/"&gt;About rel=noopener&lt;/a&gt; &lt;!-- yaspeller ignore --&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-no-target-blank.md"&gt;react/jsx-no-target-blank&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><category term="101 — Quick Start"></category><category term="security"></category></entry><entry><title>Permalinks To Headings</title><link href="https://dvesti.github.io/Pelican/2019/12/02/permalinks-to-headings/" rel="alternate"></link><published>2019-12-02T11:05:00+02:00</published><updated>2019-12-02T11:05:00+02:00</updated><author><name>Dmitriev</name></author><id>tag:dvesti.github.io,2019-12-02:/Pelican/2019/12/02/permalinks-to-headings/</id><summary type="html"></summary><content type="html">&lt;p&gt;First, you need to enable the &lt;code&gt;toc&lt;/code&gt; extension for Markdown in your Pelican&amp;nbsp;configuration.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;MARKDOWN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;extension_configs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;markdown.extensions.toc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then enable &lt;code&gt;permalink&lt;/code&gt; option available for the &lt;code&gt;toc&lt;/code&gt; extension.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;MARKDOWN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;extension_configs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;markdown.extensions.toc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="s1"&gt;&amp;#39;permalink&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;true&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Enabling the &lt;code&gt;permalink&lt;/code&gt; option will provide direct links to each&amp;nbsp;heading.&lt;/p&gt;
&lt;p&gt;Hover over following example heading to see the&amp;nbsp;permalink.&lt;/p&gt;
&lt;h2 id="example-heading"&gt;Example Heading&lt;a class="headerlink" href="#example-heading" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You would get&amp;nbsp;this,&lt;/p&gt;
&lt;p&gt;&lt;img alt="Permalinks example using Markdown" src="https://dvesti.github.io/Pelican/images/elegant-theme-toc-permalinks.png" /&gt;&lt;/p&gt;
&lt;div class="admonition tip recommendation"&gt;
&lt;p class="admonition-title"&gt;Tip&lt;/p&gt;
&lt;p&gt;When set to True the paragraph symbol &lt;code&gt;¶&lt;/code&gt; or &lt;code&gt;&amp;amp;para;&lt;/code&gt; is used by Python markdown.
This becomes part of the &lt;span class="caps"&gt;RSS&lt;/span&gt;&amp;nbsp;feed.&lt;/p&gt;
&lt;p&gt;We recommend setting permalink option to a&amp;nbsp;space.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;MARKDOWN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;extension_configs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;markdown.extensions.toc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="s1"&gt;&amp;#39;permalink&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="Components"></category><category term="navigation"></category></entry><entry><title>Use PostCSS To Compile CSS Style Sheets</title><link href="https://dvesti.github.io/Pelican/2019/12/01/use-postcss-to-compile-css-style-sheets/" rel="alternate"></link><published>2019-12-01T23:13:00+02:00</published><updated>2019-12-01T23:13:00+02:00</updated><author><name>Talha Mansoor</name></author><id>tag:dvesti.github.io,2019-12-01:/Pelican/2019/12/01/use-postcss-to-compile-css-style-sheets/</id><summary type="html"></summary><content type="html">&lt;p&gt;Elegant uses &lt;a href="https://gulpjs.com/"&gt;GulpJS&lt;/a&gt; and &lt;a href="https://postcss.org/"&gt;PostCSS&lt;/a&gt; to do pre and post processing, like &lt;a href="https://github.com/postcss/autoprefixer"&gt;adding vendor prefixes&lt;/a&gt; or &lt;a href="https://cssnano.co/"&gt;compressing the &lt;span class="caps"&gt;CSS&lt;/span&gt; file&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="why-not-use-pelican-assets-plugin"&gt;Why not use Pelican assets plugin?&lt;a class="headerlink" href="#why-not-use-pelican-assets-plugin" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/getpelican/pelican-plugins/tree/master/assets"&gt;Pelican&amp;#8217;s assets plugin&lt;/a&gt; uses &lt;a href="https://github.com/miracle2k/webassets"&gt;Python&amp;#8217;s webassets package&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Unfortunately, webassets have not had a release &lt;a href="https://github.com/miracle2k/webassets/releases"&gt;since early 2017&lt;/a&gt;. Requests to revive the project have &lt;a href="https://github.com/miracle2k/webassets/issues/505"&gt;gone unheeded&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I tired to install webassets from the Git repository to use its PostCSS filter but it didn&amp;#8217;t work. Instead of wasting time in wrestling the code of an unmaintained project, I decided to use PostCSS which is modern and actively&amp;nbsp;maintained.&lt;/p&gt;
&lt;h2 id="how-to-use-postcss"&gt;How to use PostCSS&lt;a class="headerlink" href="#how-to-use-postcss" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is closely related to &lt;a href="https://dvesti.github.io/Pelican/2019/07/19/live-reload-elegant-documentation-using-gulpjs/"&gt;LiveReload Elegant Documentation Using&amp;nbsp;Gulp.js&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="prerequisites"&gt;Prerequisites&lt;a class="headerlink" href="#prerequisites" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You need to run following steps only once, to setup the LiveReload using&amp;nbsp;gulp.&lt;/p&gt;
&lt;h4 id="step-1-install-nodejs-and-yarn"&gt;Step 1: Install NodeJS and Yarn &lt;!-- yaspeller ignore --&gt;&lt;a class="headerlink" href="#step-1-install-nodejs-and-yarn" title="Permanent link"&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Install &lt;a href="https://nodejs.org/en/download/"&gt;Node.js&lt;/a&gt; and &lt;a href="https://yarnpkg.com/en/docs/install"&gt;Yarn&lt;/a&gt; on your&amp;nbsp;system.&lt;/p&gt;
&lt;p&gt;If you are on Windows then try installing them with &lt;a href="https://scoop.sh/"&gt;scoop.sh&lt;/a&gt;. It saves time and makes update&amp;nbsp;easier.&lt;/p&gt;
&lt;h4 id="step-2-install-gulp"&gt;Step 2: Install gulp&lt;a class="headerlink" href="#step-2-install-gulp" title="Permanent link"&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Run this command from your command line&amp;nbsp;terminal.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yarn global add gulp-cli
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id="step-3-install-dependencies"&gt;Step 3: Install Dependencies&lt;a class="headerlink" href="#step-3-install-dependencies" title="Permanent link"&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;In the root of the Elegant repository,&amp;nbsp;run&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yarn install
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;yarn&lt;/code&gt; will create &lt;code&gt;node_modules&lt;/code&gt; folder in the&amp;nbsp;root.&lt;/p&gt;
&lt;h4 id="step-4-run-gulp"&gt;Step 4: Run &lt;code&gt;gulp&lt;/code&gt;&lt;a class="headerlink" href="#step-4-run-gulp" title="Permanent link"&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;In the root of the Elegant repository,&amp;nbsp;run&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gulp css
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It will compile the &lt;span class="caps"&gt;CSS&lt;/span&gt; present in &lt;a href="https://github.com/Pelican-Elegant/elegant/tree/master/static/css"&gt;&lt;code&gt;static/css&lt;/code&gt;&lt;/a&gt; folder into &lt;code&gt;static/css/elegant.prod.css&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To live preview your changes,&amp;nbsp;use&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gulp
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="how-does-it-work"&gt;How does it work?&lt;a class="headerlink" href="#how-does-it-work" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Gulp and PostCSS, takes all the &lt;span class="caps"&gt;CSS&lt;/span&gt; files present inside &lt;code&gt;static/css&lt;/code&gt; folder. It applies PostCSS plugins on it like &lt;span class="caps"&gt;CSS&lt;/span&gt;&amp;nbsp;compression.&lt;/p&gt;
&lt;p&gt;It then writes the generated version in &lt;code&gt;static/css/elegant.prod.css&lt;/code&gt; file. This is the file a Pelican blog uses when it uses Elegant&amp;nbsp;theme.&lt;/p&gt;
&lt;p&gt;If user has enabled &lt;a href="https://dvesti.github.io/Pelican/2014/03/24/avoid-unnecessary-http-requests/"&gt;&lt;code&gt;assets&lt;/code&gt; plugin&lt;/a&gt;, then this file is again made to go through webassets cssmin filter. Although this step is redundant because &lt;code&gt;elegant.prod.css&lt;/code&gt; is already compressed. But it is necessary in case user has decided &lt;a href="https://dvesti.github.io/Pelican/2019/07/03/customize-style/"&gt;to customize the theme using &lt;code&gt;custom.css&lt;/code&gt;&lt;/a&gt;. In which, assets cssmin filter will combine &lt;code&gt;elegant.prod.css&lt;/code&gt; and &lt;code&gt;custom.css&lt;/code&gt; into one file &lt;code&gt;style.min.css&lt;/code&gt;.&lt;/p&gt;</content><category term="Contributing"></category><category term="postcss"></category><category term="gulp"></category></entry><entry><title>Blockquote Style</title><link href="https://dvesti.github.io/Pelican/2019/12/01/blockquote-style/" rel="alternate"></link><published>2019-12-01T18:41:00+02:00</published><updated>2019-12-01T18:41:00+02:00</updated><author><name>Talha Mansoor</name></author><id>tag:dvesti.github.io,2019-12-01:/Pelican/2019/12/01/blockquote-style/</id><summary type="html"></summary><content type="html">&lt;!-- yaspeller ignore:start --&gt;

&lt;p&gt;A blockquote with a single&amp;nbsp;paragraph.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Pellentesque eu tincidunt tortor aliquam nulla&amp;nbsp;facilisi.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A blockquotes with multiple&amp;nbsp;paragraph.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Pellentesque eu tincidunt tortor aliquam nulla facilisi. Nibh tortor id aliquet lectus proin nibh nisl condimentum&amp;nbsp;id.&lt;/p&gt;
&lt;p&gt;Lobortis feugiat vivamus at augue. Sed augue lacus viverra vitae congue eu consequat. Elit pellentesque habitant morbi tristique senectus et. Netus et malesuada fames ac turpis&amp;nbsp;egestas.&lt;/p&gt;
&lt;p&gt;Porttitor rhoncus dolor purus non enim praesent elementum facilisis. Augue eget arcu dictum varius duis at&amp;nbsp;consectetur.&lt;/p&gt;
&lt;p&gt;Pharetra pharetra massa massa ultricies mi quis. Vulputate enim nulla aliquet porttitor lacus luctus accumsan. Pulvinar neque laoreet suspendisse&amp;nbsp;interdum.&lt;/p&gt;
&lt;p&gt;Ultrices eros in cursus turpis massa tincidunt dui ut ornare. Sem et tortor consequat id porta nibh venenatis. Nulla facilisi morbi tempus iaculis urna id volutpat&amp;nbsp;lacus.&lt;/p&gt;
&lt;p&gt;Arcu ac tortor dignissim convallis aenean. Mauris pharetra et ultrices neque ornare. Scelerisque fermentum dui faucibus in ornare. Nibh tellus molestie nunc non&amp;nbsp;blandit.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!-- yaspeller ignore:end --&gt;</content><category term="Components"></category><category term="style"></category><category term="typography"></category></entry><entry><title>Headings Style</title><link href="https://dvesti.github.io/Pelican/2019/12/01/headings-style/" rel="alternate"></link><published>2019-12-01T10:38:00+02:00</published><updated>2019-12-01T10:38:00+02:00</updated><author><name>Talha Mansoor</name></author><id>tag:dvesti.github.io,2019-12-01:/Pelican/2019/12/01/headings-style/</id><summary type="html"></summary><content type="html">&lt;p&gt;Following are the examples of headings as they appear inside an&amp;nbsp;article.&lt;/p&gt;
&lt;!-- yaspeller ignore:start --&gt;

&lt;h1 id="heading-1-code-small"&gt;Heading 1 &lt;code&gt;code&lt;/code&gt; &lt;small&gt;small&lt;/small&gt;&lt;a class="headerlink" href="#heading-1-code-small" title="Permanent link"&gt; &lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Pellentesque eu tincidunt tortor aliquam nulla facilisi. Nibh tortor id aliquet lectus proin nibh nisl condimentum id. Lobortis feugiat vivamus at augue. Sed augue lacus viverra vitae congue eu&amp;nbsp;consequat.&lt;/p&gt;
&lt;h2 id="heading-2-code-small"&gt;Heading 2 &lt;code&gt;code&lt;/code&gt; &lt;small&gt;small&lt;/small&gt;&lt;a class="headerlink" href="#heading-2-code-small" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Pellentesque eu tincidunt tortor aliquam nulla facilisi. Nibh tortor id aliquet lectus proin nibh nisl condimentum id. Lobortis feugiat vivamus at augue. Sed augue lacus viverra vitae congue eu&amp;nbsp;consequat.&lt;/p&gt;
&lt;h3 id="heading-3-code-small"&gt;Heading 3 &lt;code&gt;code&lt;/code&gt; &lt;small&gt;small&lt;/small&gt;&lt;a class="headerlink" href="#heading-3-code-small" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Pellentesque eu tincidunt tortor aliquam nulla facilisi. Nibh tortor id aliquet lectus proin nibh nisl condimentum id. Lobortis feugiat vivamus at augue. Sed augue lacus viverra vitae congue eu&amp;nbsp;consequat.&lt;/p&gt;
&lt;h4 id="heading-4-code-small"&gt;Heading 4 &lt;code&gt;code&lt;/code&gt; &lt;small&gt;small&lt;/small&gt;&lt;a class="headerlink" href="#heading-4-code-small" title="Permanent link"&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Pellentesque eu tincidunt tortor aliquam nulla facilisi. Nibh tortor id aliquet lectus proin nibh nisl condimentum id. Lobortis feugiat vivamus at augue. Sed augue lacus viverra vitae congue eu&amp;nbsp;consequat.&lt;/p&gt;
&lt;h5 id="heading-5-code-small"&gt;Heading 5 &lt;code&gt;code&lt;/code&gt; &lt;small&gt;small&lt;/small&gt;&lt;a class="headerlink" href="#heading-5-code-small" title="Permanent link"&gt; &lt;/a&gt;&lt;/h5&gt;
&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Pellentesque eu tincidunt tortor aliquam nulla facilisi. Nibh tortor id aliquet lectus proin nibh nisl condimentum id. Lobortis feugiat vivamus at augue. Sed augue lacus viverra vitae congue eu&amp;nbsp;consequat.&lt;/p&gt;
&lt;h6 id="heading-6-code-small"&gt;Heading 6 &lt;code&gt;code&lt;/code&gt; &lt;small&gt;small&lt;/small&gt;&lt;a class="headerlink" href="#heading-6-code-small" title="Permanent link"&gt; &lt;/a&gt;&lt;/h6&gt;
&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Pellentesque eu tincidunt tortor aliquam nulla facilisi. Nibh tortor id aliquet lectus proin nibh nisl condimentum id. Lobortis feugiat vivamus at augue. Sed augue lacus viverra vitae congue eu&amp;nbsp;consequat.&lt;/p&gt;
&lt;!-- yaspeller ignore:end --&gt;</content><category term="Components"></category><category term="style"></category><category term="typography"></category></entry><entry><title>Version 4.0.0</title><link href="https://dvesti.github.io/Pelican/2019/08/23/version-4-0-0-release-notes/" rel="alternate"></link><published>2019-08-23T00:39:00+03:00</published><updated>2019-08-23T00:39:00+03:00</updated><author><name>Dmitriev</name></author><id>tag:dvesti.github.io,2019-08-23:/Pelican/2019/08/23/version-4-0-0-release-notes/</id><summary type="html">&lt;h2 id="400-2019-08-22"&gt;&lt;a href="https://github.com/Pelican-Elegant/elegant/compare/V3.2.0...V4.0.0"&gt;4.0.0&lt;/a&gt; (2019-08-22)&lt;a class="headerlink" href="#400-2019-08-22" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="bug-fixes"&gt;Bug Fixes&lt;a class="headerlink" href="#bug-fixes" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;admonition:&lt;/strong&gt; an artifact in border behind the title (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/88113c3"&gt;88113c3&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;admonition:&lt;/strong&gt; reduce border radius to match radii of other components (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/de08d20"&gt;de08d20&lt;/a&gt;), closes &lt;a href="https://github.com/Pelican-Elegant/elegant/issues/490"&gt;#490&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;admonition:&lt;/strong&gt; remove box shadow (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/d059db8"&gt;d059db8&lt;/a&gt;), closes &lt;a href="https://github.com/Pelican-Elegant/elegant/issues/490"&gt;#490&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;admonition:&lt;/strong&gt; remove text-shadow from heading (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/1c889da"&gt;1c889da&lt;/a&gt;), closes &lt;a href="https://github.com/Pelican-Elegant/elegant/issues/490"&gt;#490&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;clean &lt;span class="caps"&gt;URL&lt;/span&gt;:&lt;/strong&gt; default &lt;span class="caps"&gt;URL&lt;/span&gt; of categories, tags …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2 id="400-2019-08-22"&gt;&lt;a href="https://github.com/Pelican-Elegant/elegant/compare/V3.2.0...V4.0.0"&gt;4.0.0&lt;/a&gt; (2019-08-22)&lt;a class="headerlink" href="#400-2019-08-22" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="bug-fixes"&gt;Bug Fixes&lt;a class="headerlink" href="#bug-fixes" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;admonition:&lt;/strong&gt; an artifact in border behind the title (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/88113c3"&gt;88113c3&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;admonition:&lt;/strong&gt; reduce border radius to match radii of other components (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/de08d20"&gt;de08d20&lt;/a&gt;), closes &lt;a href="https://github.com/Pelican-Elegant/elegant/issues/490"&gt;#490&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;admonition:&lt;/strong&gt; remove box shadow (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/d059db8"&gt;d059db8&lt;/a&gt;), closes &lt;a href="https://github.com/Pelican-Elegant/elegant/issues/490"&gt;#490&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;admonition:&lt;/strong&gt; remove text-shadow from heading (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/1c889da"&gt;1c889da&lt;/a&gt;), closes &lt;a href="https://github.com/Pelican-Elegant/elegant/issues/490"&gt;#490&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;clean &lt;span class="caps"&gt;URL&lt;/span&gt;:&lt;/strong&gt; default &lt;span class="caps"&gt;URL&lt;/span&gt; of categories, tags and archives fails on some servers (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/3c7df6a"&gt;3c7df6a&lt;/a&gt;), closes &lt;a href="https://github.com/Pelican-Elegant/elegant/issues/280"&gt;#280&lt;/a&gt; &lt;a href="https://github.com/Pelican-Elegant/elegant/issues/276"&gt;#276&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;comments:&lt;/strong&gt; &lt;span class="caps"&gt;W3C&lt;/span&gt; validation errors (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/76a1f26"&gt;76a1f26&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;disqus:&lt;/strong&gt; remove &lt;span class="caps"&gt;SITEURL&lt;/span&gt; condition to show Disqus comments section (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/753d5a5"&gt;753d5a5&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Lang:&lt;/strong&gt; do not override default value of DEFAULT_LANG set by Pelican (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/d6c60c2"&gt;d6c60c2&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;social:&lt;/strong&gt; reduce icon sizes in the sidebar (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/c769ba3"&gt;c769ba3&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;social:&lt;/strong&gt; use nofollow for social links in the sidebar (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/50cff87"&gt;50cff87&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;social:&lt;/strong&gt; &lt;span class="caps"&gt;W3C&lt;/span&gt; validation error (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/ec4521e"&gt;ec4521e&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;table:&lt;/strong&gt; reduce border radius to match radii of other components (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/7eaaa96"&gt;7eaaa96&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;w3c validation:&lt;/strong&gt; remove incorrect usage of article tag (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/e8231e0"&gt;e8231e0&lt;/a&gt;), closes &lt;a href="https://github.com/Pelican-Elegant/elegant/issues/251"&gt;#251&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;w3c validation:&lt;/strong&gt; remove obsolete charset attribute (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/8deb285"&gt;8deb285&lt;/a&gt;), closes &lt;a href="https://github.com/Pelican-Elegant/elegant/issues/251"&gt;#251&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;w3c validation:&lt;/strong&gt; remove redundant article tag (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/d07c27e"&gt;d07c27e&lt;/a&gt;), closes &lt;a href="https://github.com/Pelican-Elegant/elegant/issues/251"&gt;#251&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;w3c validation:&lt;/strong&gt; remove redundant sections without heading (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/df9221f"&gt;df9221f&lt;/a&gt;), closes &lt;a href="https://github.com/Pelican-Elegant/elegant/issues/251"&gt;#251&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;w3c validation:&lt;/strong&gt; remove type and language attributes (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/b700224"&gt;b700224&lt;/a&gt;), closes &lt;a href="https://github.com/Pelican-Elegant/elegant/issues/251"&gt;#251&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;w3c validation:&lt;/strong&gt; update &lt;span class="caps"&gt;CSS&lt;/span&gt; rules (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/0b78d46"&gt;0b78d46&lt;/a&gt;), closes &lt;a href="https://github.com/Pelican-Elegant/elegant/issues/251"&gt;#251&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="features"&gt;Features&lt;a class="headerlink" href="#features" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;404:&lt;/strong&gt; auto fill search box with &lt;span class="caps"&gt;URL&lt;/span&gt; fragment that was not found (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/c0a7f47"&gt;c0a7f47&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;admonition:&lt;/strong&gt; add box shadow (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/246f826"&gt;246f826&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;admonition:&lt;/strong&gt; border color should match the title color (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/1adadbe"&gt;1adadbe&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;admonition:&lt;/strong&gt; increase contrast of title (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/7fb82cc"&gt;7fb82cc&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;admonition:&lt;/strong&gt; use svg image instead of font-awesome icon (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/e7c4029"&gt;e7c4029&lt;/a&gt;), closes &lt;a href="https://github.com/Pelican-Elegant/elegant/issues/487"&gt;#487&lt;/a&gt; &lt;!-- yaspeller ignore --&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;clean url:&lt;/strong&gt; support clean &lt;span class="caps"&gt;URL&lt;/span&gt; for search page (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/088791e"&gt;088791e&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;comments:&lt;/strong&gt; add support for utterances comment system (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/a2151cc"&gt;a2151cc&lt;/a&gt;), closes &lt;a href="https://github.com/Pelican-Elegant/elegant/issues/288"&gt;#288&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;quotes:&lt;/strong&gt; improve style and remove font-awesome for quote icon (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/9ef3ac8"&gt;9ef3ac8&lt;/a&gt;), closes &lt;a href="https://github.com/Pelican-Elegant/elegant/issues/487"&gt;#487&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;social:&lt;/strong&gt; add icons for 7 more websites (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/8dcf8fa"&gt;8dcf8fa&lt;/a&gt;), closes &lt;a href="https://github.com/Pelican-Elegant/elegant/issues/494"&gt;#494&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;social:&lt;/strong&gt; use svg icons instead of font-awesome (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/19f458b"&gt;19f458b&lt;/a&gt;) &lt;!-- yaspeller ignore --&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;table:&lt;/strong&gt; add style rule to make tables pop out (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/6a8500b"&gt;6a8500b&lt;/a&gt;), closes &lt;a href="https://github.com/Pelican-Elegant/elegant/issues/440"&gt;#440&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="performance-improvements"&gt;Performance Improvements&lt;a class="headerlink" href="#performance-improvements" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;admonition:&lt;/strong&gt; add attributes to svg images (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/a740a60"&gt;a740a60&lt;/a&gt;) &lt;!-- yaspeller ignore --&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;requests:&lt;/strong&gt; remove font awesome (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/7c20145"&gt;7c20145&lt;/a&gt;), closes &lt;a href="https://github.com/Pelican-Elegant/elegant/issues/487"&gt;#487&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="breaking-changes"&gt;&lt;span class="caps"&gt;BREAKING&lt;/span&gt; &lt;span class="caps"&gt;CHANGES&lt;/span&gt;&lt;a class="headerlink" href="#breaking-changes" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;requests:&lt;/strong&gt; We have removed font awesome. Now we use svg images for all icons. This will result in one less web request, which in turn will improve your websites performance. &lt;!-- yaspeller ignore --&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;social:&lt;/strong&gt; Style customization and configuration of social icons
  in the sidebar has changed.
  New icons have better colors and bigger&amp;nbsp;sizes.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;clean &lt;span class="caps"&gt;URL&lt;/span&gt;:&lt;/strong&gt; To enable clean URLs for tags, categories and archives,
  first configure your server to support clean URLs. Then set &lt;code&gt;TAGS_URL&lt;/code&gt;,
  &lt;code&gt;CATEGORIES_URL&lt;/code&gt; and &lt;code&gt;ARCHIVES_URL&lt;/code&gt; to &lt;code&gt;"tags"&lt;/code&gt;, &lt;code&gt;"categories"&lt;/code&gt; and
  &lt;code&gt;"archives"&lt;/code&gt; respectively.&lt;/li&gt;
&lt;/ul&gt;</content><category term="Release Notes"></category><category term="change-log"></category><category term="project-management"></category></entry><entry><title>Comments — Enable Utterances</title><link href="https://dvesti.github.io/Pelican/2019/08/18/enable-utterances-comments/" rel="alternate"></link><published>2019-08-18T00:13:00+03:00</published><updated>2019-08-18T00:13:00+03:00</updated><author><name>Talha Mansoor</name></author><id>tag:dvesti.github.io,2019-08-18:/Pelican/2019/08/18/enable-utterances-comments/</id><summary type="html">&lt;p&gt;Elegant offers Utterances comments out of the box with few unique&amp;nbsp;features&lt;/p&gt;</summary><content type="html">&lt;div style="width:150px;height:150px;font-size:100px;float:left;text-align:center;vertical-align: middle;line-height:150px;"&gt;🔮&lt;/div&gt;

&lt;p&gt;You can use &lt;a href="https://utteranc.es/"&gt;Utterances&lt;/a&gt; for comments. You have to set &lt;code&gt;UTTERANCES_REPO&lt;/code&gt; to the repository Utterances will connect&amp;nbsp;to.&lt;/p&gt;
&lt;p&gt;That&amp;#8217;s it. Elegant will take care of the&amp;nbsp;rest.&lt;/p&gt;
&lt;p&gt;You can see a working example of Utterances comments in this&amp;nbsp;article.&lt;/p&gt;
&lt;h2 id="extra-customization"&gt;Extra Customization&lt;a class="headerlink" href="#extra-customization" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Besides setting &lt;code&gt;UTTERANCES_REPO&lt;/code&gt;, you also have control over following&amp;nbsp;variables.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;UTTERANCES_THEME&lt;/code&gt;. It&amp;#8217;s default value is &lt;code&gt;github-light&lt;/code&gt;. For other valid values refer to &lt;a href="https://utteranc.es/"&gt;utterances&amp;nbsp;documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;UTTERANCES_LABEL&lt;/code&gt;. It&amp;#8217;s empty by default. If set, Utterances will it to the issues it will&amp;nbsp;create.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="admonition warning"&gt;
&lt;p class="admonition-title"&gt;Warning&lt;/p&gt;
&lt;p&gt;Label names are case sensitive. The label must exist in your repo. Utterances cannot attach labels that do not&amp;nbsp;exist.&lt;/p&gt;
&lt;p&gt;Emoji are supported in label&amp;nbsp;names.✨💬✨&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id="show-utterances-comments-by-default"&gt;Show Utterances comments by default&lt;a class="headerlink" href="#show-utterances-comments-by-default" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Just set &lt;code&gt;UTTERANCES_REPO&lt;/code&gt; variable.&lt;/p&gt;
&lt;h2 id="hide-utterances-comments-by-default"&gt;Hide Utterances comments by default&lt;a class="headerlink" href="#hide-utterances-comments-by-default" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Unset &lt;code&gt;UTTERANCES_REPO&lt;/code&gt; variable.&lt;/p&gt;
&lt;p&gt;This is the default&amp;nbsp;setting.&lt;/p&gt;
&lt;h2 id="hide-utterances-comments-by-default-show-on-selected"&gt;Hide Utterances comments by default. Show on Selected&lt;a class="headerlink" href="#hide-utterances-comments-by-default-show-on-selected" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Set &lt;code&gt;UTTERANCES_REPO&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Set &lt;code&gt;UTTERANCES_FILTER&lt;/code&gt; to &lt;code&gt;True&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This will hide Utterances form on all&amp;nbsp;pages.&lt;/p&gt;
&lt;p&gt;Now to show Utterances form on selected posts, in article metadata&amp;nbsp;set&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;utterances_filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;off&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="show-utterances-comments-by-default-hide-on-selected"&gt;Show Utterances comments by default. Hide on Selected&lt;a class="headerlink" href="#show-utterances-comments-by-default-hide-on-selected" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Set &lt;code&gt;UTTERANCES_REPO&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Remove &lt;code&gt;UTTERANCES_FILTER&lt;/code&gt; or set it to &lt;code&gt;False&lt;/code&gt; which is its default&amp;nbsp;value&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This will hide Utterances form on all&amp;nbsp;pages.&lt;/p&gt;
&lt;p&gt;Now to hide Utterances form on selected posts, in article metadata&amp;nbsp;set&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;utterances_filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;on&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="Connecting With Your Readers"></category><category term="interaction"></category></entry><entry><title>How to display your Social Media Profiles</title><link href="https://dvesti.github.io/Pelican/2019/08/12/how-to-display-your-social-media-profiles/" rel="alternate"></link><published>2019-08-12T13:13:00+03:00</published><updated>2019-08-12T13:13:00+03:00</updated><author><name>Talha Mansoor</name></author><id>tag:dvesti.github.io,2019-08-12:/Pelican/2019/08/12/how-to-display-your-social-media-profiles/</id><summary type="html">&lt;p&gt;Elegant displays links to your social media profiles in sidebar in a customizable&amp;nbsp;manner&lt;/p&gt;</summary><content type="html">&lt;p&gt;Bloggers use different tools to connect with their readers, engage in
discussion with them, and create a loyal following of fans. These tools range
from fully blown social web apps like twitter to old school &lt;span class="caps"&gt;RSS&lt;/span&gt;&amp;nbsp;feeds.&lt;/p&gt;
&lt;p&gt;Bloggers usually add a social media widget to their blog which has links to all their
social media profiles; inviting readers to engage with them else where on the
web too. Most social widgets are loud and obtrusive. Their colors and placement
takes away readers&amp;#8217; attention from the actual&amp;nbsp;content.&lt;/p&gt;
&lt;p&gt;&lt;img class="align-right" style="width: 35%;"
src="https://dvesti.github.io/Pelican/images/social-profiles-sidebar-svg-default.png" alt="Social
Profiles in the Sidebar" /&gt;&lt;/p&gt;
&lt;p&gt;Elegant understands the importance of readers engagement but it makes sure
not to push author&amp;#8217;s &lt;em&gt;&amp;#8220;online social karma&amp;#8221;&lt;/em&gt; down readers&amp;#8217;&amp;nbsp;throats.&lt;/p&gt;
&lt;p&gt;Elegant displays the widget in the sidebar. Each icon is a link to a social
media profile with an optional title attribute. Icons use muted color which
changes when user hovers over them. On hover, icon is also scaled up in&amp;nbsp;size.&lt;/p&gt;
&lt;p&gt;Here is an example of hovering over
LinkedIn &lt;!-- yaspeller ignore --&gt;
icon.&lt;/p&gt;
&lt;p&gt;&lt;img style="width:35%;"
src="https://dvesti.github.io/Pelican/images/social-profiles-sidebar-svg-hover-linkedin.png" alt="Hover over LinkedIn in the Sidebar" /&gt;&lt;/p&gt;
&lt;p&gt;Following image shows these icons in&amp;nbsp;color.&lt;/p&gt;
&lt;p&gt;&lt;img style="width:35%;"
src="https://dvesti.github.io/Pelican/images/social-profiles-sidebar-svg-hover.png" alt="Social Profiles in color" /&gt;&lt;/p&gt;
&lt;p&gt;These &lt;span class="caps"&gt;SVG&lt;/span&gt; icons are &lt;a href="https://github.com/edent/SuperTinyIcons"&gt;Super Tiny&lt;/a&gt;. Most of them have sizes less than 500 bytes, and none of them exceeds 1 K bytes in size. This gives you increased website&amp;nbsp;speed.&lt;/p&gt;
&lt;h2 id="how-to-configure-the-widget"&gt;How to configure the &lt;em&gt;widget&lt;/em&gt;&lt;a class="headerlink" href="#how-to-configure-the-widget" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Define &lt;code&gt;SOCIAL&lt;/code&gt; in your &lt;code&gt;pelicanconf.py&lt;/code&gt;. &lt;code&gt;SOCIAL&lt;/code&gt; is list of tuple. Each tuple
has three&amp;nbsp;items,&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;key&lt;/code&gt;, case insensitive, must match one of the available&amp;nbsp;keys&lt;/li&gt;
&lt;li&gt;&lt;code&gt;URL&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;title&lt;/code&gt;,&amp;nbsp;optional&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;SOCIAL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Email&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;example@example.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;My Email Address&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Github&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;https://github.com/Pelican-Elegant/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Elegant Github Repository&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;RSS&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SITEURL&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/feeds/all.atom.xml&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Facebook&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;https://facebook.com/ExamplePage/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If &lt;code&gt;title&lt;/code&gt; is defined then it is used to populate title attribute of the&amp;nbsp;link.&lt;/p&gt;
&lt;h2 id="available-keys"&gt;Available Keys&lt;a class="headerlink" href="#available-keys" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Calendar&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Email&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Facebook&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Github&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GitLab&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Gmail&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Goodreads&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HackerNews&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Instagram&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Keybase&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LinkedIn&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Mastodon&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Reddit&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RSS&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Spotify&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;StackOverflow&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Telegram&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Twitch&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Twitter&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Wire&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;YouTube&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="how-to-customize-social-profile-label"&gt;How to customize Social Profile Label&lt;a class="headerlink" href="#how-to-customize-social-profile-label" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;By default, Elegant labels social profile section as &lt;strong&gt;Contact&lt;/strong&gt;. You can
change this label by defining a new variable &lt;code&gt;SOCIAL_PROFILE_LABEL&lt;/code&gt; in your
&lt;code&gt;pelicanconf.py&lt;/code&gt; file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;SOCIAL_PROFILE_LABEL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Stay in Touch&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="missing-social-profile"&gt;Missing Social Profile?&lt;a class="headerlink" href="#missing-social-profile" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;What if the icon of your social media site is not&amp;nbsp;available?&lt;/p&gt;
&lt;p&gt;Migrating from &lt;a href="https://dvesti.github.io/Pelican/2014/01/27/how-to-display-your-social-media-profiles-deprecated/"&gt;font-awesome to &lt;span class="caps"&gt;SVG&lt;/span&gt; icons&lt;/a&gt; opened up a whole lot of possibilities. We are not limited to icons provided by the [font-awesome] project. Instead, we can use any &lt;span class="caps"&gt;SVG&lt;/span&gt;&amp;nbsp;icon.&lt;/p&gt;
&lt;p&gt;If you icon of your favorite site is missing then feel free to &lt;a href="https://github.com/Pelican-Elegant/elegant/issues/new?labels=enhancement&amp;amp;title=Request:%20Add%20new%20social%20icon%20in%20the%20sidebar"&gt;open an issue&lt;/a&gt;. We will add it for you as long as a &lt;span class="caps"&gt;SVG&lt;/span&gt; icon is available for&amp;nbsp;it.&lt;/p&gt;</content><category term="Connecting With Your Readers"></category><category term="pelican-theme"></category><category term="font-awesome"></category><category term="social-media"></category><category term="web-design"></category></entry><entry><title>Tables</title><link href="https://dvesti.github.io/Pelican/2019/08/11/tables/" rel="alternate"></link><published>2019-08-11T01:16:00+03:00</published><updated>2019-08-11T01:16:00+03:00</updated><author><name>Talha Mansoor</name></author><id>tag:dvesti.github.io,2019-08-11:/Pelican/2019/08/11/tables/</id><content type="html">&lt;p&gt;Tables in Elegant theme have rounded borders and striped alternating&amp;nbsp;rows.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Season&lt;/th&gt;
&lt;th&gt;Episodes&lt;/th&gt;
&lt;th&gt;First aired&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;June 2, 2002&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;June 1, 2003&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;September 19, 2004&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;September 10, 2006&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;January 6, 2008&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content><category term="Components"></category><category term="remarkable"></category></entry><entry><title>Clean URL</title><link href="https://dvesti.github.io/Pelican/2019/08/10/clean-url/" rel="alternate"></link><published>2019-08-10T20:44:00+03:00</published><updated>2019-08-10T20:44:00+03:00</updated><author><name>Talha Mansoor</name></author><id>tag:dvesti.github.io,2019-08-10:/Pelican/2019/08/10/clean-url/</id><summary type="html">&lt;p&gt;Out of the box, Pelican generated URLs are &lt;a href="https://en.wikipedia.org/wiki/Clean_URL"&gt;unclean&lt;/a&gt;, i.e. they have &lt;code&gt;.html&lt;/code&gt; appended. Elegant lets you use clean URLs with minimal&amp;nbsp;configuration.&lt;/p&gt;
&lt;div class="admonition important"&gt;
&lt;p class="admonition-title"&gt;Mandatory&lt;/p&gt;
&lt;p&gt;To use clean URLs, you server must support&amp;nbsp;it.&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id="categories-tags-and-archives"&gt;Categories, Tags and Archives&lt;a class="headerlink" href="#categories-tags-and-archives" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In your Pelican configuration set following&amp;nbsp;values&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;TAGS_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;tags&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;CATEGORIES_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;categories&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;ARCHIVES_URL …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Out of the box, Pelican generated URLs are &lt;a href="https://en.wikipedia.org/wiki/Clean_URL"&gt;unclean&lt;/a&gt;, i.e. they have &lt;code&gt;.html&lt;/code&gt; appended. Elegant lets you use clean URLs with minimal&amp;nbsp;configuration.&lt;/p&gt;
&lt;div class="admonition important"&gt;
&lt;p class="admonition-title"&gt;Mandatory&lt;/p&gt;
&lt;p&gt;To use clean URLs, you server must support&amp;nbsp;it.&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id="categories-tags-and-archives"&gt;Categories, Tags and Archives&lt;a class="headerlink" href="#categories-tags-and-archives" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In your Pelican configuration set following&amp;nbsp;values&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;TAGS_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;tags&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;CATEGORIES_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;categories&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;ARCHIVES_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;archives&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With it set, your categories, tags and archives will be served from following&amp;nbsp;links,&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="/categories"&gt;&lt;code&gt;/categories&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/tags"&gt;&lt;code&gt;/tags&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/archives"&gt;&lt;code&gt;/archives&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you do not set the variables then the URLs will&amp;nbsp;become&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="/categories.html"&gt;&lt;code&gt;/categories.html&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/tags.html"&gt;&lt;code&gt;/tags.html&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/archives.html"&gt;&lt;code&gt;/archives.html&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="articles"&gt;Articles&lt;a class="headerlink" href="#articles" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For clean URLs for articles, just&amp;nbsp;set&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;ARTICLE_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;{slug}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="pages"&gt;Pages&lt;a class="headerlink" href="#pages" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For pages,&amp;nbsp;set&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;PAGE_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;{slug}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;PAGE_SAVE_AS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;{slug}&lt;/span&gt;&lt;span class="s2"&gt;.html&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="search"&gt;Search&lt;a class="headerlink" href="#search" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For search page,&amp;nbsp;set&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;SEARCH_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;search&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="Advanced Features"></category><category term="unique"></category></entry><entry><title>Using ‘yaspeller’ with Elegant</title><link href="https://dvesti.github.io/Pelican/2019/08/04/yaspeller-for-elegant/" rel="alternate"></link><published>2019-08-04T23:17:00+03:00</published><updated>2019-08-04T23:17:00+03:00</updated><author><name>Jack De Winter</name></author><id>tag:dvesti.github.io,2019-08-04:/Pelican/2019/08/04/yaspeller-for-elegant/</id><summary type="html">&lt;p&gt;Elegant use the &amp;#8216;yaspeller&amp;#8217; tool to scan for spelling mistakes.  This article gives more information about the tool and how to run it&amp;nbsp;locally.&lt;/p&gt;</summary><content type="html">
&lt;p&gt;Even with most code editors having a spell checker installed and active by default, there is a
need to have the Elegant builds verify spelling against a known dictionary. The spell check
tool that was decided on by the team is the
&lt;a href="https://github.com/hcodes/yaspeller"&gt;yaspeller tool&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This tool is useful in that it has a number of options for altering what it considers eligible
for scanning. In its default mode, the &lt;code&gt;yaspeller&lt;/code&gt; tool will scan everything in a Markdown
document except for text encapsulated within code blocks, such as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;```text
[text ommitted for breverity]
```

OR

this `yaspeller` tool is cool
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While &lt;code&gt;yaspeller&lt;/code&gt; is a useful tool, it is not foolproof. When scanning the documentation
files, it often requires a bit of assistance in determining how to properly handle words which
do not appear in the standard dictionary.&lt;/p&gt;
&lt;h2 id="what-to-do-with-spelling-mistakes"&gt;What To Do With Spelling Mistakes&lt;a class="headerlink" href="#what-to-do-with-spelling-mistakes" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There are typically 4 categories of spelling mistakes: an honest mistake, a word to be added
to the project dictionary, a single situational misspelling, and intentional misspellings
within a block of text.&lt;/p&gt;
&lt;p&gt;The way to address mistakes in the first category is simple. Fix them. If you are not 100%
sure that the word is spelled properly, consider using
&lt;a href="https://www.dictionary.com/"&gt;dictionary.com&lt;/a&gt; to verify the spelling. If you search for a
given word and a simpler form of that word appears, scroll down to the related words section
and see if it is there.&lt;/p&gt;
&lt;h2 id="adding-a-word-to-the-project-dictionary"&gt;Adding A Word to the Project Dictionary&lt;a class="headerlink" href="#adding-a-word-to-the-project-dictionary" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If the spelling mistake has been verified to be a properly spelled word, then the word jumps
over to the second category: a word to be added to the project dictionary. The root directory
of the project contains
&lt;a href="https://github.com/Pelican-Elegant/elegant/blob/master/.yaspeller.json"&gt;the project dictionary&lt;/a&gt;
with a list of words that &lt;code&gt;yaspeller&lt;/code&gt; should consider acceptable. Words added to the
dictionary in lower case will match upper case and lower case versions of the word, while words
added with any capitalization will force &lt;code&gt;yaspeller&lt;/code&gt; to perform a case-sensitive match.&lt;/p&gt;
&lt;h2 id="a-single-intentional-misspellings-within-a-line-of-text"&gt;A Single Intentional Misspellings within a Line of Text&lt;a class="headerlink" href="#a-single-intentional-misspellings-within-a-line-of-text" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For the third category, a single situational misspelling, the best example is included in the
article &lt;a href="https://dvesti.github.io/Pelican/2019/07/20/git-commit-guidelines/"&gt;Git Commit Guidelines&lt;/a&gt;.
In that article, there is &lt;a href="https://dvesti.github.io/Pelican/2019/07/20/git-commit-guidelines/#type"&gt;a section&lt;/a&gt; describing the
legal values that can be associated with a commit type. While most of the values are fine,
there is one value that is the short form for “performance”:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;- **perf**: A code change that improves performance &amp;lt;!-- yaspeller ignore --&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As this is the only word in the article that is intentionally spelled the way it is, the
line ends with the &lt;code&gt;&amp;lt;!-- yaspeller ignore --&amp;gt;&lt;/code&gt; suffix to tell the &lt;code&gt;yaspeller&lt;/code&gt; tool to ignore
the entire line. While we could add that single word to the project dictionary, it is more
clear to ignore the word for this given situation instead of adding it to the dictionary.&lt;/p&gt;
&lt;h2 id="intentional-misspellings-within-a-block-of-text"&gt;Intentional Misspellings within a Block of Text&lt;a class="headerlink" href="#intentional-misspellings-within-a-block-of-text" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The final category, intentional misspellings within a block of text, is an extension of the
previous category, but dealing with multiple intentional misspellings, instead of a single
one. A good example of that would be specifying the contents for a table to show an example
to the user, such as the following:&lt;/p&gt;
&lt;!-- yaspeller ignore:start --&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Key&lt;/th&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;th&gt;File Name&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;abc&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;stat-counter.md&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;def&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;favicons-speed-dial-icons.md&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;!-- yaspeller ignore:end --&gt;
&lt;p&gt;If you look at the &lt;a href="https://dvesti.github.io/Pelican/2019/08/04/yaspeller-for-elegant/"&gt;Markdown for this article&lt;/a&gt;,
notice how the table is surrounded with two &lt;span class="caps"&gt;HTML&lt;/span&gt; comments:
&lt;code&gt;&amp;lt;!-- yaspeller ignore:start --&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;!-- yaspeller ignore:end --&amp;gt;&lt;/code&gt; with blank lines between
the comments and the block they are there to ignore.&lt;/p&gt;
&lt;p&gt;With those comments in place, the &lt;code&gt;yaspeller&lt;/code&gt; tool does not raise any issues with the Markdown
that generates this file, as it has been told to ignore everything starting with the first
comment and ending with the second comment. If these are removed, the &lt;code&gt;yaspeller&lt;/code&gt; tool will
output the following errors:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[ERR] /enlistments/elegant/documentation/content/articles/Contributing/ya-spell-check.md 3450 ms
-----
Typos: 2
1. def (129:3)
2. favicons (129:13)

Capitalization: 1
1. abc (128:3, suggest: ABC)
-----
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="why-spell-check-locally"&gt;Why Spell Check Locally&lt;a class="headerlink" href="#why-spell-check-locally" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Similar to the other checks that are performed on every submission, a spell check failure will
cause the build to fail.&lt;/p&gt;
&lt;p&gt;Addressing any failures reported locally by this tool results in a smaller turn around time in
getting any spelling mistakes addressed. This in turn will save time when submitting changes
in a Pull Request, as you have already dealt with any errors that this tool may report.&lt;/p&gt;
&lt;h3 id="prerequisites-for-local-installation"&gt;Prerequisites For Local Installation&lt;a class="headerlink" href="#prerequisites-for-local-installation" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Either &lt;a href="https://nodejs.org/en/download/"&gt;Node.js&lt;/a&gt; or
&lt;a href="https://yarnpkg.com/en/docs/install"&gt;Yarn&lt;/a&gt; must be installed on your system.&lt;/p&gt;
&lt;h3 id="how-do-i-install-it-locally"&gt;How Do I Install It Locally&lt;a class="headerlink" href="#how-do-i-install-it-locally" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You can install the &lt;code&gt;yaspeller&lt;/code&gt; package using either &lt;span class="caps"&gt;NPM&lt;/span&gt; (Node.js) or Yarn as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;npm install -g yaspeller
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class="caps"&gt;OR&lt;/span&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yarn global add yaspeller
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="how-do-i-use-it-locally"&gt;How Do I Use It Locally&lt;a class="headerlink" href="#how-do-i-use-it-locally" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To invoke the &lt;code&gt;yaspeller&lt;/code&gt; package for the documentation files for the Elegant project, go to
the root directory of your local repository and enter the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yaspeller --only-errors documentation/content/ *.md
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When executed, the &lt;code&gt;yaspeller&lt;/code&gt; tool will recursively scan all of the &lt;code&gt;*.md&lt;/code&gt; files under the
&lt;code&gt;documentation/content/&lt;/code&gt; directory from the root of your local repository. The &lt;code&gt;--only-errors&lt;/code&gt;
flags merely restricts any of the output to any errors that occur, instead of an ongoing stream
of what files it is scanning. As omitting the &lt;code&gt;--only-errors&lt;/code&gt; flag only affects the output
and not the detection of spelling mistakes, feel free to not use it when running locally.&lt;/p&gt;</content><category term="Contributing"></category></entry><entry><title>Как я могу внести свой вклад?</title><link href="https://dvesti.github.io/Pelican/2019/08/04/how-to-contribute/" rel="alternate"></link><published>2019-08-04T22:17:00+03:00</published><updated>2019-08-04T22:17:00+03:00</updated><author><name>Jack De Winter</name></author><id>tag:dvesti.github.io,2019-08-04:/Pelican/2019/08/04/how-to-contribute/</id><summary type="html">&lt;p&gt;This article provides a sweeping overview of the Elegant contribution&amp;nbsp;workflow.&lt;/p&gt;</summary><content type="html">
&lt;p&gt;Once you have decided to &lt;a href="https://dvesti.github.io/Pelican/2019/07/03/invitation-to-participate/"&gt;contribute to the project&lt;/a&gt;, we need to
go over some rules and guidelines before you can start. These rules and guidelines help us
work together as a team and give us a common set of directions that keep us all on the same
page. In the case of any disagreements on what needs to be done, we can always refer to the
guidelines to help us find our way from disagreement to consensus.&lt;/p&gt;
&lt;h2 id="before-we-start"&gt;Before We Start&lt;a class="headerlink" href="#before-we-start" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This document strives to provide a solid path through contributing a change to Elegant, from
setting up your environment to submitting and responding to a Pull Request.&lt;/p&gt;
&lt;p&gt;To stay focused on that solid path, additional information that is typically needed to provide
a complete picture of the topic being discussed will be presented in other articles and linked
to from this article.&lt;/p&gt;
&lt;p&gt;Please take the time to familiarize yourself with the information in the attached articles,
as they will help you build a complete understanding of our entire contribution process.&lt;/p&gt;
&lt;h2 id="getting-the-big-rule-out-of-the-way"&gt;Getting The Big Rule Out of the Way&lt;a class="headerlink" href="#getting-the-big-rule-out-of-the-way" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As the project is an open source project, anything you contribute to the project is covered by
the project’s &lt;a href="https://dvesti.github.io/Pelican/2019/07/03/contribution-license/"&gt;Contributions License&lt;/a&gt;. If you are not
willing or unable to abide by those licenses, we cannot have you contribute to the project.&lt;/p&gt;
&lt;h2 id="primary-goal"&gt;Primary Goal&lt;a class="headerlink" href="#primary-goal" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The primary goal of this project is to provide a theme for Pelican that provides the
&lt;a href="https://dvesti.github.io/Pelican/2019/07/03/look-and-feel/"&gt;Elegant Look and Feel&lt;/a&gt; to our user’s websites. To that end,
any features or changes must:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;not negatively effect readability and reading experience&lt;/li&gt;
&lt;li&gt;not cause distraction for the reader&lt;/li&gt;
&lt;li&gt;any changes must work out of the box with sensible defaults for the user&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These are not negotiable.&lt;/p&gt;
&lt;h2 id="developing-changes-locally"&gt;Developing Changes Locally&lt;a class="headerlink" href="#developing-changes-locally" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The Elegant project is &lt;a href="https://github.com/Pelican-Elegant/elegant"&gt;hosted in GitHub&lt;/a&gt; and
requires your machine to have a local &lt;a href="https://git-scm.com/downloads"&gt;Git Client&lt;/a&gt; to
contribute. The &lt;a href="https://git-scm.com/doc"&gt;Git documentation site&lt;/a&gt; has good instructions and
videos on how to get started with Git, as well as numerous instructional videos on
&lt;a href="https://www.youtube.com/results?search_query=git+clients"&gt;YouTube&lt;/a&gt; to get you going. If you
are new to Git, they are a great place to start!&lt;/p&gt;
&lt;h3 id="read-the-guides"&gt;Read The Guides&lt;a class="headerlink" href="#read-the-guides" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In addition to installing Git locally, we request that you take a solid look through the
following guides. The first guide,
&lt;a href="https://dvesti.github.io/Pelican/2019/07/03/git-tips-for-beginners/"&gt;Git Tips For Beginners&lt;/a&gt;, is a walk through of things that our
team has found useful in the past to help get people up and going with their contributions.
While this guide is optional, pointing people at this guide has resolved a fair number of
questions in the past.&lt;/p&gt;
&lt;p&gt;The second guide, our team’s &lt;a href="https://dvesti.github.io/Pelican/2019/07/20/git-commit-guidelines/"&gt;Git Commit Guidelines&lt;/a&gt;,
is required reading for all contributors. These guidelines document the rules we require every
contributor to follow when submitting commits for consideration.&lt;/p&gt;
&lt;p&gt;To make things easier for contributors, the repository includes configuration to
&lt;a href="https://dvesti.github.io/Pelican/2019/07/22/use-commitizen-for-git-commits/"&gt;use Commitizen for Git commits&lt;/a&gt;. Entering &lt;code&gt;git-cz&lt;/code&gt; on the command
line within the repository will walk you through a series of prompts to build a commit message
that is fully compliant with our guidelines. It’s usage is highly recommended to avoid issues.&lt;/p&gt;
&lt;h3 id="optional-setup"&gt;Optional Setup&lt;a class="headerlink" href="#optional-setup" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To assist you in preparing your contributions with minimal friction, you can optionally run
one or more pieces of our automated build pipeline on your local machine. Depending on the
depth and complexity of your changes, having these present on your local machine are often a
time saver in terms of detecting bugs before you submit a
&lt;a href="#submitting-a-change-for-consideration"&gt;Pull Request for your changes&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Choosing to run any of these checks locally will shorten the minimum time required to notice a
failure from 3-5 minutes for them to run on the GitHub machines to an average of 60 seconds or
less for those same checks to run on your local machine.&lt;/p&gt;
&lt;h4 id="running-pre-commit-hooks-locally"&gt;Running Pre-Commit Hooks Locally&lt;a class="headerlink" href="#running-pre-commit-hooks-locally" title="Permanent link"&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Facilitating the early detecting of pre-commit hook failures, an option is to install the
&lt;a href="https://dvesti.github.io/Pelican/2019/07/22/use-pre-commit-git-hooks/"&gt;Pre-commit tool&lt;/a&gt; in your local repository. With the
Pre-commit tool installed, any commits to your local Elegant repository will be subjected
to the same verification that is performed when you submit a
&lt;a href="#submitting-a-change-for-consideration"&gt;Pull Request for your changes&lt;/a&gt;.
This tool integrates with your local repository, so once installed it is automatically
executed as part of your normal &lt;code&gt;git commit&lt;/code&gt; process.&lt;/p&gt;
&lt;h4 id="running-the-spell-checker-locally"&gt;Running the Spell Checker Locally&lt;a class="headerlink" href="#running-the-spell-checker-locally" title="Permanent link"&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;As the dictionary in the environment that you develop changes in may be different than other
contributors, the team has elected to include a the
&lt;a href="https://dvesti.github.io/Pelican/2019/08/04/yaspeller-for-elegant/"&gt;yaspeller tool&lt;/a&gt;
as part of our build pipeline. While this does not integrate with your local repository
like the Pre-commit tool, running this locally can help shorten the cycle for ensuring that
your spelling is spot on!&lt;/p&gt;
&lt;h2 id="making-your-changes-to-elegant"&gt;Making Your Changes to Elegant&lt;a class="headerlink" href="#making-your-changes-to-elegant" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With all of the required, recommended and optional setup behind us, and all of the submitting
of the changes ahead of us, it is time to focus on how to develop features for Elegant. To
ensure that this topic is given the focus it requires, the article
&lt;a href="https://dvesti.github.io/Pelican/2019/07/22/developing-for-elegant/"&gt;Developing Features For Elegant&lt;/a&gt;
is dedicated to providing that information to contributors.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;While this section rightfully belongs where it is in terms of workflow, it is recommended that you continue reading this article to it’s end.  This will allow you to understand what comes after your changes, and may influence implementtion changes to avoid possible problems later on in the workflow.&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id="submitting-a-change-for-consideration"&gt;Submitting a Change For Consideration&lt;a class="headerlink" href="#submitting-a-change-for-consideration" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Submitting your changes is performed using the GitHub
&lt;a href="https://help.github.com/en/articles/creating-a-pull-request"&gt;Pull Request feature&lt;/a&gt;. Before
starting the Pull Request, you must push any committed changes from your local repository to
your forked Elegant repository on GitHub. Once that has been done, go to the
&lt;a href="https://github.com/Pelican-Elegant/elegant/compare"&gt;Compare Changes page&lt;/a&gt; and click on the
&lt;code&gt;compare across forks&lt;/code&gt; text right underneath the title.&lt;/p&gt;
&lt;p&gt;Across the top of the page, you will see 4 selection drop downs that look like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="fork drop downs" src="https://dvesti.github.io/Pelican/images/compare-changes.png"/&gt;&lt;/p&gt;
&lt;p&gt;These drop downs allow you to select where to compare changes from and to. Leave the first
selection alone, and unless instructed otherwise, select &lt;code&gt;next&lt;/code&gt; from the second selection.
Select the name of your repository fork from the third selection, typically your GitHub account
name followed by &lt;code&gt;/Elegant&lt;/code&gt;. Finally, select the branch that your changes are in on the
forked repository in the last selection.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;Typically, most people synchronize the branch name of their local repository with the branch name they push to on their forked repository.  If you push your local changes to a different branch on your forked repository, select the name of the branch in the last selection.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Once you confirm that the changes that are now visible at the bottom of the page are the ones
you intend to submit, press the &lt;code&gt;Create New Pull Request&lt;/code&gt; button. The edit field at the
top of the page must have a name that identifies what the change is and is important to relay
the scope of your change. However, the editor field below it is where most of the required information is.&lt;/p&gt;
&lt;p&gt;Currently there are 2 pre-requisites steps and 3 recommended steps as requirements of every
Pull Request. If you have satisfied these requirements, change the &lt;code&gt;[ ]&lt;/code&gt; text to &lt;code&gt;[x]&lt;/code&gt;
indicating that you have complied with the pre-requisite. Then proceed to the &lt;code&gt;Description&lt;/code&gt; at
the bottom and add a description that provides a good amount of information about what you
changed and why. If there were any reported issues that you resolved, it doesn’t hurt to
mention them in this section.&lt;/p&gt;
&lt;p&gt;When you are done with adding that information, double check it and press the
&lt;code&gt;Create pull request&lt;/code&gt; button to submit the request.&lt;/p&gt;
&lt;h2 id="building-your-changes-on-the-github-server"&gt;Building Your Changes on the GitHub Server&lt;a class="headerlink" href="#building-your-changes-on-the-github-server" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After pushing the &lt;code&gt;Create pull request&lt;/code&gt; button, you are transferred to another page that is
mostly the same as any other GitHub Pull Request page. The main difference is the merge
section near the bottom, where you will see something like the following:&lt;/p&gt;
&lt;p&gt;&lt;img alt="image" src="https://dvesti.github.io/Pelican/images/started-pull-request.png"/&gt;&lt;/p&gt;
&lt;p&gt;If the build verifies your changes, all 6 of the current checks will either have a grey box
in front of them or a green checkmark. If any of the verifications fail, they will have a
red X in front of the verification that failed. Click on the &lt;code&gt;Details&lt;/code&gt; text on the right side
to get more information on why those checks failed.&lt;/p&gt;
&lt;h3 id="build-verification-actions"&gt;Build Verification Actions&lt;a class="headerlink" href="#build-verification-actions" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To ensure each Pull Request contains solid changes, there are 3 sets of verification actions
performed on each Pull Request.&lt;/p&gt;
&lt;p&gt;The first set of actions are the &lt;code&gt;Header rules&lt;/code&gt;,
&lt;code&gt;Mixed content&lt;/code&gt;, &lt;code&gt;Pages changed&lt;/code&gt;, and &lt;code&gt;Redirect rules&lt;/code&gt; which are simple checks with
pre-defined rule sets. These rules employ simple rule sets looking for changes that are
outside the scope of the rest of the project, and rarely fire if you keep to the format
of the other files in the repository.&lt;/p&gt;
&lt;p&gt;The next verification action is the Travis &lt;span class="caps"&gt;CI&lt;/span&gt; action that performs a complete build of the
project, represented by the &lt;code&gt;continuous-integration/travis-ci/pr&lt;/code&gt; action. A complete build
of the project often takes 3-5 minutes, so this is the verification action you will be
waiting on the longest.&lt;/p&gt;
&lt;p&gt;It is this part of the build that puts all of the changes through strict checks to make
sure that the submitted changes are solid.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;install pre-requisites for building&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dvesti.github.io/Pelican/2019/07/22/use-pre-commit-git-hooks/"&gt;Pre-commit&lt;/a&gt; on the project source&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dvesti.github.io/Pelican/2019/08/04/yaspeller-for-elegant/"&gt;yaspeller&lt;/a&gt; on the project source&lt;/li&gt;
&lt;li&gt;publish for the documentation site&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/Online-W3C-Validator/"&gt;w3c_validator&lt;/a&gt; on the documentation site &lt;!-- yaspeller ignore --&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/html5validator/"&gt;html5validator&lt;/a&gt; on the documentation site &lt;!-- yaspeller ignore --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;More information on how our team uses Travis &lt;span class="caps"&gt;CI&lt;/span&gt; is detailed
&lt;a href="https://dvesti.github.io/Pelican/2018/12/07/travis-ci-and-doc-website/"&gt;in this article&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id="previewing-changes"&gt;Previewing Changes&lt;a class="headerlink" href="#previewing-changes" title="Permanent link"&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The final verification action is a simple build and internal deploy of the
&lt;a href="https://elegant.oncrashreboot.com/"&gt;Elegant documentation website&lt;/a&gt;, represented by the
&lt;code&gt;netlify/pelicanelegant/deploy-preview&lt;/code&gt; action. Clicking on the &lt;code&gt;Details&lt;/code&gt; text on the
right side of the action will redirect your browser to temporary deployment of the
documentation website deployed using &lt;a href="https://www.netlify.com/"&gt;Netlify&lt;/a&gt;. If the changes
that your are submitting are documentation changes or have an impact on the look and feel
of Elegant, you should use the preview to manually verify your changes.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;The documentation preview is deployed to Netlify without performing a full build as detailed above, and is not dependant on the full build step.  As such, you can manually verify your changes on the preview website while the full build is ongoing.&lt;/p&gt;
&lt;/div&gt;
&lt;h4 id="view-previews-for-other-pull-requests"&gt;View Previews For Other Pull Requests&lt;a class="headerlink" href="#view-previews-for-other-pull-requests" title="Permanent link"&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;This Netlify temporary deployment is also useful tool that can be used to see the effects
of any Pull Request on the documentation website. For example, if we want to look at what
the effects of &lt;a href="https://github.com/Pelican-Elegant/elegant/pull/458"&gt;Pull Request #458&lt;/a&gt; were,
we have a solid path to view those changes.&lt;/p&gt;
&lt;p&gt;Each of the
&lt;a href="https://github.com/Pelican-Elegant/elegant/pulls?q=is%3Apr+is%3Aclosed"&gt;recently close Pull Requests&lt;/a&gt;
was built with Netlify support enabled. As such, if you switch from the default
&lt;code&gt;Conversation&lt;/code&gt; tab to the &lt;code&gt;Checks&lt;/code&gt; tab, you can see if Netlify succeeded. If it did
succeed, there will be a &lt;code&gt;View more details on Netlify&lt;/code&gt; link at the bottom of the page
which will take you to the Netlify deployment of the Pull Request. At the top of the
&lt;code&gt;Deploy Log&lt;/code&gt; section is a &lt;code&gt;Preview&lt;/code&gt; button that will take you to the temporary deployment
of the documentation website, as if you had clicked on the &lt;code&gt;Details&lt;/code&gt; link from the
Pull Request page itself.&lt;/p&gt;
&lt;h3 id="what-happens-if-the-build-detects-errors"&gt;What Happens If The Build Detects Errors?&lt;a class="headerlink" href="#what-happens-if-the-build-detects-errors" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Once you fix any errors that the build detected, go through your normal verification process
and submit the changes to your forked repository. If your Pull Request is still open, when
GitHub detects that one of the repository/branch pairings in a Pull Request has been updated,
it will execute any required checks from the beginning. At that point, you are effectively
back at the
&lt;a href="#building-your-changes-on-the-github-server"&gt;Building Your Changes on the GitHub Server&lt;/a&gt;
section above.&lt;/p&gt;
&lt;p&gt;This looping will continue until one of two things happen: all errors are dealt with &lt;span class="caps"&gt;OR&lt;/span&gt; you
give up. At any point before the Pull Request is accepted and merged with the main
repository, you can push the &lt;code&gt;Close pull request&lt;/code&gt; button at the bottom of the page and close
the Pull Request. This will perform a “soft close” on the Pull Request, with the option to
re-open the Pull Request at a later date.&lt;/p&gt;
&lt;h4 id="consider-using-a-draft-pull-request"&gt;Consider Using a Draft Pull Request&lt;a class="headerlink" href="#consider-using-a-draft-pull-request" title="Permanent link"&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;If you want to make sure that your Pull Request builds on the server before submitting it for
consideration by the team, consider using a Draft Pull Request. Instead of pressing the
&lt;code&gt;Create pull request&lt;/code&gt; button in the
&lt;a href="#building-your-changes-on-the-github-server"&gt;Building Your Changes on the GitHub Server&lt;/a&gt;
section, click on the arrow on the right side of the button and select
&lt;code&gt;Create draft pull request&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="draft pull request" src="https://dvesti.github.io/Pelican/images/draft-pull-request.png"/&gt;&lt;/p&gt;
&lt;p&gt;A draft request is exactly like a normal Pull Request except that it is not visible to anyone
other than yourself. In this way, you can make sure the Pull Request is exactly the way
you want it before asking for it to be considered part of the project.&lt;/p&gt;
&lt;p&gt;Something that is often forgotten about Pull Requests, and therefore Draft Pull Requests, is
that you can edit most of the contents of the Pull Request after you have created it. Use this
to your advantage as you get your Pull Request ready!&lt;/p&gt;
&lt;h3 id="what-happens-if-team-members-ask-for-changes"&gt;What Happens If Team Members Ask For Changes?&lt;a class="headerlink" href="#what-happens-if-team-members-ask-for-changes" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As we are a team, when changes are submitted for consideration, the team will offer feedback
on the changes. The feedback will generally fall into 3 categories: yes, no, or almost.&lt;/p&gt;
&lt;p&gt;With the “yes” category, the changes will be accepted “as is” into the project.&lt;/p&gt;
&lt;p&gt;Conversely, in the “no” category, the changes are rejected, usually with a decent description
of why they were rejected. Depending on the rejection reason, it may be possible to adjust
your changes according to feedback in the rejection reason and submit it as a new Pull Request
at a later date.&lt;/p&gt;
&lt;p&gt;In the “almost” category, the feedback will usually contain specific things that one or more of
the team members want to see changed before it can be merged. This feedback can be a simple
as a grammar error they want to see fixed, or asking for a more complete article documenting
how to use your changes. The important part to note about this category is that the team
feels that after the suggested changes have been performed, you can easily move to the “yes” category.&lt;/p&gt;
&lt;p&gt;Regardless of what category the feedback for your changes falls into, please remember that we
are a team and we are at our best when we work together. If you have a disagreement, ask for
clarifications and initiate a conversation to understand where the reviewer of the Pull Request
is coming from. Work with that person to help yourself see their viewpoint.&lt;/p&gt;</content><category term="Contributing"></category></entry><entry><title>Version 3.2.0</title><link href="https://dvesti.github.io/Pelican/2019/07/31/version-3-2-0-release-notes/" rel="alternate"></link><published>2019-07-31T01:17:00+03:00</published><updated>2019-07-31T01:17:00+03:00</updated><author><name>Dmitriev</name></author><id>tag:dvesti.github.io,2019-07-31:/Pelican/2019/07/31/version-3-2-0-release-notes/</id><summary type="html">&lt;h1 id="320-2019-07-30"&gt;&lt;a href="https://github.com/Pelican-Elegant/elegant/compare/V3.1.0...V3.2.0"&gt;3.2.0&lt;/a&gt; (2019-07-30)&lt;a class="headerlink" href="#320-2019-07-30" title="Permanent link"&gt; &lt;/a&gt;&lt;/h1&gt;
&lt;h3 id="bug-fixes"&gt;Bug Fixes&lt;a class="headerlink" href="#bug-fixes" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;freelists:&lt;/strong&gt; open FreeLists subscription form in a new tab (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/f81657c"&gt;f81657c&lt;/a&gt;) &lt;!-- yaspeller ignore --&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;freelists:&lt;/strong&gt; replace deprecated subscription form with button (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/9bfe3c1"&gt;9bfe3c1&lt;/a&gt;), closes &lt;a href="https://github.com/Pelican-Elegant/elegant/issues/412"&gt;#412&lt;/a&gt; &lt;!-- yaspeller ignore --&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;freelists:&lt;/strong&gt; remove unused include (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/27f0831"&gt;27f0831&lt;/a&gt;) &lt;!-- yaspeller ignore --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="features"&gt;Features&lt;a class="headerlink" href="#features" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;comments:&lt;/strong&gt; reduce transition duration from 500 to 200 (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/b86e13d"&gt;b86e13d&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;favicon:&lt;/strong&gt; add 180x180 dimension shortcut icon support (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/dd2ed24"&gt;dd2ed24&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;filter …&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h1 id="320-2019-07-30"&gt;&lt;a href="https://github.com/Pelican-Elegant/elegant/compare/V3.1.0...V3.2.0"&gt;3.2.0&lt;/a&gt; (2019-07-30)&lt;a class="headerlink" href="#320-2019-07-30" title="Permanent link"&gt; &lt;/a&gt;&lt;/h1&gt;
&lt;h3 id="bug-fixes"&gt;Bug Fixes&lt;a class="headerlink" href="#bug-fixes" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;freelists:&lt;/strong&gt; open FreeLists subscription form in a new tab (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/f81657c"&gt;f81657c&lt;/a&gt;) &lt;!-- yaspeller ignore --&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;freelists:&lt;/strong&gt; replace deprecated subscription form with button (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/9bfe3c1"&gt;9bfe3c1&lt;/a&gt;), closes &lt;a href="https://github.com/Pelican-Elegant/elegant/issues/412"&gt;#412&lt;/a&gt; &lt;!-- yaspeller ignore --&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;freelists:&lt;/strong&gt; remove unused include (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/27f0831"&gt;27f0831&lt;/a&gt;) &lt;!-- yaspeller ignore --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="features"&gt;Features&lt;a class="headerlink" href="#features" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;comments:&lt;/strong&gt; reduce transition duration from 500 to 200 (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/b86e13d"&gt;b86e13d&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;favicon:&lt;/strong&gt; add 180x180 dimension shortcut icon support (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/dd2ed24"&gt;dd2ed24&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;filter:&lt;/strong&gt; add black list, white list feature for Disqus (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/4887aec"&gt;4887aec&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;filter:&lt;/strong&gt; add black list, white list feature for FreeLists (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/2407cc8"&gt;2407cc8&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;filter:&lt;/strong&gt; add black list, white list feature for Mailchimp (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/b96122d"&gt;b96122d&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;</content><category term="Release Notes"></category><category term="change-log"></category><category term="project-management"></category></entry><entry><title>Developing Features For Elegant</title><link href="https://dvesti.github.io/Pelican/2019/07/22/developing-for-elegant/" rel="alternate"></link><published>2019-07-22T23:17:00+03:00</published><updated>2019-07-22T23:17:00+03:00</updated><author><name>Jack De Winter</name></author><id>tag:dvesti.github.io,2019-07-22:/Pelican/2019/07/22/developing-for-elegant/</id><summary type="html">&lt;p&gt;Elegant development is typically broken up into three concerns.  This article talks about each of&amp;nbsp;them.&lt;/p&gt;</summary><content type="html">&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;this document is under&amp;nbsp;construction&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;In most cases, this default is to have any configuration variables that support
those changes have a value of &lt;code&gt;None&lt;/code&gt;. There is a bit more leeway given for supporting plugins,
which are &lt;a href="#extending"&gt;covered below&lt;/a&gt;, but even Elegant enhancement to support those plugins
must follow these&amp;nbsp;rules.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dvesti.github.io/Pelican/2019/07/03/code-style-for-jinja2/"&gt;Jinja&amp;nbsp;Style&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dvesti.github.io/Pelican/2019/07/19/what-is-live-reload/"&gt;Live&amp;nbsp;Reload&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dvesti.github.io/Pelican/2019/07/19/live-reload-elegant-documentation-using-pelican/"&gt;Live Reload With&amp;nbsp;Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dvesti.github.io/Pelican/2019/07/19/live-reload-elegant-documentation-using-gulpjs/"&gt;Live Reload With&amp;nbsp;Gulp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Contributing"></category></entry><entry><title>Using Pre-Commit Git Hooks</title><link href="https://dvesti.github.io/Pelican/2019/07/22/use-pre-commit-git-hooks/" rel="alternate"></link><published>2019-07-22T23:17:00+03:00</published><updated>2019-07-22T23:17:00+03:00</updated><author><name>Talha Mansoor</name></author><id>tag:dvesti.github.io,2019-07-22:/Pelican/2019/07/22/use-pre-commit-git-hooks/</id><summary type="html">&lt;p&gt;Elegant use the Pre-commit tool to standardize on various concepts.  This article gives more information about the tool and how to run it&amp;nbsp;locally.&lt;/p&gt;</summary><content type="html">
&lt;p&gt;When there was a single developer working on the Elegant project, there were none of the
common problems associated with team projects: different styles and different processes. After
the project was moved to the current
&lt;a href="https://dvesti.github.io/Pelican/2019/01/05/community-led-project/"&gt;bazaar development model&lt;/a&gt;, the team thought it
best that all changes should follow the same set of stylistic guidelines.&lt;/p&gt;
&lt;p&gt;The Git clients provide a concept called
&lt;a href="https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks"&gt;Git hooks&lt;/a&gt;. Git hooks allow for
custom code to be triggered when certain actions are performed with Git. One of the most
common triggers is the pre-commit trigger, used to activate a program between a client
request to commit and the actual act of committing the change. If the program reports a
failure, the commit is aborted, hopefully with the failed program providing enough information
for the user to diagnose the issue.&lt;/p&gt;
&lt;h2 id="arent-git-hooks-hard-to-get-right"&gt;Aren’t Git Hooks Hard to Get Right?&lt;a class="headerlink" href="#arent-git-hooks-hard-to-get-right" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you have tried to set up Git hooks before, there are usually two problems you have faced:
the concept can be hard for people to understand and Git hooks are often frustrating difficult
to debug. Add onto this the different operating systems and versions of those systems on top
of that, and you can quickly get into nightmare territory for maintaining a Git hook.&lt;/p&gt;
&lt;p&gt;To solve most of these problems, the team decided to use the
&lt;a href="https://pre-commit.com/"&gt;Pre-Commit&lt;/a&gt;
Python package which provides a simple layer of abstraction over the Git hooks. The Pre-commit
package makes managing, sharing and updating the Git hooks very easy. As it installs itself as
a Git hook, once you have installed it properly, you may easily confuse it as a part of Git’s
commit process.&lt;/p&gt;
&lt;h2 id="why-use-pre-commit-locally"&gt;Why Use Pre-commit Locally?&lt;a class="headerlink" href="#why-use-pre-commit-locally" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Pre-commit runs Git hooks that among other things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Run &lt;a href="https://github.com/prettier/prettier"&gt;Prettier&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;applies common styling for Markdown, &lt;span class="caps"&gt;CSS&lt;/span&gt;, &lt;span class="caps"&gt;JS&lt;/span&gt; and json files&lt;/li&gt;
&lt;li&gt;Run &lt;a href="https://github.com/python/black"&gt;Black&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;applies common styling for Python files&lt;/li&gt;
&lt;li&gt;Removes trailing whitespace on lines&lt;/li&gt;
&lt;li&gt;Fixes the end of files to a common style&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Addressing any failures reported by these hooks locally will result in a smaller turn around
time in getting those issues addressed. This in turn will save time when submitting changes
in a Pull Request, as you have already dealt with any errors that this tool may report.&lt;/p&gt;
&lt;h2 id="how-do-i-install-it"&gt;How Do I Install It?&lt;a class="headerlink" href="#how-do-i-install-it" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The package itself is installed in typical Python fashion by using the Pip command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install pre-commit
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once installed in your environment, you can install the Git hooks for your local repository
by changing your directory to the root of that repository and executing the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pre-commit install
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="how-do-i-use-it-locally"&gt;How Do I Use It Locally?&lt;a class="headerlink" href="#how-do-i-use-it-locally" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Once installed, Pre-commit appears to be part of the Git commit process. When you perform
your next &lt;code&gt;git commit&lt;/code&gt; command (including using the &lt;code&gt;git-cz&lt;/code&gt; command for the
&lt;a href="https://dvesti.github.io/Pelican/2019/07/22/use-commitizen-for-git-commits/"&gt;Commitizen tool&lt;/a&gt;), the Pre-commit package will download any tools
it requires to properly run any required hooks. These tools are cached, so you will typically
only experience a long wait on the first time the Pre-commit package is executed.&lt;/p&gt;
&lt;p&gt;If the hooks run by the Pre-commit package fail for some reason, they will clearly notify
you of which of the hooks failed and typically present you with a reason why the hook failed.
Note that some of the hooks, such as the &lt;code&gt;prettier&lt;/code&gt; hook, may make some changes to your
files to bring them in line with the project’s common style. If any changes occur, they
will not be staged to your local repository, making any changes visible using the &lt;code&gt;git status&lt;/code&gt;
command.&lt;/p&gt;
&lt;p&gt;If the hook failed due to an error, you need to fix that error before it will allow you to
continue. If the hook failed because it made a change, make sure to verify the change that
was made for you, after making sure it will not have a negative effect on your changes. It
is then your responsibility to stage all changes to the repository before committing the
change again.&lt;/p&gt;
&lt;div class="admonition warning"&gt;
&lt;p class="admonition-title"&gt;For Windows Users&lt;/p&gt;
&lt;p&gt;If you run these checks on Windows, the &lt;code&gt;check-executables-have-shebangs&lt;/code&gt; hook will fail as Windows does not require that executable files start with a &lt;a href="shebang"&gt;shebang&lt;/a&gt; and all files implicitly have the &lt;code&gt;execute&lt;/code&gt; or &lt;code&gt;+x&lt;/code&gt; permission for Linux.&lt;/p&gt;
&lt;p&gt;To skip this check, enter &lt;code&gt;set SKIP=check-executables-have-shebangs&lt;/code&gt; on the command line before you execute the Pre-commit package, either from a Git hook as detailed above, or manually, as detail in the following section.&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id="can-i-run-the-hooks-without-a-commit"&gt;Can I Run The Hooks Without a Commit?&lt;a class="headerlink" href="#can-i-run-the-hooks-without-a-commit" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The full set of hooks are available by entering the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pre-commit run -a
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will run the full set of hooks and report any errors. It is often useful to run this
command before committing, even if you are using
&lt;a href="./commitizien.md"&gt;Commitizen&lt;/a&gt;
for your commits as is recommended.&lt;/p&gt;
&lt;h2 id="how-does-the-project-run-the-hooks-for-submissions"&gt;How Does The Project Run the Hooks For Submissions?&lt;a class="headerlink" href="#how-does-the-project-run-the-hooks-for-submissions" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The Elegant team fully believes in the Git hooks and their benefit to the team. As such, the
Pre-commit package is executed on all of our team builds (using Travis &lt;span class="caps"&gt;CI&lt;/span&gt;) for any commits and
pull requests made on the Travis &lt;span class="caps"&gt;CI&lt;/span&gt; servers. For more information on how we use Travis &lt;span class="caps"&gt;CI&lt;/span&gt; to
build the project, check out the article on
&lt;a href="./travis-ci-and-doc-website.md"&gt;Elegant and Travis &lt;span class="caps"&gt;CI&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;</content><category term="Contributing"></category></entry><entry><title>Elegant Logo</title><link href="https://dvesti.github.io/Pelican/2019/07/22/elegant-logo/" rel="alternate"></link><published>2019-07-22T21:17:00+03:00</published><updated>2019-07-22T21:17:00+03:00</updated><author><name>Talha Mansoor</name></author><id>tag:dvesti.github.io,2019-07-22:/Pelican/2019/07/22/elegant-logo/</id><summary type="html">&lt;p&gt;This article provides details on how the current Elegant logo was&amp;nbsp;created.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Elegant community held a &lt;a href="https://github.com/Pelican-Elegant/elegant/issues/190"&gt;discussion&lt;/a&gt; to decide a Logo for the project. We settled on following icon from
&lt;a href="https://thenounproject.com/search/?q=pelican&amp;amp;i=2213839"&gt;Pelican by Smalllike from the Noun Project&lt;/a&gt; &lt;!-- yaspeller ignore --&gt;
.&lt;/p&gt;
&lt;p&gt;&lt;svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 64 80" x="0px" y="0px" width="250" height="250"&gt;&lt;g&gt;&lt;path d="M39,25H24V20H35A11.013,11.013,0,0,0,46,9V3a1,1,0,0,0-1-1H19a5.006,5.006,0,0,0-5,5V38A11.013,11.013,0,0,0,25,49h4v7H27a3,3,0,0,0,0,6H37a3,3,0,0,0,0-6H35V49H50V36A11.013,11.013,0,0,0,39,25Zm0,2a8.953,8.953,0,0,1,5.644,2H35v2H46.478a8.962,8.962,0,0,1,1,2H39v2h8.941A8.935,8.935,0,0,1,48,36v1H44v2h4v2H29a3,3,0,0,1-3-3V27Zm-4-9H24V10H43.941A9.01,9.01,0,0,1,35,18ZM24,4H44V8H24ZM16,7a3,3,0,0,1,3-3h3V25H16ZM37,58a1,1,0,0,1,0,2H27a1,1,0,0,1,0-2Zm-4-2H31V49h2Zm15-9H25a9.01,9.01,0,0,1-9-9V27h2v7h2V27h4V38a5.006,5.006,0,0,0,5,5H48Z"/&gt;&lt;rect x="18" y="36" width="2" height="2"/&gt;&lt;circle cx="20.5" cy="7.5" r="1.5"/&gt;&lt;/g&gt;&lt;text x="0" y="79" fill="#000000" font-size="5px" font-weight="bold" font-family="'Helvetica Neue', Helvetica, Arial-Unicode, Arial, Sans-serif"&gt;Created by Smalllike&lt;/text&gt;&lt;text x="0" y="84" fill="#000000" font-size="5px" font-weight="bold" font-family="'Helvetica Neue', Helvetica, Arial-Unicode, Arial, Sans-serif"&gt;from the Noun Project&lt;/text&gt;&lt;/svg&gt; &lt;!-- yaspeller ignore --&gt;&lt;/p&gt;
&lt;p&gt;Building on top of it, some modifications were made to it using
&lt;a href="https://inkscape.org/"&gt;Inkscape&lt;/a&gt; &lt;!-- yaspeller ignore --&gt;
.&lt;/p&gt;
&lt;p&gt;&lt;svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 67 67" width="250" height="250"&gt;
    &lt;rect width="57.681" height="62.899" x="2.802" y="-11.841" ry="0" fill="none"/&gt;
    &lt;rect width="65.83" height="65.83" x=".585" y=".585" ry="2.398" fill="none" stroke="maroon" stroke-width="1.17"/&gt;
    &lt;g transform="translate(2.518 1.626)"&gt;
        &lt;path d="M39 25H24v-5h11A11.013 11.013 0 0046 9V3a1 1 0 00-1-1H19a5.006 5.006 0 00-5 5v31a11.013 11.013 0 0011 11h4v7h-2a3 3 0 000 6h10a3 3 0 000-6h-2v-7h15V36a11.013 11.013 0 00-11-11zm0 2a8.953 8.953 0 015.644 2H35v2h11.478a8.962 8.962 0 011 2H39v2h8.941A8.935 8.935 0 0148 36v1h-4v2h4v2H29a3 3 0 01-3-3V27zm-4-9H24v-8h19.941A9.01 9.01 0 0135 18zM24 4h20v4H24zm-8 3a3 3 0 013-3h3v21h-6zm21 51a1 1 0 010 2H27a1 1 0 010-2zm-4-2h-2v-7h2zm15-9H25a9.01 9.01 0 01-9-9V27h2v7h2v-7h4v11a5.006 5.006 0 005 5h19z" fill="#8b0000"/&gt;
        &lt;path d="M18 36h2v2h-2z"/&gt;
        &lt;circle cx="20.5" cy="7.5" r="1.5"/&gt;
    &lt;/g&gt;
    &lt;path d="M26.437 7.605V5.578H46.54v4.055H26.437z" fill="#f60"/&gt;
    &lt;path d="M26.437 15.625v-4.066h20.08l-.142.768c-.295 1.594-1.123 3.188-2.318 4.465a9.294 9.294 0 01-4.3 2.613c-.763.216-.916.221-7.05.253l-6.27.033z" fill="#fc0"/&gt;
    &lt;path d="M31.034 42.573c-1.137-.164-2.058-.933-2.45-2.043l-.124-.353-.012-5.77-.012-5.768h6.68c4.323 0 6.854.016 7.173.045 1.68.152 3.39.8 4.668 1.766l.19.144h-9.66v2.04h11.572l.194.308c.195.31.661 1.251.747 1.508l.047.138h-8.53v2.04h4.499c4.244 0 4.5.004 4.527.074.016.041.04.49.054 1l.025.923h-4.044v2.04h4.031v1.955l-9.66-.005c-5.312-.003-9.774-.022-9.915-.042z" stroke="maroon" stroke-width=".043"/&gt;
    &lt;path d="M33.553 54.137v-3.485h1.955v6.969h-1.955zm-4.31 7.426c-.228-.06-.596-.423-.658-.648a.893.893 0 01.054-.682c.107-.229.303-.421.525-.514.112-.047 1.071-.058 5.355-.057 4.97.001 5.226.005 5.387.08.647.296.778 1.177.241 1.62-.32.265-.08.255-5.656.25-3.352-.003-5.138-.02-5.248-.049z" fill="#f60" stroke="maroon" stroke-width=".042"/&gt;
    &lt;path d="M2.306 65.641c-.368-.16-.7-.478-.918-.882l-.174-.324V2.614l.19-.387a1.83 1.83 0 011.044-.914c.452-.161 61.652-.161 62.104 0a1.83 1.83 0 011.044.914l.19.387v61.82l-.174.325c-.223.413-.554.726-.936.885-.27.113-3.443.126-31.194.123-27.422-.003-30.924-.017-31.176-.126zm38.526-2.277c.607-.297 1.086-.772 1.422-1.41.21-.398.228-.502.228-1.322 0-.773-.026-.941-.193-1.277a3.304 3.304 0 00-1.449-1.452c-.534-.263-.55-.265-1.896-.292l-1.358-.027v-6.946h14.977l-.028-7.262c-.027-7.004-.034-7.288-.196-7.99-.505-2.194-1.441-3.938-2.97-5.53-1.094-1.14-3.132-2.357-4.7-2.805-1.558-.445-1.538-.445-10.137-.445h-7.95v-4.928l6.21-.03c5.931-.028 6.243-.036 6.939-.196 3.94-.906 7.003-3.602 8.222-7.24.529-1.58.568-1.944.614-5.791.024-1.924.017-3.67-.014-3.88a1.042 1.042 0 00-.325-.648l-.268-.268H34.35c-15.082 0-14.013-.037-15.144.532-.707.356-1.604 1.2-2.01 1.89a6.506 6.506 0 00-.5 1.139l-.189.606V40.97l.183.824c.489 2.207 1.435 3.997 2.914 5.511 1.509 1.546 3.359 2.587 5.521 3.11.607.146 1.021.17 3.54.202l2.853.037v6.931l-1.396.027c-1.313.025-1.423.04-1.855.242-1.7.797-2.304 2.958-1.254 4.489.357.521.954.967 1.551 1.16.464.15.736.157 6.11.14l5.623-.016z" fill="#fff" stroke="#fff" stroke-width=".08093600000000001"/&gt;
    &lt;path d="M26.5 48.525c-1.283-.147-2.925-.767-4.049-1.53-1.516-1.03-2.8-2.727-3.402-4.497-.47-1.38-.478-1.525-.478-7.973V28.63h1.942v7.04H22.536v-7.04H26.5v5.846c.002 6.462-.004 6.38.519 7.404.604 1.186 1.532 2.001 2.87 2.522l.535.209 10.014.022 10.013.022V48.615l-11.672-.01c-6.42-.006-11.946-.042-12.28-.08zm-3.964-9.903v-1.011H20.513V39.634H22.536zM18.57 17.394c0-10.175-.029-9.59.525-10.425.316-.475.804-.863 1.403-1.115.329-.138.616-.163 2.18-.19l1.8-.03v1.342c0 .739-.033 1.342-.072 1.342-.04 0-.128-.087-.198-.193-.214-.326-.805-.56-1.308-.518-1.841.153-1.884 2.863-.048 3.039.513.05.9-.085 1.234-.429.148-.153.298-.279.331-.28.033 0 .06 3.75.06 8.334v8.335h-5.906z" fill="#fff" stroke="#fff" stroke-width=".08093600000000001"/&gt;
&lt;/svg&gt;&lt;/p&gt;
&lt;p&gt;The we cleaned it using
&lt;a href="https://github.com/svg/svgo"&gt;svgo&lt;/a&gt; &lt;!-- yaspeller ignore --&gt;
tool. It reduced file size by around&amp;nbsp;50%.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ svgo -i elegant_logo.svg --pretty

elegant_logo.svg:
Done &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="m"&gt;80&lt;/span&gt; ms!
&lt;span class="m"&gt;8&lt;/span&gt;.029 KiB - &lt;span class="m"&gt;52&lt;/span&gt;.5% &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;.815 KiB
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then, we converted &lt;span class="caps"&gt;SVG&lt;/span&gt; to &lt;span class="caps"&gt;PNG&lt;/span&gt; using
&lt;a href="https://github.com/shakiba/svgexport"&gt;svgexport&lt;/a&gt; &lt;!-- yaspeller ignore --&gt;
.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ svgexport elegant_logo.svg elegant_logo.png &lt;span class="m"&gt;100&lt;/span&gt;%
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The resultant file was around &lt;span class="caps"&gt;1MB&lt;/span&gt; is size. So we optimized it using
&lt;a href="https://imageoptim.com/mac"&gt;ImageOptim&lt;/a&gt; &lt;!-- yaspeller ignore --&gt;
, which reduced the file size by&amp;nbsp;98%.&lt;/p&gt;
&lt;p&gt;Your can download the files from our Git&amp;nbsp;repository.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/Pelican-Elegant/elegant/tree/master/elegant-logo"&gt;https://github.com/Pelican-Elegant/elegant/tree/master/elegant-logo&lt;/a&gt;&lt;/p&gt;</content><category term="Contributing"></category></entry><entry><title>How To Use Commitizen for Git Commits</title><link href="https://dvesti.github.io/Pelican/2019/07/22/use-commitizen-for-git-commits/" rel="alternate"></link><published>2019-07-22T14:15:00+03:00</published><updated>2019-07-22T14:15:00+03:00</updated><author><name>Talha Mansoor</name></author><id>tag:dvesti.github.io,2019-07-22:/Pelican/2019/07/22/use-commitizen-for-git-commits/</id><summary type="html">&lt;p&gt;Elegant uses the Commitizen tool to standardize Git commit messages across the&amp;nbsp;project.&lt;/p&gt;</summary><content type="html">
&lt;p&gt;The &lt;a href="https://dvesti.github.io/Pelican/2019/08/04/how-to-contribute/"&gt;Elegant Contribution Guidelines&lt;/a&gt; require that
each commit submitted for consideration be formatted according to the
&lt;a href="https://dvesti.github.io/Pelican/2019/07/20/git-commit-guidelines/"&gt;Git Commit Guidelines&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To make this process easier, the Elegant repository is configured to support the
&lt;a href="https://github.com/commitizen/cz-cli"&gt;Commitizen&lt;/a&gt; tool. This tool saves time by controlling
the format of the Git commit messages to a set of predefined options and patterns. This
formatting allows for our release process to be
&lt;a href="https://dvesti.github.io/Pelican/2019/07/20/fully-automated-version-management-and-release/"&gt;fully automated&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="prerequisites"&gt;Prerequisites&lt;a class="headerlink" href="#prerequisites" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Both &lt;a href="https://nodejs.org/en/download/"&gt;Node.js&lt;/a&gt; and &lt;a href="https://yarnpkg.com/en/docs/install"&gt;Yarn&lt;/a&gt;
must be installed on your system.&lt;/p&gt;
&lt;h3 id="install-commitizen"&gt;Install Commitizen&lt;a class="headerlink" href="#install-commitizen" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;From your command line terminal, go into the directory containing your fork of the Elegant
repository, then execute the following commands:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yarn global add commitizen
yarn install
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="use-commitizen"&gt;Use Commitizen&lt;a class="headerlink" href="#use-commitizen" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As the Elegant team has already made the repository
&lt;a href="https://github.com/commitizen/cz-cli#making-your-repo-commitizen-friendly"&gt;Commitizen friendly&lt;/a&gt;,
you can start using it for your commits by entering &lt;code&gt;git-cz&lt;/code&gt; in your command shell instead
of &lt;code&gt;git commit&lt;/code&gt;. Make sure the changes that you want to commit to your fork are staged.&lt;/p&gt;
&lt;p&gt;Once invoked, Commitizen will prompt you for answers to a number of questions. As mentioned
previously, the answers to these questions are formatted according to the
&lt;a href="https://dvesti.github.io/Pelican/2019/07/20/git-commit-guidelines/"&gt;Git Commit Guidelines&lt;/a&gt;
before being placed into the message field for the commit. Commitizen then follows through and
invokes &lt;code&gt;git commit&lt;/code&gt;, committing the staged changes along with the formatted message that was
crafted for you from the answers you provided.&lt;/p&gt;
&lt;p&gt;In some cases, such as a &lt;a href="https://dvesti.github.io/Pelican/2019/07/22/use-pre-commit-git-hooks/"&gt;Git pre-commit hook failure&lt;/a&gt;, you may
not want to re-answer the questions again. Once you fix the issues that prevented the
commit from happening, you can use &lt;code&gt;git-cz --retry&lt;/code&gt; to submit the commit again using the same
answers that were used in the failed attempt.&lt;/p&gt;
&lt;h2 id="video-demonstration"&gt;Video Demonstration&lt;a class="headerlink" href="#video-demonstration" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For a quick video on how this process works in real life, click on the play button below.&lt;/p&gt;
&lt;script async="" id="asciicast-258540" src="https://asciinema.org/a/258540.js"&gt;&lt;/script&gt;</content><category term="Contributing"></category></entry><entry><title>Automated Version Management and Release</title><link href="https://dvesti.github.io/Pelican/2019/07/20/fully-automated-version-management-and-release/" rel="alternate"></link><published>2019-07-20T23:17:00+03:00</published><updated>2019-07-20T23:17:00+03:00</updated><author><name>Talha Mansoor</name></author><id>tag:dvesti.github.io,2019-07-20:/Pelican/2019/07/20/fully-automated-version-management-and-release/</id><summary type="html">&lt;p&gt;Elegant utilizes a &amp;#8216;release early, release often&amp;#8217; philosophy that embraces a fully automated release&amp;nbsp;process.&lt;/p&gt;</summary><content type="html">
&lt;p&gt;The Elegant project follows a “release early, release often” software development philosophy.
By employing this philosophy, we are able to have each team member working on a different
aspect of the project with next to no friction from each other’s changes. At any point, any
team member can pull changes that have been made in another branch to their fork of the
repository and exercise their changes with complete confidence.&lt;/p&gt;
&lt;p&gt;Release process should be fully automated to materialize this goal.&lt;/p&gt;
&lt;h2 id="release-versions"&gt;Release Versions&lt;a class="headerlink" href="#release-versions" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Version management and publishing is accomplished using the
&lt;a href="https://github.com/semantic-release/semantic-release"&gt;semantic-release&lt;/a&gt; tool and it’s
&lt;a href="https://github.com/Pelican-Elegant/elegant/blob/master/.releaserc.json"&gt;configuration file&lt;/a&gt;.
This tool entirely removes human intervention from deciding the type and label of the next release of the project.&lt;/p&gt;
&lt;h3 id="how-does-versioning-work"&gt;How Does Versioning Work?&lt;a class="headerlink" href="#how-does-versioning-work" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Semantic release bases it’s decisions on the
&lt;a href="https://semver.org/"&gt;Semantic Versioning 2.0.0 specification&lt;/a&gt;, which is very specific.&lt;/p&gt;
&lt;p&gt;A quick summary is as follows. Each version is detailed in the form: &lt;code&gt;MAJOR.MINOR.PATCH&lt;/code&gt;.
The &lt;strong&gt;&lt;span class="caps"&gt;PATCH&lt;/span&gt;&lt;/strong&gt; version is incremented when only backwards compatible bug fixes are made in the
release. The &lt;strong&gt;&lt;span class="caps"&gt;MINOR&lt;/span&gt;&lt;/strong&gt; version is incremented (and &lt;strong&gt;&lt;span class="caps"&gt;PATCH&lt;/span&gt;&lt;/strong&gt; reset to 0) when functionality
is added in a backwards compatible manner to the release, along with any backwards compatible
bug fixes. The &lt;strong&gt;&lt;span class="caps"&gt;MAJOR&lt;/span&gt;&lt;/strong&gt; version is incremented (and &lt;strong&gt;&lt;span class="caps"&gt;MINOR&lt;/span&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;span class="caps"&gt;PATCH&lt;/span&gt;&lt;/strong&gt; reset to 0) when
incompatible &lt;span class="caps"&gt;API&lt;/span&gt; changes are introduced, along with any backwards compatible features or fixes.&lt;/p&gt;
&lt;p&gt;Here are some examples of release types that are generated based on commit messages:&lt;/p&gt;
&lt;!-- yaspeller ignore:start --&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Commit Message&lt;/th&gt;
&lt;th&gt;Release Type&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;fix(pencil): stop graphite breaking when too much pressure applied&lt;/td&gt;
&lt;td&gt;Patch Release&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;feat(pencil): add ‘graphiteWidth’ option&lt;/td&gt;
&lt;td&gt;Minor Feature Release&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;perf(pencil): remove graphiteWidth option&lt;br/&gt;&lt;br/&gt;&lt;span class="caps"&gt;BREAKING&lt;/span&gt; &lt;span class="caps"&gt;CHANGE&lt;/span&gt;: The graphiteWidth option has been removed.&lt;br/&gt;The default graphite width of 10mm is always used for performance reasons.&lt;/td&gt;
&lt;td&gt;Major Breaking Release&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;!-- yaspeller ignore:end --&gt;
&lt;p&gt;Note that the release type is specified as if that commit was the only commit in the release.
If the first two commits were put together in the release, the &lt;code&gt;Minor Feature Release&lt;/code&gt; of the
second commit would take precedence over the &lt;code&gt;Patch Release&lt;/code&gt; of the first commit. In the same
manner, the &lt;code&gt;Major Breaking Release&lt;/code&gt; of the third commit would take precedence if all three
commits were submitted in the same release.&lt;/p&gt;
&lt;h2 id="changelog-file-updates"&gt;&lt;span class="caps"&gt;CHANGELOG&lt;/span&gt; File Updates&lt;a class="headerlink" href="#changelog-file-updates" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;An integral part of the release is updating the
&lt;a href="https://github.com/Pelican-Elegant/elegant/blob/master/CHANGELOG.md"&gt;&lt;span class="caps"&gt;CHANGELOG&lt;/span&gt;&lt;/a&gt;.
By mandating that any commits for the project follow a
&lt;a href="https://dvesti.github.io/Pelican/2019/07/20/git-commit-guidelines/"&gt;mandated format for the commit messages&lt;/a&gt;,
the commits being added to the release can have their commit messages scanned by a tool,
including relevant portions into the release notes. This too is done automatically.&lt;/p&gt;
&lt;h3 id="example-of-an-automated-release"&gt;Example of an Automated Release&lt;a class="headerlink" href="#example-of-an-automated-release" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Here is an example of an automated release. This is the
&lt;a href="https://github.com/Pelican-Elegant/elegant/releases/tag/V3.2.0"&gt;Version 3.2.0&lt;/a&gt; that
was released on 30-Jul-2019. The specifics about the release can be obtained by clicking
on the 7 digit hexadecimal number below the version tag on the left side of the page, which
will take you to the &lt;a href="https://github.com/Pelican-Elegant/elegant/commit/48f39643edd6c3b7449af5dae8ade6323bc7c21f"&gt;release commit&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="automated release" src="https://dvesti.github.io/Pelican/images/automated-release.png"/&gt;&lt;/p&gt;
&lt;p&gt;This release can also be viewed by performing a &lt;code&gt;git log --grep=chore(release)&lt;/code&gt; command and
looking for the specific release information in the logs. You can then view the specific
information for that commit by using the &lt;code&gt;git show&lt;/code&gt; command with the hash for the release’s
commit, &lt;code&gt;git show 48f39643edd6c3b7449af5dae8ade6323bc7c21f&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Using either process, the result will look like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;commit 48f39643edd6c3b7449af5dae8ade6323bc7c21f
Author: semantic-release-bot &amp;lt;semantic-release-bot@martynus.net&amp;gt;
Date:   Tue Jul 30 19:56:10 2019 +0000

    chore(release): 3.2.0 [skip ci]

    # [3.2.0](https://github.com/Pelican-Elegant/elegant/compare/V3.1.0...V3.2.0) (2019-07-30)

    ### Bug Fixes

    * **freelists:** open FreeLists subscription form in a new tab ([f81657c](https://github.com/Pelican-Elegant/elegant/commit/f81657c))
    * **freelists:** replace deprecated subscription form with button ([9bfe3c1](https://github.com/Pelican-Elegant/elegant/commit/9bfe3c1)), closes [#412](https://github.com/Pelican-Elegant/elegant/issues/412)
    * **freelists:** rm unused include ([27f0831](https://github.com/Pelican-Elegant/elegant/commit/27f0831))

    ### Features

    * **comments:** reduce transition duration from 500 to 200 ([b86e13d](https://github.com/Pelican-Elegant/elegant/commit/b86e13d))
    * **favicon:** add 180x180 dimension shortcut icon support ([dd2ed24](https://github.com/Pelican-Elegant/elegant/commit/dd2ed24))
    * **filter:** add black list, white list feature for Disqus ([4887aec](https://github.com/Pelican-Elegant/elegant/commit/4887aec))
    * **filter:** add black list, white list feature for FreeLists ([2407cc8](https://github.com/Pelican-Elegant/elegant/commit/2407cc8))
    * **filter:** add black list, white list feature for Mailchimp ([b96122d](https://github.com/Pelican-Elegant/elegant/commit/b96122d))
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the main body of the output, there are links with associated text which are 7 digit
hexadecimal numbers. Each of these links is to a specific commit that was part of the
release. If you follow the link, you can verify that the correct text is being used for the
release notes.&lt;/p&gt;
&lt;p&gt;Additionally, there are links that are associated with text that starts with the &lt;code&gt;#&lt;/code&gt;
character followed by an integer. Each of these links is to an issue that was either updated or
fixed by the given commit. As with the above paragraph, you can verify that the correct
issue was associated with the commit in the release notes by following the commit links and
looking for any issue number at the end of the commit text.&lt;/p&gt;
&lt;p&gt;As the commits added in to this release included features, the &lt;code&gt;Minor Feature Release&lt;/code&gt; release
type was used, incrementing the minor part of the version number from 3.1.0 to 3.2.0.&lt;/p&gt;</content><category term="Contributing"></category></entry><entry><title>Git Commit Guidelines</title><link href="https://dvesti.github.io/Pelican/2019/07/20/git-commit-guidelines/" rel="alternate"></link><published>2019-07-20T23:17:00+03:00</published><updated>2019-07-20T23:17:00+03:00</updated><author><name>Talha Mansoor</name></author><id>tag:dvesti.github.io,2019-07-20:/Pelican/2019/07/20/git-commit-guidelines/</id><summary type="html">&lt;p&gt;Elegant has a mandatory Git commit message format that is described&amp;nbsp;here.&lt;/p&gt;</summary><content type="html">
&lt;p&gt;The Elegant release process is &lt;a href="https://dvesti.github.io/Pelican/2019/07/20/fully-automated-version-management-and-release/"&gt;fully automated&lt;/a&gt;. To make
this work, all commit message must adhere to a given set of rules.&lt;/p&gt;
&lt;h2 id="why-have-commit-message-rules"&gt;Why Have Commit Message Rules?&lt;a class="headerlink" href="#why-have-commit-message-rules" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;From the &lt;a href="https://github.com/semantic-release/semantic-release#commit-message-format"&gt;semantic-release project&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;semantic-release uses the commit messages to determine the type of changes in the codebase. Following formalized conventions for commit messages, semantic-release automatically determines the next semantic version number, generates a changelog and publishes the release.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;What does that mean? It means that semantic-release parses the commit messages to arrive
at a unbiased version number for a new release, and then creates that new release. This
allows for a new release to be put together with little human involvement.&lt;/p&gt;
&lt;h2 id="what-are-those-rules"&gt;What are those rules?&lt;a class="headerlink" href="#what-are-those-rules" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The Elegant development team chose to use the
&lt;a href="https://github.com/angular/angular.js/blob/master/DEVELOPERS.md#-git-commit-guidelines"&gt;Angular Commit Message Conventions&lt;/a&gt;
as the baseline for the team’s commit message conventions.&lt;/p&gt;
&lt;p&gt;Our conventions are largely derived from the Angular team’s guidelines
&lt;a href="https://gist.github.com/stephenparish/9941e89d80e2bc58a153"&gt;as documented here&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="is-there-something-to-help-me-with-the-rules"&gt;Is There Something to Help Me With The Rules?&lt;a class="headerlink" href="#is-there-something-to-help-me-with-the-rules" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Reading, understanding, and then getting used to following guidelines may take time. Even
then, if you are in a hurry, you can sometimes forget what the rules are. It’s only human.&lt;/p&gt;
&lt;p&gt;Our team has found life easier since we started using
&lt;a href="https://dvesti.github.io/Pelican/2019/07/22/use-commitizen-for-git-commits/"&gt;Commitizen for Git commits&lt;/a&gt;.
Our project includes configuration for Commitizen that automatically formats each commit
message to conform to our guidelines by walking you through a series of prompts. When you
finish those prompts, a new commit messages is authored for you with the information from those
prompts, following all of the rules in the following sections on the Commit Message Format.&lt;/p&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="admonition-title"&gt;Tip&lt;/p&gt;
&lt;p&gt;&lt;a href="https://dvesti.github.io/Pelican/2019/07/22/use-commitizen-for-git-commits/"&gt;Use Commitizen for Git commits&lt;/a&gt;.  It does make life easier.   It automatically formats the commit message to conform to our guidelines.&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id="commit-message-format"&gt;Commit Message Format&lt;a class="headerlink" href="#commit-message-format" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Each line of the commit message must be shorter than 101 characters! This allows the message
to be easier to read on GitHub as well as in various git tools.&lt;/p&gt;
&lt;p&gt;Each commit message consists of a &lt;strong&gt;header&lt;/strong&gt;, a &lt;strong&gt;body&lt;/strong&gt; and a &lt;strong&gt;footer&lt;/strong&gt;, as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;header&amp;gt;
&amp;lt;BLANK LINE&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;BLANK LINE&amp;gt;
&amp;lt;footer&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="header"&gt;Header&lt;a class="headerlink" href="#header" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The header is mandatory. It has a special format that includes a required &lt;strong&gt;type&lt;/strong&gt;, an
optional &lt;strong&gt;scope&lt;/strong&gt; and a required &lt;strong&gt;subject&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;type&amp;gt;(&amp;lt;scope&amp;gt;): &amp;lt;subject&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="type"&gt;Type&lt;a class="headerlink" href="#type" title="Permanent link"&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The type must be one of the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;feat&lt;/strong&gt;: A new feature&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;fix&lt;/strong&gt;: A bug fix&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;docs&lt;/strong&gt;: Documentation only changes&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;style&lt;/strong&gt;: Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc.)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;refactor&lt;/strong&gt;: A code change that neither fixes a bug nor adds a feature&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;perf&lt;/strong&gt;: A code change that improves performance &lt;!-- yaspeller ignore --&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;test&lt;/strong&gt;: Adding missing or correcting existing tests&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;chore&lt;/strong&gt;: Changes to the build process or auxiliary tools and libraries such as documentation generation&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;revert&lt;/strong&gt;: A revert to a previous commit. See the section &lt;a href="#revert-commits"&gt;Revert Commits&lt;/a&gt; below.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="scope"&gt;Scope&lt;a class="headerlink" href="#scope" title="Permanent link"&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The scope is intended to provide extra context on the changes included in the commit is for.
This context should provide useful information to someone reading the commit log, including
the reading of the commit log in the release notes.&lt;/p&gt;
&lt;p&gt;For example, if you fix something in the
&lt;a href="https://dvesti.github.io/Pelican/2018/12/07/adding-author-blurbs/"&gt;authors blurb&lt;/a&gt; section, a scope of &lt;code&gt;authors&lt;/code&gt; would be appropriate. If you are changing something with how the
&lt;a href="https://dvesti.github.io/Pelican/2019/07/01/unique-home-page-features/"&gt;landing page&lt;/a&gt;
works, a scope of &lt;code&gt;landing page&lt;/code&gt; or &lt;code&gt;home&lt;/code&gt; would be appropriate.&lt;/p&gt;
&lt;h4 id="subject"&gt;Subject&lt;a class="headerlink" href="#subject" title="Permanent link"&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The subject part of the header must follow these rules:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;always use the imperative, present tense: “change” not “changed”, “changes”, or “changing”&lt;/li&gt;
&lt;li&gt;do not capitalize the first letter&lt;/li&gt;
&lt;li&gt;no period (&lt;code&gt;.&lt;/code&gt;) at the end of the line&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id="what-is-imperative-mode"&gt;What is Imperative mode?&lt;a class="headerlink" href="#what-is-imperative-mode" title="Permanent link"&gt; &lt;/a&gt;&lt;/h5&gt;
&lt;p&gt;Chris Beams, in his article on
&lt;a href="https://chris.beams.io/posts/git-commit/#imperative"&gt;how to write a good commit message&lt;/a&gt;,
gives a very good explanation of imperative mode.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Imperative mood just means “spoken or written as if giving a command or instruction”. A few examples:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Clean your room&lt;/li&gt;
&lt;li&gt;Close the door&lt;/li&gt;
&lt;li&gt;Take out the trash&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The imperative can sound a little rude; that’s why we don’t often use it. But it’s perfect for Git commit subject lines.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id="revert-commits"&gt;Revert Commits&lt;a class="headerlink" href="#revert-commits" title="Permanent link"&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;If the commit reverts a previous commit, it must be specified with the &lt;code&gt;revert&lt;/code&gt; type, followed
by the complete header of the reverted commit as the subject. The body of the commit must
start with the text: &lt;code&gt;This reverts commit &amp;lt;hash&amp;gt;.&lt;/code&gt;, where the hash is the &lt;span class="caps"&gt;SHA&lt;/span&gt; of the commit
being reverted.&lt;/p&gt;
&lt;h3 id="body"&gt;Body&lt;a class="headerlink" href="#body" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The body of the commit message must follow these rules:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;always use the imperative, present tense: “change” not “changed”, “changes”, or “changing”&lt;/li&gt;
&lt;li&gt;include your motivation for the change and how it contrasts with the previous behavior&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="breaking-changes"&gt;Breaking changes&lt;a class="headerlink" href="#breaking-changes" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;All breaking changes have to be mentioned in the body with the description of the change,
justification and migration notes. The body must be prefixed with the text &lt;code&gt;BREAKING CHANGE:&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The following example is from the
&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/9b5b2eca2a34a5d9898173a8118cb5e37621dfd5"&gt;Elegant project repository&lt;/a&gt;.
After the required prefix, it describes the problem it is solving, and why it was needed.
In retrospect, while it does mention that &lt;code&gt;LANDING_PAGE_ABOUT&lt;/code&gt; is no longer used, it should
have gone into more detail on where to look up information on what was replacing it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;feat(home): write about me in markdown, reST or asciidoc

BREAKING CHANGE: Previously LANDING_PAGE_ABOUT was a dictionary that contained html tags. We used it
to create landing page. But users have demanded from the very beginning to be able to write the
landing page in markdown. This patch adds this feature. But in order to use it, you have to update
your configuration.

Closes #85
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="footer"&gt;Footer&lt;a class="headerlink" href="#footer" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;h4 id="referencing-issues"&gt;Referencing issues&lt;a class="headerlink" href="#referencing-issues" title="Permanent link"&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Closed bugs should be listed on a separate line in the footer prefixed with the &lt;code&gt;Closes&lt;/code&gt;
keyword.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Closes #234
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If your commit closes multiple issues, list them on the same line separated by a comma.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Closes #123, #245, #992
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If your commit affects an issue, but does not fix it completely, use the “Updates” keyword&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Updates #234
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="correct-message-format-examples"&gt;Correct Message Format Examples&lt;a class="headerlink" href="#correct-message-format-examples" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The following are commits from our own repository that shows how Elegant has used these guidelines.&lt;/p&gt;
&lt;h3 id="new-features"&gt;New Features&lt;a class="headerlink" href="#new-features" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;feat(monetization): add BestAzon support
feat(Chinese): add better font support for Chinese language
feat(footer): make external links Nofollow
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="fixes"&gt;Fixes&lt;a class="headerlink" href="#fixes" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;fix(reST): indents in line blocks is not preserved
fix(gist): embedded Github gist are not laid out correctly
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="documentation"&gt;Documentation&lt;a class="headerlink" href="#documentation" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docs(add): metadata variables
docs(add): release notes for 3.0.0
docs(update): change category of reading-time article
docs(update): set author information
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="miscellaneous"&gt;Miscellaneous&lt;a class="headerlink" href="#miscellaneous" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;chore(livereload): use es2015 syntax for gulp configuration
ci(docs): use sitemap plugin in production only
ci(docs): add default tasks.py file
refactor: move Google and Bing claims to their individual files
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="incorrect-message-format-examples"&gt;Incorrect Message Format Examples&lt;a class="headerlink" href="#incorrect-message-format-examples" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This commit message starts with a capital letter and ends with a period&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;doc(changes): Rewrite of multi-part plugin per issue 308.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This commit message does not use imperative mode.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docs(change): updating status doc to reflect current state
&lt;/pre&gt;&lt;/div&gt;</content><category term="Contributing"></category></entry><entry><title>LiveReload Elegant Documentation Using Gulp.js</title><link href="https://dvesti.github.io/Pelican/2019/07/19/live-reload-elegant-documentation-using-gulpjs/" rel="alternate"></link><published>2019-07-19T23:17:00+03:00</published><updated>2019-07-19T23:17:00+03:00</updated><author><name>Talha Mansoor</name></author><id>tag:dvesti.github.io,2019-07-19:/Pelican/2019/07/19/live-reload-elegant-documentation-using-gulpjs/</id><summary type="html">&lt;p&gt;Elegant has setup &lt;a href="https://gulpjs.com/"&gt;gulp.js&lt;/a&gt; and &lt;a href="https://www.browsersync.io/"&gt;BrowserSync&lt;/a&gt; for LiveReload feature to its developers and documentation writers. This is a better alternative to the &lt;a href="https://dvesti.github.io/Pelican/2019/07/19/live-reload-elegant-documentation-using-pelican/"&gt;Python LiveReload solution that Pelican offers by default&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="prerequisites"&gt;Prerequisites&lt;a class="headerlink" href="#prerequisites" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You need to run following steps only once, to setup the LiveReload using&amp;nbsp;gulp.&lt;/p&gt;
&lt;h3 id="step-1-install-nodejs-and-yarn"&gt;Step 1: Install NodeJS …&lt;/h3&gt;</summary><content type="html">&lt;p&gt;Elegant has setup &lt;a href="https://gulpjs.com/"&gt;gulp.js&lt;/a&gt; and &lt;a href="https://www.browsersync.io/"&gt;BrowserSync&lt;/a&gt; for LiveReload feature to its developers and documentation writers. This is a better alternative to the &lt;a href="https://dvesti.github.io/Pelican/2019/07/19/live-reload-elegant-documentation-using-pelican/"&gt;Python LiveReload solution that Pelican offers by default&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="prerequisites"&gt;Prerequisites&lt;a class="headerlink" href="#prerequisites" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You need to run following steps only once, to setup the LiveReload using&amp;nbsp;gulp.&lt;/p&gt;
&lt;h3 id="step-1-install-nodejs-and-yarn"&gt;Step 1: Install NodeJS and Yarn &lt;!-- yaspeller ignore --&gt;&lt;a class="headerlink" href="#step-1-install-nodejs-and-yarn" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Install &lt;a href="https://nodejs.org/en/download/"&gt;Node.js&lt;/a&gt; and &lt;a href="https://yarnpkg.com/en/docs/install"&gt;Yarn&lt;/a&gt; on your&amp;nbsp;system.&lt;/p&gt;
&lt;p&gt;If you are on Windows then try installing them with &lt;a href="https://scoop.sh/"&gt;scoop.sh&lt;/a&gt;. It saves time and makes update&amp;nbsp;easier.&lt;/p&gt;
&lt;h3 id="step-2-install-gulp"&gt;Step 2: Install gulp&lt;a class="headerlink" href="#step-2-install-gulp" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Run this command from your command line&amp;nbsp;terminal.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yarn global add gulp-cli
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="step-3-install-dependencies"&gt;Step 3: Install Dependencies&lt;a class="headerlink" href="#step-3-install-dependencies" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In the root of the Elegant repository,&amp;nbsp;run&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yarn install
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;yarn&lt;/code&gt; will create &lt;code&gt;node_modules&lt;/code&gt; folder in the&amp;nbsp;root.&lt;/p&gt;
&lt;h2 id="use-livereload"&gt;Use LiveReload&lt;a class="headerlink" href="#use-livereload" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Run &lt;code&gt;gulp&lt;/code&gt; command in the root of the elegant&amp;nbsp;repository.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gulp
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It will launch the browser and open the home page. Now when you edit the templates, &lt;span class="caps"&gt;CSS&lt;/span&gt; rules, JavaScript files, Markdown, or reStructuredText files, all opened tabs will automatically reload and reflect the&amp;nbsp;change.&lt;/p&gt;
&lt;p&gt;It is set to serve the documentation at &lt;a href="http://localhost:9001"&gt;http://localhost:9001&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="why-browsersync-is-better-than-python-livereload"&gt;Why BrowserSync is better than Python-LiveReload&lt;a class="headerlink" href="#why-browsersync-is-better-than-python-livereload" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;BrowserSync supports pretty URLs, which &lt;a href="https://dvesti.github.io/Pelican/2019/07/19/live-reload-elegant-documentation-using-pelican/#known-issue"&gt;Python-LiveReload doesn&amp;#8217;t&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;BrowserSync has number of additional powerful&amp;nbsp;features.&lt;/p&gt;
&lt;h3 id="interaction-sync"&gt;Interaction Sync&lt;a class="headerlink" href="#interaction-sync" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This is an extremely powerful and useful&amp;nbsp;feature.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Your scroll, click, refresh and form actions are mirrored between browsers while you&amp;nbsp;test.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;What it means is when you have &lt;span class="caps"&gt;URL&lt;/span&gt; open in more than one tabs or browsers. If you scroll in one tab, other tabs mirror the scroll&amp;nbsp;movement.&lt;/p&gt;
&lt;p&gt;You can use this feature to test your website in desktop and mobile widths simultaneously. Open a link in one tab normally, and in other tab in responsive&amp;nbsp;mode.&lt;/p&gt;
&lt;h3 id="browser-based-ui"&gt;Browser Based &lt;span class="caps"&gt;UI&lt;/span&gt;&lt;a class="headerlink" href="#browser-based-ui" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;BrowserSync offers and easy to use &lt;span class="caps"&gt;UI&lt;/span&gt;. To access it, run &lt;code&gt;gulp&lt;/code&gt;, open &lt;a href="http://localhost:9002/"&gt;http://localhost:9002/&lt;/a&gt; in your&amp;nbsp;browser.&lt;/p&gt;
&lt;h3 id="debug-css"&gt;Debug &lt;span class="caps"&gt;CSS&lt;/span&gt;&lt;a class="headerlink" href="#debug-css" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You can add simple and depth &lt;span class="caps"&gt;CSS&lt;/span&gt; outlines to elements, or overlay &lt;span class="caps"&gt;CSS&lt;/span&gt; grid using BrowserSync. Open &lt;a href="http://localhost:9002/remote-debug"&gt;http://localhost:9002/remote-debug&lt;/a&gt; in your&amp;nbsp;browser.&lt;/p&gt;
&lt;h3 id="network-throttle"&gt;Network Throttle&lt;a class="headerlink" href="#network-throttle" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You can test website on a slower network connection. To access open &lt;a href="http://localhost:9002/network-throttle"&gt;http://localhost:9002/network-throttle&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="is-gulpjs-necessary-to-use"&gt;Is gulp.js necessary to use?&lt;a class="headerlink" href="#is-gulpjs-necessary-to-use" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We have plans to use gulp.js to utilize tools like
PostCSS &lt;!-- yaspeller ignore --&gt;
and
Autoprefixer &lt;!-- yaspeller ignore --&gt;
, in future. Currently we use gulp.js to watch for file&amp;nbsp;changes.&lt;/p&gt;
&lt;p&gt;Pelican helper scripts does not watch for file changes. BrowserSync only watches the files that it servers, i.e. &lt;span class="caps"&gt;HTML&lt;/span&gt;, &lt;span class="caps"&gt;CSS&lt;/span&gt; and &lt;span class="caps"&gt;JS&lt;/span&gt; files. This means you need an external tool like gulp.js to watch Markdown and Jinja2&amp;nbsp;files.&lt;/p&gt;
&lt;h2 id="can-i-avoid-using-gulpjs"&gt;Can I avoid using gulp.js?&lt;a class="headerlink" href="#can-i-avoid-using-gulpjs" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;No. You shouldn&amp;#8217;t. Because the alternate is not&amp;nbsp;nice.&lt;/p&gt;
&lt;p&gt;We tried to use BrowserSync without gulp.js but due to limitation in Pelican helper scripts, it didn&amp;#8217;t pan&amp;nbsp;out.&lt;/p&gt;
&lt;p&gt;We installed BrowserSync. Then on one terminal, from &lt;code&gt;documentation&lt;/code&gt; folder, we&amp;nbsp;ran&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;invoke regenerate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In other terminal, from &lt;code&gt;documentation&lt;/code&gt; folder, we&amp;nbsp;ran&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;browser-sync start --server output --files output
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;regenerate&lt;/code&gt; task compiles Markdown files to &lt;span class="caps"&gt;HTML&lt;/span&gt;. BrowserSync automatically picks the changed &lt;span class="caps"&gt;HTML&lt;/span&gt; files and reload the&amp;nbsp;URLs.&lt;/p&gt;
&lt;p&gt;Unfortunately, &lt;code&gt;regenerate&lt;/code&gt; keeps &amp;#8220;regenerating&amp;#8221; even if no file has changed. As a result, BrowserSync keeps reloading the &lt;span class="caps"&gt;URL&lt;/span&gt; every second. It becomes useless because you cannot inspect &lt;span class="caps"&gt;HTML&lt;/span&gt; elements, view console or change &lt;span class="caps"&gt;CSS&lt;/span&gt; rules from the browser, because the &lt;span class="caps"&gt;URL&lt;/span&gt; is constantly&amp;nbsp;overloading.&lt;/p&gt;
&lt;p&gt;This forced us to resort to gulp.js for file&amp;nbsp;watching.&lt;/p&gt;</content><category term="Contributing"></category><category term="gulp"></category></entry><entry><title>LiveReload Elegant Documentation Using Pelican</title><link href="https://dvesti.github.io/Pelican/2019/07/19/live-reload-elegant-documentation-using-pelican/" rel="alternate"></link><published>2019-07-19T22:17:00+03:00</published><updated>2019-07-19T22:17:00+03:00</updated><author><name>Talha Mansoor</name></author><id>tag:dvesti.github.io,2019-07-19:/Pelican/2019/07/19/live-reload-elegant-documentation-using-pelican/</id><summary type="html">&lt;p&gt;Pelican introduced support for LiveReload in &lt;a href="https://github.com/getpelican/pelican/releases/tag/4.1.0"&gt;Version 4.1.0&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To use it, you need to install LiveReload pip&amp;nbsp;package.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install livereload
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then run from the root of the&amp;nbsp;documentation,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;invoke&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;livereload&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You need to install &lt;code&gt;invoke&lt;/code&gt; and &lt;code&gt;tasks.py&lt;/code&gt; for this feature. It does &lt;strong&gt;not&lt;/strong&gt; work with&amp;nbsp;Makefile …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Pelican introduced support for LiveReload in &lt;a href="https://github.com/getpelican/pelican/releases/tag/4.1.0"&gt;Version 4.1.0&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To use it, you need to install LiveReload pip&amp;nbsp;package.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install livereload
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then run from the root of the&amp;nbsp;documentation,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;invoke&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;livereload&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You need to install &lt;code&gt;invoke&lt;/code&gt; and &lt;code&gt;tasks.py&lt;/code&gt; for this feature. It does &lt;strong&gt;not&lt;/strong&gt; work with&amp;nbsp;Makefile.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install invoke
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="known-issue"&gt;Known Issue&lt;a class="headerlink" href="#known-issue" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;div class="admonition danger"&gt;
&lt;p class="admonition-title"&gt;Pretty URLs Do Not&amp;nbsp;Work&lt;/p&gt;
&lt;p&gt;Remove or comment out &lt;code&gt;ARTICLE_URL = "{slug}"&lt;/code&gt; from Pelican configuration to make LiveReload&amp;nbsp;work&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Unfortunately, Pelican LiveReload depends on &lt;a href="https://github.com/lepture/python-livereload"&gt;Python-LiveReload&lt;/a&gt;, which &lt;a href="https://github.com/lepture/python-livereload/pull/131"&gt;does not support extension less files&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;What does it&amp;nbsp;mean?&lt;/p&gt;
&lt;p&gt;Your &lt;span class="caps"&gt;URL&lt;/span&gt; must end at &lt;code&gt;.html&lt;/code&gt;,&amp;nbsp;like,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="mf"&gt;127.0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;9000&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;live&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;reload&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;elegant&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;documentation&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If it does not have the &lt;code&gt;.html&lt;/code&gt; in the end, then LiveReload will return 404&amp;nbsp;error.&lt;/p&gt;
&lt;p&gt;This can happen if your Pelican configuration&amp;nbsp;has&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;ARTICLE_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;{slug}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Therefore, to make LiveReload work, comment out the above&amp;nbsp;line.&lt;/p&gt;
&lt;p&gt;This issues has been reported to the Pelican team. You can track it &lt;a href="https://github.com/getpelican/pelican/issues/2595"&gt;here&lt;/a&gt;.&lt;/p&gt;</content><category term="Contributing"></category></entry><entry><title>What is LiveReload</title><link href="https://dvesti.github.io/Pelican/2019/07/19/what-is-live-reload/" rel="alternate"></link><published>2019-07-19T21:17:00+03:00</published><updated>2019-07-19T21:17:00+03:00</updated><author><name>Talha Mansoor</name></author><id>tag:dvesti.github.io,2019-07-19:/Pelican/2019/07/19/what-is-live-reload/</id><summary type="html">&lt;p&gt;What does LiveReload&amp;nbsp;do?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;LiveReload monitors changes in the file system. As soon as you save a file, it is pre-processed as needed, and the browser is&amp;nbsp;refreshed.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Elegant documentation is LiveReload ready. This feature saves a lot of time. Next time when you are writing or updating an article …&lt;/p&gt;</summary><content type="html">&lt;p&gt;What does LiveReload&amp;nbsp;do?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;LiveReload monitors changes in the file system. As soon as you save a file, it is pre-processed as needed, and the browser is&amp;nbsp;refreshed.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Elegant documentation is LiveReload ready. This feature saves a lot of time. Next time when you are writing or updating an article for Elegant&amp;nbsp;documentation,&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;just open a browser on one side of your monitor (or on secondary&amp;nbsp;monitor)&lt;/li&gt;
&lt;li&gt;open &lt;span class="caps"&gt;URL&lt;/span&gt; of your article in the browser, for example &lt;a href="http://localhost:9001/what-is-live-reload"&gt;http://localhost:9001/what-is-live-reload&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;open the Markdown file of your article and start&amp;nbsp;typing&lt;/li&gt;
&lt;li&gt;when you save the file, your markdown file will be compiled into &lt;span class="caps"&gt;HTML&lt;/span&gt; using Pelican, then your browser tab will reload automatically and show you the&amp;nbsp;changes&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There are two ways to get LiveReload working for Elegant&amp;nbsp;documentation.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://dvesti.github.io/Pelican/2019/07/19/live-reload-elegant-documentation-using-gulpjs/"&gt;Using gulp.js&amp;nbsp;(Recommended)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dvesti.github.io/Pelican/2019/07/19/live-reload-elegant-documentation-using-pelican/"&gt;Using&amp;nbsp;Pelican&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><category term="Contributing"></category></entry><entry><title>Add A Reading Time Estimate to Your Articles</title><link href="https://dvesti.github.io/Pelican/2019/07/15/add-reading-time-estimate/" rel="alternate"></link><published>2019-07-15T20:08:00+03:00</published><updated>2019-07-15T20:08:00+03:00</updated><author><name>Jack De Winter</name></author><id>tag:dvesti.github.io,2019-07-15:/Pelican/2019/07/15/add-reading-time-estimate/</id><summary type="html">&lt;p&gt;Elegant can be configured to provide an estimate of the reading time for your articles, giving the user the ability to gauge how long the articles&amp;nbsp;are.&lt;/p&gt;</summary><content type="html">&lt;p&gt;When you go to articles on a number of popular websites, the articles will present an estimate
to the reader on the amount of time it will take to read the article. This estimate is
typically based on the average reading speed of an adult being roughly 265 words per minute
while retaining&amp;nbsp;comprehension.&lt;/p&gt;
&lt;p&gt;Elegant provides this feature, adding a &lt;code&gt;Reading Time&lt;/code&gt; section at the top of the right sidebar
with the estimate for the current&amp;nbsp;article.&lt;/p&gt;
&lt;p&gt;Here is an example of what the Reading Time Estimate section may look&amp;nbsp;like:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Reading Time Section" src="https://dvesti.github.io/Pelican/images/elegant-theme_reading-time.png" /&gt;&lt;/p&gt;
&lt;h2 id="configuration"&gt;Configuration&lt;a class="headerlink" href="#configuration" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To enable the reading time for your articles, you need to add &lt;code&gt;post_stats&lt;/code&gt; to the &lt;code&gt;PLUGINS&lt;/code&gt;
configuration variable in your Pelican&amp;nbsp;configuration.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;PLUGINS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;post_stats&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://github.com/getpelican/pelican-plugins/blob/master/post_stats/readme.rst"&gt;post_stats plugin&lt;/a&gt; requires the Python &lt;code&gt;beautifulsoup4&lt;/code&gt; package to be&amp;nbsp;installed.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;In addition, the &lt;code&gt;READING_TIME_LOWER_LIMIT&lt;/code&gt; configuration variable can be set to specify a
lower limit for this feature. If not supplied, the default value for this variable is 4&amp;nbsp;min.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;READING_TIME_LOWER_LIMIT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If the estimated reading time is less than or equal to &lt;code&gt;READING_TIME_LOWER_LIMIT&lt;/code&gt; value, the Reading Time section
will not be included for the&amp;nbsp;article.&lt;/p&gt;
&lt;p&gt;Given the default of &lt;code&gt;4&lt;/code&gt; for this variable, this section
will only be visible for articles that have an estimated reading time of 5 minutes or&amp;nbsp;more.&lt;/p&gt;</content><category term="Supported Plugins"></category><category term="reading time"></category><category term="stats"></category></entry><entry><title>Version 3.1.0</title><link href="https://dvesti.github.io/Pelican/2019/07/15/version-3-1-0-release-notes/" rel="alternate"></link><published>2019-07-15T03:17:00+03:00</published><updated>2019-07-15T03:17:00+03:00</updated><author><name>Dmitriev</name></author><id>tag:dvesti.github.io,2019-07-15:/Pelican/2019/07/15/version-3-1-0-release-notes/</id><summary type="html">&lt;h2 id="310-2019-07-14"&gt;&lt;a href="https://github.com/Pelican-Elegant/elegant/compare/V3.0.0...V3.1.0"&gt;3.1.0&lt;/a&gt; (2019-07-14)&lt;a class="headerlink" href="#310-2019-07-14" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="features"&gt;Features&lt;a class="headerlink" href="#features" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;article:&lt;/strong&gt; make article subtitle italic (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/7ca7331"&gt;7ca7331&lt;/a&gt;), closes &lt;a href="https://github.com/Pelican-Elegant/elegant/issues/284"&gt;#284&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;authors:&lt;/strong&gt; add line above authors section (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/35a35b0"&gt;35a35b0&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;authors:&lt;/strong&gt; add support for avatar (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/cc92230"&gt;cc92230&lt;/a&gt;), closes &lt;a href="https://github.com/Pelican-Elegant/elegant/issues/362"&gt;#362&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;authors:&lt;/strong&gt; make authors &lt;span class="caps"&gt;URL&lt;/span&gt; nofollow (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/07bf415"&gt;07bf415&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;authors:&lt;/strong&gt; move authors below share links section (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/b81555a"&gt;b81555a&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;authors:&lt;/strong&gt; open author url in a new window …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2 id="310-2019-07-14"&gt;&lt;a href="https://github.com/Pelican-Elegant/elegant/compare/V3.0.0...V3.1.0"&gt;3.1.0&lt;/a&gt; (2019-07-14)&lt;a class="headerlink" href="#310-2019-07-14" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="features"&gt;Features&lt;a class="headerlink" href="#features" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;article:&lt;/strong&gt; make article subtitle italic (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/7ca7331"&gt;7ca7331&lt;/a&gt;), closes &lt;a href="https://github.com/Pelican-Elegant/elegant/issues/284"&gt;#284&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;authors:&lt;/strong&gt; add line above authors section (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/35a35b0"&gt;35a35b0&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;authors:&lt;/strong&gt; add support for avatar (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/cc92230"&gt;cc92230&lt;/a&gt;), closes &lt;a href="https://github.com/Pelican-Elegant/elegant/issues/362"&gt;#362&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;authors:&lt;/strong&gt; make authors &lt;span class="caps"&gt;URL&lt;/span&gt; nofollow (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/07bf415"&gt;07bf415&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;authors:&lt;/strong&gt; move authors below share links section (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/b81555a"&gt;b81555a&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;authors:&lt;/strong&gt; open author url in a new window (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/f97b47a"&gt;f97b47a&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Chinese:&lt;/strong&gt; add better font support for Chinese language (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/2711aa0"&gt;2711aa0&lt;/a&gt;), closes &lt;a href="https://github.com/Pelican-Elegant/elegant/issues/134"&gt;#134&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;modified:&lt;/strong&gt; show Last Updated only if the difference between created and modified is more than a day (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/b0eac79"&gt;b0eac79&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;monetization:&lt;/strong&gt; add BestAzon support (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/6d8a23c"&gt;6d8a23c&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="bug-fixes"&gt;Bug Fixes&lt;a class="headerlink" href="#bug-fixes" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;article:&lt;/strong&gt; fix regression introduced in 7ca7331c0 (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/2c23961"&gt;2c23961&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;authors:&lt;/strong&gt; title attribute was not closed in quotes (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/de1d05b"&gt;de1d05b&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;gist:&lt;/strong&gt; embedded Github gist are not laid out correctly (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/0416433"&gt;0416433&lt;/a&gt;), closes &lt;a href="https://github.com/Pelican-Elegant/elegant/issues/123"&gt;#123&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;reST:&lt;/strong&gt; indents in line blocks is not preserved (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/e1429c5"&gt;e1429c5&lt;/a&gt;), closes &lt;a href="https://github.com/Pelican-Elegant/elegant/issues/144"&gt;#144&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Release Notes"></category><category term="change-log"></category><category term="project-management"></category></entry><entry><title>BestAzon Support</title><link href="https://dvesti.github.io/Pelican/2019/07/14/amazon-bestazon/" rel="alternate"></link><published>2019-07-14T07:30:47+01:00</published><updated>2019-07-14T07:30:47+01:00</updated><author><name>Pablo Iranzo Gómez</name></author><id>tag:dvesti.github.io,2019-07-14:/Pelican/2019/07/14/amazon-bestazon/</id><summary type="html">&lt;p&gt;Elegant supports &lt;a href="https://bestazon.io/"&gt;BestAzon&lt;/a&gt;, so that you may monetize your traffic using affiliate links from&amp;nbsp;Amazon.&lt;/p&gt;
&lt;p&gt;Similar to &lt;a href="https://dvesti.github.io/Pelican/2019/01/02/amazon-onelink/"&gt;Amazon One Link&lt;/a&gt;, BestAzon provides technology that redirects Amazon links to each country shop by using your associate&amp;nbsp;tags&lt;/p&gt;
&lt;p&gt;Elegant loads the script for BestAzon and inserts your configuration if &lt;code&gt;AMAZON_BESTAZON&lt;/code&gt; is&amp;nbsp;defined …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Elegant supports &lt;a href="https://bestazon.io/"&gt;BestAzon&lt;/a&gt;, so that you may monetize your traffic using affiliate links from&amp;nbsp;Amazon.&lt;/p&gt;
&lt;p&gt;Similar to &lt;a href="https://dvesti.github.io/Pelican/2019/01/02/amazon-onelink/"&gt;Amazon One Link&lt;/a&gt;, BestAzon provides technology that redirects Amazon links to each country shop by using your associate&amp;nbsp;tags&lt;/p&gt;
&lt;p&gt;Elegant loads the script for BestAzon and inserts your configuration if &lt;code&gt;AMAZON_BESTAZON&lt;/code&gt; is&amp;nbsp;defined.&lt;/p&gt;
&lt;p&gt;Follow &lt;a href="https://bestazon.io"&gt;https://bestazon.io&lt;/a&gt; to generate the configuration based on your tag id&amp;#8217;s&amp;nbsp;first.&lt;/p&gt;
&lt;p&gt;Then in your Pelican configuration, preferably in the file &lt;code&gt;publishconf.py&lt;/code&gt;, set &lt;code&gt;AMAZON_BESTAZON&lt;/code&gt; to your BestAzon configuration, for&amp;nbsp;example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;AMAZON_BESTAZON&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;var BestAzon_Configuration = {&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;Amzn_AfiliateID_US&amp;quot;: &amp;quot;redken01-20&amp;quot;,&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;Amzn_AfiliateID_CA&amp;quot;: &amp;quot;redken03-20&amp;quot;,&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;Amzn_AfiliateID_GB&amp;quot;: &amp;quot;redken01-21&amp;quot;,&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;Amzn_AfiliateID_DE&amp;quot;: &amp;quot;redken06-21&amp;quot;,&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;Amzn_AfiliateID_FR&amp;quot;: &amp;quot;redken07-21&amp;quot;,&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;Amzn_AfiliateID_ES&amp;quot;: &amp;quot;redken-21&amp;quot;,&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;Amzn_AfiliateID_IT&amp;quot;: &amp;quot;redken0d-21&amp;quot;,&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;Amzn_AfiliateID_JP&amp;quot;: &amp;quot;&amp;quot;,&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;Amzn_AfiliateID_IN&amp;quot;: &amp;quot;&amp;quot;,&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;Amzn_AfiliateID_CN&amp;quot;: &amp;quot;&amp;quot;,&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;Amzn_AfiliateID_MX&amp;quot;: &amp;quot;&amp;quot;,&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;Amzn_AfiliateID_BR&amp;quot;: &amp;quot;&amp;quot;,&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;Conf_Custom_Class&amp;quot;: &amp;quot; BestAzon_Amazon_Link &amp;quot;,&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;Conf_New_Window&amp;quot;: &amp;quot;1&amp;quot;,&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;Conf_Link_Follow&amp;quot;: &amp;quot;1&amp;quot;,&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;Conf_Product_Link&amp;quot;: &amp;quot;1&amp;quot;,&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;Conf_Tracking&amp;quot;: &amp;quot;1&amp;quot;,&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;Conf_Footer&amp;quot;: &amp;quot;1&amp;quot;,&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;Conf_Link_Keywords&amp;quot;: &amp;quot;&amp;quot;,&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;Conf_Hide_Redirect_Link&amp;quot;: &amp;quot;1&amp;quot;,&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;Conf_Source&amp;quot;: &amp;quot;BestAzonScript&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;};&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If this variable is defined, Elegant will load the BestAzon script that enables the link&amp;nbsp;substitution.&lt;/p&gt;
&lt;p&gt;Now, when international visitors of your site click on a link on your site to buy from Amazon, they are redirected to their local or nearest Amazon market&amp;nbsp;place.&lt;/p&gt;
&lt;p&gt;This is an optional feature. If you do not set the variable then BestAzon script is not added to the rendered&amp;nbsp;output.&lt;/p&gt;
&lt;p&gt;You, as a content creator, should be aware of &lt;span class="caps"&gt;GDPR&lt;/span&gt; or other regulations.
&lt;a href="https://affiliate-program.amazon.com/help/operating/agreement"&gt;Section 5 of the Operating
Agreement&lt;/a&gt; for
Amazon Associates states that you need to disclose your affiliation with Amazon and that you earn from qualifying&amp;nbsp;purchases.&lt;/p&gt;
&lt;p&gt;To conform to this rule in the agreement, Elegant automatically adds the disclaimer in the footer of the website if &lt;code&gt;AMAZON_BESTAZON&lt;/code&gt; variable is set. It looks like&amp;nbsp;this,&lt;/p&gt;
&lt;p&gt;&lt;img alt="Amazon OneLink Disclosure" src="https://dvesti.github.io/Pelican/images/amazon-online-disclaimer.png" /&gt;&lt;/p&gt;</content><category term="Monetizing Your Blog"></category><category term="amazon"></category><category term="affiliates"></category><category term="income"></category></entry><entry><title>Version 3.0.0</title><link href="https://dvesti.github.io/Pelican/2019/07/03/version-3-0-0-release-notes/" rel="alternate"></link><published>2019-07-03T23:54:00+03:00</published><updated>2019-07-03T23:54:00+03:00</updated><author><name>Dmitriev</name></author><id>tag:dvesti.github.io,2019-07-03:/Pelican/2019/07/03/version-3-0-0-release-notes/</id><summary type="html">&lt;h2 id="300-2019-07-03"&gt;&lt;a href="https://github.com/Pelican-Elegant/elegant/compare/V2.5.0...V3.0.0"&gt;3.0.0&lt;/a&gt; (2019-07-03)&lt;a class="headerlink" href="#300-2019-07-03" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="bug-fixes"&gt;Bug Fixes&lt;a class="headerlink" href="#bug-fixes" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;admonition:&lt;/strong&gt; links should inherit the admonition color (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/60c9184"&gt;60c9184&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;freelists:&lt;/strong&gt; use SUBSCRIBE_BUTTON_TITLE instead of generic &lt;span class="caps"&gt;GO&lt;/span&gt; (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/c346d1f"&gt;c346d1f&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;home:&lt;/strong&gt; remove redundant title (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/808cd1d"&gt;808cd1d&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="features"&gt;Features&lt;a class="headerlink" href="#features" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;home:&lt;/strong&gt; write about me in markdown, reST or AsciiDoc (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/9b5b2ec"&gt;9b5b2ec&lt;/a&gt;), closes &lt;a href="https://github.com/Pelican-Elegant/elegant/issues/85"&gt;#85&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;menu:&lt;/strong&gt; set home &lt;span class="caps"&gt;URL&lt;/span&gt; to root if &lt;span class="caps"&gt;SITEURL&lt;/span&gt; is not …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2 id="300-2019-07-03"&gt;&lt;a href="https://github.com/Pelican-Elegant/elegant/compare/V2.5.0...V3.0.0"&gt;3.0.0&lt;/a&gt; (2019-07-03)&lt;a class="headerlink" href="#300-2019-07-03" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="bug-fixes"&gt;Bug Fixes&lt;a class="headerlink" href="#bug-fixes" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;admonition:&lt;/strong&gt; links should inherit the admonition color (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/60c9184"&gt;60c9184&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;freelists:&lt;/strong&gt; use SUBSCRIBE_BUTTON_TITLE instead of generic &lt;span class="caps"&gt;GO&lt;/span&gt; (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/c346d1f"&gt;c346d1f&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;home:&lt;/strong&gt; remove redundant title (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/808cd1d"&gt;808cd1d&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="features"&gt;Features&lt;a class="headerlink" href="#features" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;home:&lt;/strong&gt; write about me in markdown, reST or AsciiDoc (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/9b5b2ec"&gt;9b5b2ec&lt;/a&gt;), closes &lt;a href="https://github.com/Pelican-Elegant/elegant/issues/85"&gt;#85&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;menu:&lt;/strong&gt; set home &lt;span class="caps"&gt;URL&lt;/span&gt; to root if &lt;span class="caps"&gt;SITEURL&lt;/span&gt; is not (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/23e0b94"&gt;23e0b94&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="breaking-changes"&gt;&lt;span class="caps"&gt;BREAKING&lt;/span&gt; &lt;span class="caps"&gt;CHANGES&lt;/span&gt;&lt;a class="headerlink" href="#breaking-changes" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;home:&lt;/strong&gt; Previously LANDING_PAGE_ABOUT was a dictionary that contained html tags. We used it
  to create landing page. But users have demanded from the very beginning to be able to write the
  landing page in markdown. This patch adds this feature. But in order to use it, you have to update
  your&amp;nbsp;configuration.&lt;/li&gt;
&lt;/ul&gt;</content><category term="Release Notes"></category><category term="change-log"></category><category term="project-management"></category></entry><entry><title>Code Style for Jinja2</title><link href="https://dvesti.github.io/Pelican/2019/07/03/code-style-for-jinja2/" rel="alternate"></link><published>2019-07-03T22:17:00+03:00</published><updated>2019-07-03T22:17:00+03:00</updated><author><name>Talha Mansoor</name></author><id>tag:dvesti.github.io,2019-07-03:/Pelican/2019/07/03/code-style-for-jinja2/</id><summary type="html">&lt;p&gt;Elegant&amp;#8217;s Jinja templates adhere to the code style described in this&amp;nbsp;article.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Please make sure to follow the code style of the existing code&amp;nbsp;base.&lt;/p&gt;
&lt;p&gt;Specifically:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;use single (&lt;code&gt;''&lt;/code&gt;) rather than double (&lt;code&gt;""&lt;/code&gt;) quotation marks for Jinja&amp;nbsp;strings&lt;/li&gt;
&lt;li&gt;in Jinja print statements, surround the variable with spaces inside curly braces – for example: &lt;code&gt;{{ foo.bar }}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;use double (&lt;code&gt;""&lt;/code&gt;) quotation marks around &lt;span class="caps"&gt;HTML&lt;/span&gt;&amp;nbsp;attributes&lt;/li&gt;
&lt;li&gt;end files with a&amp;nbsp;newline&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can run &lt;code&gt;gulp validate&lt;/code&gt; task to validate the templates files using &lt;a href="https://github.com/ramonsaraiva/jinjaninja"&gt;Jinja Ninja&lt;/a&gt;.
It is not comprehensive but it does point out obvious mistakes. You can read more about using &lt;code&gt;gulp&lt;/code&gt; &lt;a href="https://dvesti.github.io/Pelican/2019/07/19/live-reload-elegant-documentation-using-gulpjs/"&gt;here&lt;/a&gt;.&lt;/p&gt;</content><category term="Contributing"></category></entry><entry><title>Contributions License</title><link href="https://dvesti.github.io/Pelican/2019/07/03/contribution-license/" rel="alternate"></link><published>2019-07-03T22:07:00+03:00</published><updated>2019-07-03T22:07:00+03:00</updated><author><name>Talha Mansoor</name></author><id>tag:dvesti.github.io,2019-07-03:/Pelican/2019/07/03/contribution-license/</id><summary type="html">&lt;p&gt;The licensing terms under which Elegant is&amp;nbsp;developed.&lt;/p&gt;</summary><content type="html">
&lt;p&gt;By submitting a change to the project, you implicitly acknowledge that you are following
the following license rules.&lt;/p&gt;
&lt;h2 id="licensing"&gt;Licensing&lt;a class="headerlink" href="#licensing" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;All contributions to the project are understood to be submitted under the same (inbound)
license as the main (outbound) license of the main Elegant repository.&lt;/p&gt;
&lt;p&gt;All code and theme contributions are submitted according to the
&lt;a href="https://spdx.org/licenses/MIT.html"&gt;&lt;span class="caps"&gt;MIT&lt;/span&gt; License&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;All documentation contributions are submitted according to the
&lt;a href="https://spdx.org/licenses/CC-BY-SA-4.0.html"&gt;&lt;span class="caps"&gt;CC&lt;/span&gt;-&lt;span class="caps"&gt;BY&lt;/span&gt;-&lt;span class="caps"&gt;SA&lt;/span&gt;-4.0 License&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;All contributions of code where the submitter is not the owner of the submission must indicate
the source of the code, who the author or copyright holder is, and what license or licensing
terms are being used to allow the contribution in the Elegant project.&lt;/p&gt;</content><category term="Contributing"></category></entry><entry><title>Git Tips for Beginners</title><link href="https://dvesti.github.io/Pelican/2019/07/03/git-tips-for-beginners/" rel="alternate"></link><published>2019-07-03T21:57:00+03:00</published><updated>2019-07-03T21:57:00+03:00</updated><author><name>Talha Mansoor</name></author><id>tag:dvesti.github.io,2019-07-03:/Pelican/2019/07/03/git-tips-for-beginners/</id><summary type="html">&lt;p&gt;This article contains a number of tips useful for working with Elegant and&amp;nbsp;Git.&lt;/p&gt;</summary><content type="html">
&lt;p&gt;Here are some tips we have found useful for using Git to contribute to the project.&lt;/p&gt;
&lt;h2 id="how-to-set-up-your-git-repository"&gt;How To Set Up Your Git Repository&lt;a class="headerlink" href="#how-to-set-up-your-git-repository" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Create your own fork of Elegant by going to the project repository webpage &lt;a href="https://github.com/Pelican-Elegant/elegant"&gt;on GitHub&lt;/a&gt; and pressing the &lt;code&gt;Fork&lt;/code&gt; button.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="Fork Button" src="https://dvesti.github.io/Pelican/images/github-fork-button.png"/&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You will now be redirected to the page representing your fork of the repository. To clone the your fork of the repository to your computer, press the &lt;code&gt;Clone or download&lt;/code&gt; button and follow the instructions provided.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="Clone or Download button" src="https://dvesti.github.io/Pelican/images/github-clone-button.png"/&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a directory to host your repository in and change to that directory. Run the following command to set your forked repository as &lt;code&gt;Upstream&lt;/code&gt;:&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;bash
   git remote add upstream https://github.com/Pelican-Elegant/pelican-elegant.git&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="pull-before-starting-changes"&gt;Pull Before Starting Changes&lt;a class="headerlink" href="#pull-before-starting-changes" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Most of the changes that you will submit will be against the Upstream repository’s &lt;code&gt;next&lt;/code&gt;
branch. Whether you decide to work in your local repository’s &lt;code&gt;next&lt;/code&gt; branch or create a new
branch of your own, it is recommended that you do a &lt;code&gt;git pull&lt;/code&gt; against the Upstream &lt;code&gt;next&lt;/code&gt;
branch before starting to work on a new set of changes. This will ensure that you are starting
from a known good point, and reduce the chance of requiring a merge at a later stage.&lt;/p&gt;
&lt;h2 id="updatingrebasing-to-upstream"&gt;Updating/Rebasing to Upstream&lt;a class="headerlink" href="#updatingrebasing-to-upstream" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It is a good practice to update your repository to it’s Upstream repository one or more times
during the development of your changes. Specifically, the &lt;code&gt;next&lt;/code&gt; branch of the repository
is where most of the changes are submitted to, and you should either rebase or pull any
changes down to your local repository from there. This practice will ensure that any changes
that have been made to that Upstream branch are brought down where you can test your changes
with anyone other changes.&lt;/p&gt;
&lt;p&gt;To update from the &lt;code&gt;next&lt;/code&gt; branch, from within your project directory, enter the following commands:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git fetch upstream next&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git rebase upstream/next&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="squash-commits-more-complex-rebasing"&gt;Squash Commits &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; More Complex Rebasing&lt;a class="headerlink" href="#squash-commits-more-complex-rebasing" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Before you &lt;a href="https://github.com/Pelican-Elegant/elegant/pulls"&gt;create a pull request in GitHub&lt;/a&gt;,
you have the option to squash your commits into a single commit. This is often used to clean
up a series of commits where you were experimenting with something or just had to fiddle with
something to get it &lt;code&gt;just right&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To squash and rebase your commits, use the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git rebase --interactive upstream/master
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="admonition warning"&gt;
&lt;p class="admonition-title"&gt;Warning&lt;/p&gt;
&lt;p&gt;As with all knives, especially Swiss-army knives, please take caution.  Rebasing a repository after pushing one or more commits to another repository can be troublesome.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;For more on the interactive rebase command of Git, see &lt;a href="https://git-scm.com/docs/user-manual#interactive-rebase"&gt;its official documentation&lt;/a&gt; and helper articles such as
&lt;a href="https://makandracards.com/makandra/527-squash-several-git-commits-into-a-single-commit"&gt;this article&lt;/a&gt;.&lt;/p&gt;</content><category term="Contributing"></category></entry><entry><title>Metadata</title><link href="https://dvesti.github.io/Pelican/2019/07/03/metadata/" rel="alternate"></link><published>2019-07-03T20:44:00+03:00</published><updated>2019-07-03T20:44:00+03:00</updated><author><name>Talha Mansoor</name></author><id>tag:dvesti.github.io,2019-07-03:/Pelican/2019/07/03/metadata/</id><summary type="html">&lt;p&gt;Pelican uses &lt;a href="http://docs.getpelican.com/en/stable/content.html#file-metadata"&gt;file
metadata&lt;/a&gt;
from your articles and pages text files to get information about your posts,
like tags, authors&amp;nbsp;etc.&lt;/p&gt;
&lt;p&gt;On top of &lt;em&gt;&amp;#8220;official&amp;#8221;&lt;/em&gt; metadata, Elegant uses some optional metadata that you
can use in your articles and&amp;nbsp;pages.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;summary&lt;/code&gt; used for &lt;a href="search-engine-and-social-media-optimization#search-engine-optimization-seo"&gt;Search Engine&amp;nbsp;Optimization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;subtitle&lt;/code&gt; used to set …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;Pelican uses &lt;a href="http://docs.getpelican.com/en/stable/content.html#file-metadata"&gt;file
metadata&lt;/a&gt;
from your articles and pages text files to get information about your posts,
like tags, authors&amp;nbsp;etc.&lt;/p&gt;
&lt;p&gt;On top of &lt;em&gt;&amp;#8220;official&amp;#8221;&lt;/em&gt; metadata, Elegant uses some optional metadata that you
can use in your articles and&amp;nbsp;pages.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;summary&lt;/code&gt; used for &lt;a href="search-engine-and-social-media-optimization#search-engine-optimization-seo"&gt;Search Engine&amp;nbsp;Optimization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;subtitle&lt;/code&gt; used to set &lt;a href="https://dvesti.github.io/Pelican/2013/08/27/article-subtitle/"&gt;article&amp;nbsp;subtitle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;keywords&lt;/code&gt; used for &lt;a href="search-engine-and-social-media-optimization#search-engine-optimization-seo"&gt;Search Engine&amp;nbsp;Optimization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;modified&lt;/code&gt; used to set &lt;a href="how-does-modified-metadata-works"&gt;last updated time&lt;/a&gt;
   of the&amp;nbsp;article&lt;/li&gt;
&lt;li&gt;&lt;code&gt;series_title&lt;/code&gt; used with &lt;a href="how-to-use-multi-part-plugin"&gt;&lt;code&gt;multi_part&lt;/code&gt; plugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;featured_image&lt;/code&gt; used for &lt;a href="search-engine-and-social-media-optimization#social-media-optimization-smo"&gt;Social Media&amp;nbsp;Optimization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;share_post_intro&lt;/code&gt; used with &lt;a href="how-to-use-social-sharing-plugin"&gt;&lt;code&gt;share_post&lt;/code&gt;
   plugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;comments_intro&lt;/code&gt; used with
   &lt;a href="https://dvesti.github.io/Pelican/2014/04/21/invite-visitors-comment/"&gt;comments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;comment_id&lt;/code&gt; used with
   &lt;a href="https://dvesti.github.io/Pelican/2019/06/30/comments-thread-id/"&gt;comments&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><category term="Advanced Features"></category><category term="unique"></category></entry><entry><title>Change Labels</title><link href="https://dvesti.github.io/Pelican/2019/07/03/change-labels/" rel="alternate"></link><published>2019-07-03T20:20:00+03:00</published><updated>2019-07-03T20:20:00+03:00</updated><author><name>Talha Mansoor</name></author><id>tag:dvesti.github.io,2019-07-03:/Pelican/2019/07/03/change-labels/</id><summary type="html">&lt;p&gt;It is quite possible you will feel the need to tweak labels of different
sections or widgets. For example, change label of &lt;a href="/how-to-display-your-social-media-profiles"&gt;social
widget&lt;/a&gt; from &amp;#8220;Contact&amp;#8221; to &amp;#8220;Stay in&amp;nbsp;Touch&amp;#8221;.&lt;/p&gt;
&lt;p&gt;Don&amp;#8217;t worry! We got you&amp;nbsp;covered!&lt;/p&gt;
&lt;p&gt;Elegant has all the customizable variables in one place. &lt;a href="https://github.com/Pelican-Elegant/elegant/blob/master/templates/_includes/_defaults.html"&gt;&lt;code&gt;_defaults.html&lt;/code&gt;
file&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;templates …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;It is quite possible you will feel the need to tweak labels of different
sections or widgets. For example, change label of &lt;a href="/how-to-display-your-social-media-profiles"&gt;social
widget&lt;/a&gt; from &amp;#8220;Contact&amp;#8221; to &amp;#8220;Stay in&amp;nbsp;Touch&amp;#8221;.&lt;/p&gt;
&lt;p&gt;Don&amp;#8217;t worry! We got you&amp;nbsp;covered!&lt;/p&gt;
&lt;p&gt;Elegant has all the customizable variables in one place. &lt;a href="https://github.com/Pelican-Elegant/elegant/blob/master/templates/_includes/_defaults.html"&gt;&lt;code&gt;_defaults.html&lt;/code&gt;
file&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;templates/_includes/_defaults.html
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let&amp;#8217;s see how can we change social widget&amp;nbsp;label.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;
&lt;span class="normal"&gt;5&lt;/span&gt;
&lt;span class="normal"&gt;6&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;{# Label for the list of social profiles #}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;not&lt;/span&gt; &lt;span class="nv"&gt;SOCIAL_PROFILE_LABEL&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;SOCIAL_PROFILE_LABEL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Contact&amp;#39;&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;SOCIAL_PROFILE_LABEL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;SOCIAL_PROFILE_LABEL&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endif&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;


&lt;p&gt;Line 1, text enclosed in &lt;code&gt;{# #}&lt;/code&gt; is a comment, which says this section is about
&amp;#8220;Label for the list of social&amp;nbsp;profiles&amp;#8221;.&lt;/p&gt;
&lt;p&gt;The text in all capital case &lt;code&gt;SOCIAL_PROFILE_LABEL&lt;/code&gt; is the actual&amp;nbsp;variable.&lt;/p&gt;
&lt;p&gt;Line 3 says &lt;code&gt;SOCIAL_PROFILE_LABEL&lt;/code&gt; is set to &lt;code&gt;Contact&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To change this value, assign it a different value in your Pelican
configuration, &lt;code&gt;pelicanconf.py&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;SOCIAL_PROFILE_LABEL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Stay in Touch&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That&amp;#8217;s it. The title of social widget will change. There are several others
labels that you can customize easily without touching Elegant&amp;#8217;s source&amp;nbsp;code.&lt;/p&gt;</content><category term="Advanced Features"></category><category term="unique"></category></entry><entry><title>Code Snippets — Change Theme</title><link href="https://dvesti.github.io/Pelican/2019/07/03/change-syntax-highlight-theme/" rel="alternate"></link><published>2019-07-03T20:18:00+03:00</published><updated>2019-07-03T20:18:00+03:00</updated><author><name>Talha Mansoor</name></author><id>tag:dvesti.github.io,2019-07-03:/Pelican/2019/07/03/change-syntax-highlight-theme/</id><summary type="html">&lt;p&gt;Elegant uses &lt;a href="http://ethanschoonover.com/solarized"&gt;Solarized theme&lt;/a&gt; for syntax
highlighting. To replace it, copy contents of your preferred theme&amp;#8217;s &lt;span class="caps"&gt;CSS&lt;/span&gt; style
sheet into &lt;code&gt;custom.css&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Alternatively, you can replace contents of &lt;code&gt;pygments.css&lt;/code&gt; with your theme&amp;#8217;s
style&amp;nbsp;sheet.&lt;/p&gt;
&lt;p&gt;If you feel like experimenting with different themes then &lt;a href="https://github.com/uraimo/pygments-vimstyles"&gt;this
repository&lt;/a&gt; has Pygments …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Elegant uses &lt;a href="http://ethanschoonover.com/solarized"&gt;Solarized theme&lt;/a&gt; for syntax
highlighting. To replace it, copy contents of your preferred theme&amp;#8217;s &lt;span class="caps"&gt;CSS&lt;/span&gt; style
sheet into &lt;code&gt;custom.css&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Alternatively, you can replace contents of &lt;code&gt;pygments.css&lt;/code&gt; with your theme&amp;#8217;s
style&amp;nbsp;sheet.&lt;/p&gt;
&lt;p&gt;If you feel like experimenting with different themes then &lt;a href="https://github.com/uraimo/pygments-vimstyles"&gt;this
repository&lt;/a&gt; has Pygments &lt;span class="caps"&gt;CSS&lt;/span&gt; of
Vim themes. &lt;a href="https://github.com/richleland/pygments-css"&gt;This one&lt;/a&gt; has Pygments
&lt;span class="caps"&gt;CSS&lt;/span&gt; of built-in styles. Do not forget to change &lt;code&gt;.codehilite&lt;/code&gt; &lt;span class="caps"&gt;CSS&lt;/span&gt; class
identifier to &lt;code&gt;.highlight&lt;/code&gt;. Code blocks in Pelican generated &lt;span class="caps"&gt;HTML&lt;/span&gt; use
&lt;code&gt;.highlight&lt;/code&gt; class.&lt;/p&gt;</content><category term="Components"></category><category term="unique"></category></entry><entry><title>Customize Style</title><link href="https://dvesti.github.io/Pelican/2019/07/03/customize-style/" rel="alternate"></link><published>2019-07-03T20:14:00+03:00</published><updated>2019-07-03T20:14:00+03:00</updated><author><name>Talha Mansoor</name></author><id>tag:dvesti.github.io,2019-07-03:/Pelican/2019/07/03/customize-style/</id><summary type="html">&lt;p&gt;To customize Elegant&amp;#8217;s visual style, use
&lt;a href="https://github.com/Pelican-Elegant/elegant/blob/master/static/css/custom.css"&gt;&lt;code&gt;custom.css&lt;/code&gt;&lt;/a&gt;.
You can override Elegant&amp;#8217;s visual style like font, color, spacing etc using
this sheet. This empty style sheet is present at following path in your Elegant&amp;nbsp;folder,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;static/css/custom.css
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Find the code of the element you want to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;To customize Elegant&amp;#8217;s visual style, use
&lt;a href="https://github.com/Pelican-Elegant/elegant/blob/master/static/css/custom.css"&gt;&lt;code&gt;custom.css&lt;/code&gt;&lt;/a&gt;.
You can override Elegant&amp;#8217;s visual style like font, color, spacing etc using
this sheet. This empty style sheet is present at following path in your Elegant&amp;nbsp;folder,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;static/css/custom.css
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Find the code of the element you want to customize in
&lt;a href="https://github.com/Pelican-Elegant/elegant/blob/master/static/css/elegant.css"&gt;&lt;code&gt;elegant.css&lt;/code&gt;&lt;/a&gt;.
Copy the element&amp;#8217;s selector and styles, and paste it in &lt;code&gt;custom.css&lt;/code&gt;. Edit this
&lt;span class="caps"&gt;CSS&lt;/span&gt; code and customize it to your&amp;nbsp;liking.&lt;/p&gt;
&lt;p&gt;Your customizations will override whatever rules are defined in &lt;code&gt;elegant.css&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s take a look how you can change the style of hyperlinks in an article.
Following is the relevant&amp;nbsp;code,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;article&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;not&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="nn"&gt;list-of-translations&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;not&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="nn"&gt;post-share-links&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nt"&gt;article&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;ol&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nt"&gt;article&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;article-content&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;not&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;articles-timeline&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;not&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;related-posts-list&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;border-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;thin&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;dashed&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;#A9A9A9&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;#000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Copy and paste it in &lt;code&gt;custom.css&lt;/code&gt;. Change color to red for&amp;nbsp;example,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;article&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;not&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="nn"&gt;list-of-translations&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;not&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="nn"&gt;post-share-links&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nt"&gt;article&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;ol&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nt"&gt;article&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;article-content&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;not&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;articles-timeline&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;not&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;related-posts-list&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;border-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;thin&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;dashed&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;#A9A9A9&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Test your website using Pelican. All links should be colored&amp;nbsp;red.&lt;/p&gt;
&lt;p&gt;Read &lt;a href="https://dvesti.github.io/Pelican/2014/03/24/avoid-unnecessary-http-requests/"&gt;this post&lt;/a&gt; to make sure your site&amp;#8217;s page
speed does not decrease due to additional &lt;span class="caps"&gt;HTTP&lt;/span&gt;&amp;nbsp;request.&lt;/p&gt;</content><category term="Advanced Features"></category><category term="unique"></category></entry><entry><title>Custom 404 Error Page</title><link href="https://dvesti.github.io/Pelican/2019/07/03/custom-404-page/" rel="alternate"></link><published>2019-07-03T20:07:00+03:00</published><updated>2019-07-03T20:07:00+03:00</updated><author><name>Talha Mansoor</name></author><id>tag:dvesti.github.io,2019-07-03:/Pelican/2019/07/03/custom-404-page/</id><summary type="html">&lt;p&gt;Elegant can be configured to provide a custom 404 page, giving the user the ability to search for information they expected on the missing&amp;nbsp;page.&lt;/p&gt;</summary><content type="html">&lt;p&gt;When you go to a page that does not exist, your browser will display a default error page
unless the website intervenes and provides it&amp;#8217;s own error page. Elegant provides an error
page that allows the user to search for the page that they were trying to&amp;nbsp;reach.&lt;/p&gt;
&lt;p&gt;Here is an example of what the 404 page may look&amp;nbsp;like:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Error 404 page" src="https://dvesti.github.io/Pelican/images/elegant-theme_error-404-page.png" /&gt;&lt;/p&gt;
&lt;h2 id="configuration"&gt;Configuration&lt;a class="headerlink" href="#configuration" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To enable the custom 404 page, you need to add &lt;code&gt;404&lt;/code&gt; to &lt;code&gt;DIRECT_TEMPLATES&lt;/code&gt; in your pelican&amp;nbsp;configuration.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;DIRECT_TEMPLATES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;404&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that these values must be added to any existing values present for the &lt;code&gt;DIRECT_TEMPLATES&lt;/code&gt;
configuration&amp;nbsp;variables.&lt;/p&gt;</content><category term="Advanced Features"></category><category term="unique"></category></entry><entry><title>Приглашение к участию</title><link href="https://dvesti.github.io/Pelican/2019/07/03/invitation-to-participate/" rel="alternate"></link><published>2019-07-03T20:07:00+03:00</published><updated>2019-07-03T20:07:00+03:00</updated><author><name>Talha Mansoor</name></author><id>tag:dvesti.github.io,2019-07-03:/Pelican/2019/07/03/invitation-to-participate/</id><summary type="html">&lt;p&gt;Elegant has a mandatory Git commit message format that is described&amp;nbsp;here.&lt;/p&gt;</summary><content type="html">
&lt;p&gt;This website, &lt;a href="https://elegant.oncrashreboot.com"&gt;elegant.onCrashReboot.com&lt;/a&gt;,
is an excellent demonstration of the theme that all of us contributors love. While looking for
new features that add to what Elegant has to offer, we also continue to take great care that
we adhere to &lt;a href="https://dvesti.github.io/Pelican/2019/07/03/look-and-feel/"&gt;Elegant’s Look and Feel&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This practice allows you, a website owner, the opportunity to give you readers a clean flow of
reading through the body of the article with minimal destructions, with no loss of
functionality. When new features are added, you can decide whether or not to adopt these
features with the confidence that those new features will be consistent with what you already
are using. This will provide the users of your website with something that is well thought out
and organized, appealing to many readers.&lt;/p&gt;
&lt;p&gt;To accomplish this, Elegant is proudly a
&lt;a href="https://dvesti.github.io/Pelican/2019/01/05/community-led-project/"&gt;team driven open source project&lt;/a&gt;.
While it was created in 2012 by Talha Mansoor, the change to a community driven project in
early 2019 has energized the development of the project. By asking “how can I help” or
“do you need help with…”, people have slowly joined the team and enriched the theme to what
you see today. The contributions of these people has allowed the project to grow beyond the
scope of what any one of them could accomplish on their own. Their contributions, together as
a team, are responsible for the project you see here today.&lt;/p&gt;
&lt;h2 id="what-can-i-do"&gt;What Can I Do?&lt;a class="headerlink" href="#what-can-i-do" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If using the Elegant theme and reading this invitation inspires you to contribute, we welcome
the addition of your creativity to our team. No coding skills are required to volunteer to
help with Elegant. The theme is mostly composed of templates written in
&lt;a href="http://jinja.pocoo.org/"&gt;Jinja&lt;/a&gt; utilizing
&lt;a href="https://dvesti.github.io/Pelican/2019/07/03/metadata/"&gt;metadata&lt;/a&gt; associated with each article. We are
confident that if you want to help, we can get you up and running in no time!&lt;/p&gt;
&lt;h2 id="where-do-i-start"&gt;Where Do I Start?&lt;a class="headerlink" href="#where-do-i-start" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As you are volunteering your time and energy, we don’t want you to take on a really big task
to start, scaring you away in the process. For this purpose, we keep a refined list of
&lt;a href="https://github.com/pelican-elegant/elegant/labels/pull%20request%20welcome"&gt;lower priority issues&lt;/a&gt;
to allow you to gently ease yourself into assisting with the project. If none of those
issues appeal to you, feel free to look at all of our
&lt;a href="https://github.com/Pelican-Elegant/elegant/issues?q=is:open+is:issue"&gt;open issues&lt;/a&gt;, and see
if any of those are more attractive to you.&lt;/p&gt;
&lt;p&gt;If none of that appeals to you and you still want to help, don’t worry! We know we are not
perfect and rely on feedback from our users to help us make the theme better for everyone.&lt;/p&gt;
&lt;h2 id="how-can-i-help"&gt;How Can I Help?&lt;a class="headerlink" href="#how-can-i-help" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;See something that isn’t working properly?
&lt;a href="https://github.com/Pelican-Elegant/elegant/issues"&gt;Report a bug&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;See something that you think is missing?
&lt;a href="https://github.com/Pelican-Elegant/elegant/issues"&gt;File a feature request&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;See an article that you think could be clearer?
&lt;a href="https://github.com/Pelican-Elegant/elegant/issues"&gt;File a documentation issue&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We welcome everyone and value every contribution. Our Thanks list exhibits we
value and give credit to not only code contributors, but also the bug reporters
and support seekers.&lt;/p&gt;
&lt;p&gt;We hope you will act professionally and respectfully and will avoid
exclusionary behaviour.&lt;/p&gt;</content><category term="Contributing"></category></entry><entry><title>Why Does Elegant Look The Way It Does?</title><link href="https://dvesti.github.io/Pelican/2019/07/03/look-and-feel/" rel="alternate"></link><published>2019-07-03T20:07:00+03:00</published><updated>2019-07-03T20:07:00+03:00</updated><author><name>Jack De Winter</name></author><id>tag:dvesti.github.io,2019-07-03:/Pelican/2019/07/03/look-and-feel/</id><summary type="html">&lt;p&gt;Elegant has been purposefully crafted to follow a specific set of design principles.  This article discusses those design&amp;nbsp;principles.&lt;/p&gt;</summary><content type="html">
&lt;h2 id="discussion"&gt;Discussion&lt;a class="headerlink" href="#discussion" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Elegant is theme that is largely inspired by the following articles/tweets:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.roughtype.com/?p=1378"&gt;Nicholas Carr’s Experiments in delinkification&lt;/a&gt; &lt;!-- yaspeller ignore --&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pdos.csail.mit.edu/~neha/hyperlinks/main-no.html"&gt;Neha Narula response to Carr Article&lt;/a&gt; &lt;!-- yaspeller ignore --&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aroundthesphere.wordpress.com/2010/06/08/give-your-blog-posts-some-ritalin/"&gt;Collection of responses to Carr Article&lt;/a&gt; &lt;!-- yaspeller ignore --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the first source, Nicholas makes a solid argument that embedded hyperlink tags,
&lt;a href="http://www.roughtype.com/?p=1378"&gt;such as this one&lt;/a&gt;, break the reader’s
concentration while reading. He also mentions that studies have been performed which measured
reading comprehension of articles with and without visible hyperlinks.&lt;/p&gt;
&lt;p&gt;From his article:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Even if you don’t click on a link, your eyes notice it, and your frontal cortex has to fire up a bunch of neurons to decide whether to click or not. You may not notice the little extra cognitive load placed on your brain, but it’s there and it matters. People who read hypertext comprehend and learn less, studies show, than those who read the same material in printed form. The more links in a piece of writing, the bigger the hit on comprehension.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Inspired by the article, the Elegant theme was created as an extension of the suggestions in
the
Carr &lt;!-- yaspeller ignore --&gt;
article combined with some of the concerns of the responses. Allowing the user a
clean flow of reading through the body of the article is considered the highest priority for
Elegant theme decisions.&lt;/p&gt;
&lt;p&gt;When present, the links are shown in a muted manner to minimize the
impact on the cognitive load of the reader. Carrying that design choice forward results in
two subsequent design choices: muted colors and sidebars for extra information.&lt;/p&gt;
&lt;p&gt;Following the spirit of the article, Elegant reduces any distraction by blending all elements
with the background and elevating the article’s content against the background. Instead of a
distracting bright-blue hyperlink showing a link to an external source, a dotted underline and
a slightly darker font color is used. Instead of using bold colors for the text and
background of the admonitions and code blocks, lighter colors are used for both.&lt;/p&gt;
&lt;p&gt;Elegant also reduces the distractions by relocating the extra information contained in an
article’s &lt;a href="https://dvesti.github.io/Pelican/2014/03/18/how-elegant-displays-table-of-contents/"&gt;Table of Contents&lt;/a&gt;
to the left sidebar and displaying it in a smaller font. This allows the table to retain it’s
usefulness to the reader while not intruding on the article. In a similar fashion, the right
sidebar is used to relate any other extra information about the article to the user. Elements
that regularly appear in the right sidebar include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Category&lt;/li&gt;
&lt;li&gt;Last Updated time&lt;/li&gt;
&lt;li&gt;&lt;span class="dquo"&gt;“&lt;/span&gt;Monthly Updates” opt-in&lt;/li&gt;
&lt;li&gt;Published time&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dvesti.github.io/Pelican/2019/07/15/add-reading-time-estimate/"&gt;Reading Time&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dvesti.github.io/Pelican/2014/04/20/how-to-use-multi-part-plugin/"&gt;Series section&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dvesti.github.io/Pelican/2019/08/12/how-to-display-your-social-media-profiles/"&gt;&lt;span class="dquo"&gt;“&lt;/span&gt;Stay in Touch” icons&lt;/a&gt; &lt;!-- yaspeller ignore --&gt;&lt;/li&gt;
&lt;li&gt;Tags&lt;/li&gt;
&lt;/ul&gt;</content><category term="Contributing"></category><category term="design philosophy"></category><category term="distraction"></category><category term="cognitive overload"></category><category term="information overload"></category></entry><entry><title>Add Search to Your Site</title><link href="https://dvesti.github.io/Pelican/2019/07/03/add-search/" rel="alternate"></link><published>2019-07-03T19:56:00+03:00</published><updated>2019-07-03T19:56:00+03:00</updated><author><name>Talha Mansoor</name></author><id>tag:dvesti.github.io,2019-07-03:/Pelican/2019/07/03/add-search/</id><summary type="html">&lt;p&gt;Elegant can be configured to provide search for your static site, giving an alternate way to navigate the&amp;nbsp;site.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Static sites usually do not offer search, as they are normally considered a dynamic task.
Elegant uses the open-source &lt;a href="https://lunrjs.com/"&gt;LunrJS&lt;/a&gt; JavaScript library, to offer
search for your static&amp;nbsp;site.&lt;/p&gt;
&lt;p&gt;Here is an example of what the search result may look&amp;nbsp;like:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Search result for App Store" src="https://dvesti.github.io/Pelican/images/elegant-theme_search-result.png" /&gt;&lt;/p&gt;
&lt;p&gt;We have located the search box on the top right of the main navigation menu to allow
visitors to search from any&amp;nbsp;page.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Search box" src="https://dvesti.github.io/Pelican/images/elegant-theme_search-box.png" /&gt;&lt;/p&gt;
&lt;h2 id="configuration"&gt;Configuration&lt;a class="headerlink" href="#configuration" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To enable search, you need to enable the &lt;code&gt;tipue_search&lt;/code&gt; plugin and add &lt;code&gt;search&lt;/code&gt; to
&lt;code&gt;DIRECT_TEMPLATES&lt;/code&gt; in your pelican&amp;nbsp;configuration.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;PLUGINS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tipue_search&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;DIRECT_TEMPLATES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;search&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that these values must be added to any existing values present for the &lt;code&gt;PLUGINS&lt;/code&gt; and
&lt;code&gt;DIRECT_TEMPLATES&lt;/code&gt; configuration&amp;nbsp;variables.&lt;/p&gt;</content><category term="Advanced Features"></category><category term="unique"></category></entry><entry><title>Home Page — Unique Features</title><link href="https://dvesti.github.io/Pelican/2019/07/01/unique-home-page-features/" rel="alternate"></link><published>2019-07-01T01:22:00+03:00</published><updated>2019-07-01T01:22:00+03:00</updated><author><name>Talha Mansoor</name></author><id>tag:dvesti.github.io,2019-07-01:/Pelican/2019/07/01/unique-home-page-features/</id><summary type="html">&lt;p&gt;This is the page that visitors see when they open your website. Your chance to
make a good and lasting first impression. Most sites just display a list of
recent posts. Elegant goes the extra mile. Check this&amp;nbsp;out&lt;/p&gt;
&lt;p&gt;&lt;img alt="Home Page Sample" src="https://dvesti.github.io/Pelican/images/elegant-theme_home-page-features.png" /&gt;&lt;/p&gt;
&lt;p&gt;You can see three features&amp;nbsp;here,&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Welcome&amp;nbsp;Heading&lt;/li&gt;
&lt;li&gt;About&amp;nbsp;me&lt;/li&gt;
&lt;li&gt;My …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;This is the page that visitors see when they open your website. Your chance to
make a good and lasting first impression. Most sites just display a list of
recent posts. Elegant goes the extra mile. Check this&amp;nbsp;out&lt;/p&gt;
&lt;p&gt;&lt;img alt="Home Page Sample" src="https://dvesti.github.io/Pelican/images/elegant-theme_home-page-features.png" /&gt;&lt;/p&gt;
&lt;p&gt;You can see three features&amp;nbsp;here,&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Welcome&amp;nbsp;Heading&lt;/li&gt;
&lt;li&gt;About&amp;nbsp;me&lt;/li&gt;
&lt;li&gt;My&amp;nbsp;Projects&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There is a third section below these two sections, &amp;#8220;Recent&amp;nbsp;articles&amp;#8221;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Recent Articles Section" src="https://dvesti.github.io/Pelican/images/elegant-theme_recent-posts.png" /&gt;&lt;/p&gt;
&lt;h2 id="how-to-set-them-up"&gt;How to set them up&lt;a class="headerlink" href="#how-to-set-them-up" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We have detailed help articles to help you set these sections&amp;nbsp;up&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://dvesti.github.io/Pelican/2019/07/01/write-welcome-message/"&gt;Write Welcome&amp;nbsp;Message&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dvesti.github.io/Pelican/2019/07/01/write-about-me/"&gt;Write About&amp;nbsp;Me&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dvesti.github.io/Pelican/2019/07/01/projects-list/"&gt;Projects&amp;nbsp;List&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dvesti.github.io/Pelican/2019/07/01/recent-articles-list/"&gt;Recent Articles&amp;nbsp;List&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><category term="Components"></category><category term="home"></category><category term="remarkable"></category><category term="unique"></category><category term="guide"></category></entry><entry><title>Home Page — Projects List</title><link href="https://dvesti.github.io/Pelican/2019/07/01/projects-list/" rel="alternate"></link><published>2019-07-01T01:12:00+03:00</published><updated>2019-07-01T01:12:00+03:00</updated><author><name>Talha Mansoor</name></author><id>tag:dvesti.github.io,2019-07-01:/Pelican/2019/07/01/projects-list/</id><summary type="html">&lt;p&gt;Projects list is read from &lt;code&gt;PROJECTS&lt;/code&gt; in your Pelican configuration
(&lt;code&gt;pelicanconf.py&lt;/code&gt;) file. It is an array of dictionaries. Each
dictionary has three&amp;nbsp;keys,&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt; which will have name of your&amp;nbsp;project,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;url&lt;/code&gt; which will have &lt;span class="caps"&gt;URL&lt;/span&gt; of the project,&amp;nbsp;and&lt;/li&gt;
&lt;li&gt;&lt;code&gt;description&lt;/code&gt; which will have the description of the&amp;nbsp;project …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;Projects list is read from &lt;code&gt;PROJECTS&lt;/code&gt; in your Pelican configuration
(&lt;code&gt;pelicanconf.py&lt;/code&gt;) file. It is an array of dictionaries. Each
dictionary has three&amp;nbsp;keys,&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt; which will have name of your&amp;nbsp;project,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;url&lt;/code&gt; which will have &lt;span class="caps"&gt;URL&lt;/span&gt; of the project,&amp;nbsp;and&lt;/li&gt;
&lt;li&gt;&lt;code&gt;description&lt;/code&gt; which will have the description of the&amp;nbsp;project.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You can define as many projects as you want. Here
is an&amp;nbsp;example,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;
&lt;span class="normal"&gt;5&lt;/span&gt;
&lt;span class="normal"&gt;6&lt;/span&gt;
&lt;span class="normal"&gt;7&lt;/span&gt;
&lt;span class="normal"&gt;8&lt;/span&gt;
&lt;span class="normal"&gt;9&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;PROJECTS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Logpad + Duration&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;url&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https://github.com/talha131/logpad-plus-duration#logpad--duration&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;description&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Vim plugin to emulate Windows Notepad logging feature,&amp;#39;&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39; and log duration of each entry&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Elegant Theme for Pelican&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;url&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://oncrashreboot.com/pelican-elegant&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;description&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;A clean and distraction free theme, with search and a&amp;#39;&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39; lot more unique features, using Jinja2 and Bootstrap&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;


&lt;p&gt;To configure the projects&amp;#8217; list title, set &lt;code&gt;PROJECTS_TITLE&lt;/code&gt; variable in your Pelican configuration. Its default value is &amp;#8220;My Projects&amp;#8221;. For&amp;nbsp;example,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;PROJECTS_TITLE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Related Projects&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="Home Page Sample" src="https://dvesti.github.io/Pelican/images/elegant-theme_home-page-features.png" /&gt;&lt;/p&gt;</content><category term="Components"></category><category term="remarkable"></category><category term="unique"></category><category term="home"></category></entry><entry><title>Home Page — Write About Me</title><link href="https://dvesti.github.io/Pelican/2019/07/01/write-about-me/" rel="alternate"></link><published>2019-07-01T01:12:00+03:00</published><updated>2019-07-01T01:12:00+03:00</updated><author><name>Talha Mansoor</name></author><id>tag:dvesti.github.io,2019-07-01:/Pelican/2019/07/01/write-about-me/</id><summary type="html">&lt;div class="admonition important"&gt;
&lt;p class="admonition-title"&gt;Define &lt;code&gt;LANDING_PAGE_TITLE&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;About Me&amp;#8221; section works only if you have defined &lt;code&gt;LANDING_PAGE_TITLE&lt;/code&gt; in your Pelican configuration. &lt;a href="https://dvesti.github.io/Pelican/2019/07/01/write-welcome-message/"&gt;Read&amp;nbsp;here.&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;To write about me section, create a page. See &lt;a href="http://docs.getpelican.com/en/stable/content.html#pages"&gt;Pelican documentation&lt;/a&gt; on how to create a&amp;nbsp;page.&lt;/p&gt;
&lt;p&gt;The slug of the page should be &lt;code&gt;landing-page-about-hidden&lt;/code&gt; and &lt;code&gt;status&lt;/code&gt; should be &lt;code&gt;hidden&lt;/code&gt;.&amp;nbsp;Example,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nn"&gt;---&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nt"&gt;author …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="admonition important"&gt;
&lt;p class="admonition-title"&gt;Define &lt;code&gt;LANDING_PAGE_TITLE&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;About Me&amp;#8221; section works only if you have defined &lt;code&gt;LANDING_PAGE_TITLE&lt;/code&gt; in your Pelican configuration. &lt;a href="https://dvesti.github.io/Pelican/2019/07/01/write-welcome-message/"&gt;Read&amp;nbsp;here.&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;To write about me section, create a page. See &lt;a href="http://docs.getpelican.com/en/stable/content.html#pages"&gt;Pelican documentation&lt;/a&gt; on how to create a&amp;nbsp;page.&lt;/p&gt;
&lt;p&gt;The slug of the page should be &lt;code&gt;landing-page-about-hidden&lt;/code&gt; and &lt;code&gt;status&lt;/code&gt; should be &lt;code&gt;hidden&lt;/code&gt;.&amp;nbsp;Example,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nn"&gt;---&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nt"&gt;author&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Talha Mansoor&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;What Is Elegant&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nt"&gt;layout&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;page&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nt"&gt;date&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;2019-01-14 7:30:47 +0100&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nt"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;hidden&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nt"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;landing-page-about-hidden&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nn"&gt;---&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The content of this will become your &amp;#8220;About me&amp;#8221; section, and title will become the heading. You can write content in any markup language, like Markdown, AsciiDoc or reST, as long as Pelican has supports&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Home Page Sample" src="https://dvesti.github.io/Pelican/images/elegant-theme_home-page-features.png" /&gt;&lt;/p&gt;
&lt;h3 id="deprecated"&gt;Deprecated&lt;a class="headerlink" href="#deprecated" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;div class="admonition danger"&gt;
&lt;p class="admonition-title"&gt;Warning: Legacy&amp;nbsp;Variable&lt;/p&gt;
&lt;p&gt;&lt;code&gt;LANDING_PAGE_ABOUT&lt;/code&gt; was available in Elegant V2.5.0. It has since been passed out in favour of &lt;code&gt;landing-page-about-hidden&lt;/code&gt;. The new method lets you write &amp;#8220;About Me&amp;#8221; in your favourite markup&amp;nbsp;language.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;You can write up your own About me section using &lt;code&gt;LANDING_PAGE_ABOUT&lt;/code&gt; variable
in your configuration. It is a dictionary that has two keys &lt;code&gt;title&lt;/code&gt; and
&lt;code&gt;details&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Value of &lt;code&gt;title&lt;/code&gt; is displayed in the header of the home page, like
in the above example it is &amp;#8220;I design and build software products for iOS and
&lt;span class="caps"&gt;OSX&lt;/span&gt;&amp;#8221;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;details&lt;/code&gt; is the text that appears under &amp;#8220;About me&amp;#8221; heading. You can add raw &lt;span class="caps"&gt;HTML&lt;/span&gt; to&amp;nbsp;it.&lt;/p&gt;</content><category term="Components"></category><category term="remarkable"></category><category term="unique"></category><category term="home"></category></entry><entry><title>Home Page — Write Welcome Message</title><link href="https://dvesti.github.io/Pelican/2019/07/01/write-welcome-message/" rel="alternate"></link><published>2019-07-01T01:12:00+03:00</published><updated>2019-07-01T01:12:00+03:00</updated><author><name>Talha Mansoor</name></author><id>tag:dvesti.github.io,2019-07-01:/Pelican/2019/07/01/write-welcome-message/</id><content type="html">&lt;p&gt;Define &lt;code&gt;LANDING_PAGE_TITLE&lt;/code&gt; in your Pelican configuration. It will be displayed as the welcome heading. For&amp;nbsp;example,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;LANDING_PAGE_TITLE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;I design and build software products for iOS and OSX&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="Home Page Sample" src="https://dvesti.github.io/Pelican/images/elegant-theme_home-page-features.png" /&gt;&lt;/p&gt;</content><category term="Components"></category><category term="remarkable"></category><category term="unique"></category><category term="home"></category></entry><entry><title>Home Page — Recent Articles List</title><link href="https://dvesti.github.io/Pelican/2019/07/01/recent-articles-list/" rel="alternate"></link><published>2019-07-01T01:10:00+03:00</published><updated>2019-07-01T01:10:00+03:00</updated><author><name>Talha Mansoor</name></author><id>tag:dvesti.github.io,2019-07-01:/Pelican/2019/07/01/recent-articles-list/</id><content type="html">&lt;p&gt;Recent articles show last &lt;code&gt;RECENT_ARTICLES_COUNT&lt;/code&gt; whose default value is&amp;nbsp;10.&lt;/p&gt;
&lt;p&gt;It also has a link to &amp;#8220;all posts&amp;#8221;, which takes user to the archives&amp;nbsp;page.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Recent Articles Section" src="https://dvesti.github.io/Pelican/images/elegant-theme_recent-posts.png" /&gt;&lt;/p&gt;</content><category term="Components"></category><category term="remarkable"></category><category term="unique"></category><category term="home"></category></entry><entry><title>Comments — Thread ID</title><link href="https://dvesti.github.io/Pelican/2019/06/30/comments-thread-id/" rel="alternate"></link><published>2019-06-30T22:29:00+03:00</published><updated>2019-06-30T22:29:00+03:00</updated><author><name>Talha Mansoor</name></author><id>tag:dvesti.github.io,2019-06-30:/Pelican/2019/06/30/comments-thread-id/</id><summary type="html">&lt;p&gt;Most Pelican themes pass article &lt;span class="caps"&gt;URL&lt;/span&gt; to Disqus as the &lt;a href="http://help.disqus.com/customer/portal/articles/472098-javascript-configuration-variables#disqus_identifier"&gt;Disqus
identifier&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This puts you at a disadvantage. If you are forced to change &lt;span class="caps"&gt;URL&lt;/span&gt; of an article
you will lose Disqus discussion for that article because Disqus identifier for
the article will change&amp;nbsp;too.&lt;/p&gt;
&lt;p&gt;Elegant offers you &lt;code&gt;comment_id&lt;/code&gt; property …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Most Pelican themes pass article &lt;span class="caps"&gt;URL&lt;/span&gt; to Disqus as the &lt;a href="http://help.disqus.com/customer/portal/articles/472098-javascript-configuration-variables#disqus_identifier"&gt;Disqus
identifier&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This puts you at a disadvantage. If you are forced to change &lt;span class="caps"&gt;URL&lt;/span&gt; of an article
you will lose Disqus discussion for that article because Disqus identifier for
the article will change&amp;nbsp;too.&lt;/p&gt;
&lt;p&gt;Elegant offers you &lt;code&gt;comment_id&lt;/code&gt; property that you can set in your
article metadata. Set it to any unique string you want. It won&amp;#8217;t be effected by
the article &lt;span class="caps"&gt;URL&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;If you choose not to use &lt;code&gt;comment_id&lt;/code&gt;, Elegant passes article &lt;span class="caps"&gt;URL&lt;/span&gt; to&amp;nbsp;Disqus.&lt;/p&gt;
&lt;h2 id="legacy-variable"&gt;Legacy Variable&lt;a class="headerlink" href="#legacy-variable" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In previous versions, we had &lt;code&gt;disqus_identifier&lt;/code&gt;. Though Elegant is backward compatible but we recommend you to change it to &lt;code&gt;comment_id&lt;/code&gt;.&lt;/p&gt;</content><category term="Connecting With Your Readers"></category><category term="interaction"></category></entry><entry><title>Version 2.5.0</title><link href="https://dvesti.github.io/Pelican/2019/06/30/version-2-5-0-release-notes/" rel="alternate"></link><published>2019-06-30T12:48:00+03:00</published><updated>2019-06-30T12:48:00+03:00</updated><author><name>Dmitriev</name></author><id>tag:dvesti.github.io,2019-06-30:/Pelican/2019/06/30/version-2-5-0-release-notes/</id><summary type="html">&lt;p&gt;Added one new&amp;nbsp;feature&lt;/p&gt;</summary><content type="html">&lt;p&gt;We plan to add support for other comment providers besides Disqus. This release is first step towards&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;In this release we also resolved an issue in our automated release process. From now onwards, all new releases will happen automatically with minimum human&amp;nbsp;intervention.&lt;/p&gt;
&lt;h2 id="250-2019-06-30"&gt;&lt;a href="https://github.com/Pelican-Elegant/elegant/compare/V2.4.0...V2.5.0"&gt;2.5.0&lt;/a&gt; (2019-06-30)&lt;a class="headerlink" href="#250-2019-06-30" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="features"&gt;Features&lt;a class="headerlink" href="#features" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;comments:&lt;/strong&gt; replace disqus_identifier with comment_id (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/3aa4e24"&gt;3aa4e24&lt;/a&gt;) &lt;!-- yaspeller ignore --&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Release Notes"></category><category term="change-log"></category><category term="project-management"></category></entry><entry><title>Footer — Show Your Host Information</title><link href="https://dvesti.github.io/Pelican/2019/06/30/show-host-information/" rel="alternate"></link><published>2019-06-30T11:54:00+03:00</published><updated>2019-06-30T11:54:00+03:00</updated><author><name>Talha Mansoor</name></author><id>tag:dvesti.github.io,2019-06-30:/Pelican/2019/06/30/show-host-information/</id><summary type="html">&lt;p&gt;Show the host of your&amp;nbsp;website&lt;/p&gt;</summary><content type="html">&lt;p&gt;You can optionally display the host of your website in the&amp;nbsp;footer.&lt;/p&gt;
&lt;p&gt;To do so, define a dictionary &lt;code&gt;HOSTED_ON&lt;/code&gt; in your Pelican configuration. It has two&amp;nbsp;keys,&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt;: mandatory. Value type is&amp;nbsp;string&lt;/li&gt;
&lt;li&gt;&lt;code&gt;url&lt;/code&gt;: optional. Value type is&amp;nbsp;string&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For&amp;nbsp;example,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;HOSTED_ON&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Netlify&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;url&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;https://www.netlify.com/&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It will appear in the footer&amp;nbsp;as&lt;/p&gt;
&lt;p&gt;&lt;img alt="Demonstration of HOSTED_ON variable" src="https://dvesti.github.io/Pelican/images/hosted-on.png" /&gt;&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;url&lt;/code&gt; is present then Elegant will add link to your host in the footer with &lt;code&gt;nofollow&lt;/code&gt; attribute. Otherwise Elegant will display the name without any&amp;nbsp;link.&lt;/p&gt;</content><category term="Components"></category><category term="nuances"></category></entry><entry><title>Version 2.4.0</title><link href="https://dvesti.github.io/Pelican/2019/06/30/version-2-4-0-release-notes/" rel="alternate"></link><published>2019-06-30T10:54:00+03:00</published><updated>2019-06-30T10:54:00+03:00</updated><author><name>Dmitriev</name></author><id>tag:dvesti.github.io,2019-06-30:/Pelican/2019/06/30/version-2-4-0-release-notes/</id><summary type="html">&lt;p&gt;Improvements in footer and automate release&amp;nbsp;process&lt;/p&gt;</summary><content type="html">&lt;p&gt;We focused on making changes in the footer of the site. This release is our first step towards using modern &lt;span class="caps"&gt;CSS&lt;/span&gt; properties like flexbox and grid for layout. &lt;!-- yaspeller ignore --&gt;&lt;/p&gt;
&lt;p&gt;We have also automated the release process. This is the first of many release that is published by the release&amp;nbsp;bot.&lt;/p&gt;
&lt;h2 id="240-2019-06-30"&gt;&lt;a href="https://github.com/Pelican-Elegant/elegant/compare/V2.3.0...V2.4.0"&gt;2.4.0&lt;/a&gt; (2019-06-30)&lt;a class="headerlink" href="#240-2019-06-30" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="features"&gt;Features&lt;a class="headerlink" href="#features" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;footer:&lt;/strong&gt; make external links Nofollow (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/137a02a"&gt;137a02a&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;footer:&lt;/strong&gt; move site subtitle to the center (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/b5baa11"&gt;b5baa11&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;footer:&lt;/strong&gt; open exit links in new tab (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/8fd9f28"&gt;8fd9f28&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;footer:&lt;/strong&gt; optionally show the host information (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/9de2dab"&gt;9de2dab&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;footer:&lt;/strong&gt; powered by message is always aligned to the right (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/5e47b7c"&gt;5e47b7c&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;footer:&lt;/strong&gt; remove fixed height by using flexbox for sticky footer (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/d9d84e1"&gt;d9d84e1&lt;/a&gt;) &lt;!-- yaspeller ignore --&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;footer:&lt;/strong&gt; use flexbox instead of list for items in the footer (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/bef7db9"&gt;bef7db9&lt;/a&gt;) &lt;!-- yaspeller ignore --&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;onelink:&lt;/strong&gt; add Amazon Affiliate Disclosure (&lt;a href="https://github.com/Pelican-Elegant/elegant/commit/cbfa6ac"&gt;cbfa6ac&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;</content><category term="Release Notes"></category><category term="change-log"></category><category term="project-management"></category></entry><entry><title>Extended Markdown Examples</title><link href="https://dvesti.github.io/Pelican/2019/06/30/extended-markdown-example/" rel="alternate"></link><published>2019-06-30T10:20:00+03:00</published><updated>2020-07-04T19:30:00+03:00</updated><author><name>Dvesti</name></author><id>tag:dvesti.github.io,2019-06-30:/Pelican/2019/06/30/extended-markdown-example/</id><summary type="html">&lt;p&gt;Пример расширенной разметки&amp;nbsp;Markdown&lt;/p&gt;</summary><content type="html">&lt;p&gt;Contents
Introduction
Table Of Contents
CodeHilite - Code Blocks With Line Numbers
Extra - Footnotes
Extra - Abbreviations
Extra - Definition Lists
Smartypants
Admonitions
This is a continuation of the previous cheat sheet for my website. This article specifically addresses any extensions that are not part of the base Markdown&amp;nbsp;specification.&lt;/p&gt;
&lt;p&gt;Each section here represents an extension that I have enabled on my website. The formatting from the previous page is continued, with one small exception. The title of each section specifies the name of the extension instead of the name of the feature being documented (see Admonitions). If an extension contains more than one feature, such as the Extra extension, the title specifies the name of the extension, a dash, and the name of the feature (see&amp;nbsp;Footnotes).&lt;/p&gt;
&lt;p&gt;Introduction
The authors of the Python Markdown Package anticipated the addition of extra features. To ensure people would have choice, the base package can be extended using&amp;nbsp;configuration.&lt;/p&gt;
&lt;p&gt;The Markdown extensions have been activated on my website by inserting the following text into my&amp;nbsp;peliconconf.py:&lt;/p&gt;
&lt;p&gt;1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
&lt;span class="caps"&gt;MARKDOWN&lt;/span&gt; = {
    &amp;#8216;extension_configs&amp;#8217;: {
        &amp;#8216;markdown.extensions.extra&amp;#8217;: {},
        &amp;#8216;markdown.extensions.admonition&amp;#8217;: {},
        &amp;#8216;markdown.extensions.codehilite&amp;#8217;: {
            &amp;#8216;css_class&amp;#8217;: &amp;#8216;highlight&amp;#8217;
        },
        &amp;#8216;markdown.extensions.meta&amp;#8217;: {},
        &amp;#8216;smarty&amp;#8217; : {
            &amp;#8216;smart_angled_quotes&amp;#8217; : &amp;#8216;true&amp;#8217;
        },
        &amp;#8216;markdown.extensions.toc&amp;#8217;: {
            &amp;#8216;permalink&amp;#8217;: &amp;#8216;true&amp;#8217;
        },
    }
}
Table Of Contents
[&lt;span class="caps"&gt;TOC&lt;/span&gt;]
Introduction
Table Of Contents
CodeHilite - Code Blocks With Line Numbers
Extra - Footnotes
Extra - Abbreviations
Extra - Definition Lists
Smartypants
Admonitions
CodeHilite - Code Blocks With Line&amp;nbsp;Numbers&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="c1"&gt;# Code goes here ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;


&lt;p&gt;1
    # Code goes here &amp;#8230;
Extra - Footnotes
Here&amp;#8217;s a simple footnote,&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt; and here&amp;#8217;s a longer one.&lt;sup id="fnref:bignote"&gt;&lt;a class="footnote-ref" href="#fn:bignote"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;Extra - Abbreviations
The &lt;abbr title="Hyper Text Markup Language"&gt;&lt;span class="caps"&gt;HTML&lt;/span&gt;&lt;/abbr&gt; specification is maintained by the &lt;abbr title="World Wide Web Consortium"&gt;&lt;span class="caps"&gt;W3C&lt;/span&gt;&lt;/abbr&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;abbr title="Hyper Text Markup Language"&gt;&lt;span class="caps"&gt;HTML&lt;/span&gt;&lt;/abbr&gt; specification is maintained by the &lt;abbr title="World Wide Web Consortium"&gt;&lt;span class="caps"&gt;W3C&lt;/span&gt;&lt;/abbr&gt;.&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;Extra - Definition&amp;nbsp;Lists&lt;/dt&gt;
&lt;dt&gt;Apple&lt;/dt&gt;
&lt;dd&gt;Pomaceous fruit of plants of the genus Malus in
the family&amp;nbsp;Rosaceae.&lt;/dd&gt;
&lt;/dl&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;You should note that the title will be automatically&amp;nbsp;capitalized.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Note&lt;/p&gt;
&lt;p&gt;You should note that the title will be automatically&amp;nbsp;capitalized.&lt;/p&gt;
&lt;div class="admonition important"&gt;
&lt;p class="admonition-title"&gt;Replacement&amp;nbsp;Title&lt;/p&gt;
&lt;p&gt;You should note that the default title will be&amp;nbsp;replaced.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Replacement&amp;nbsp;Title&lt;/p&gt;
&lt;p&gt;You should note that the default title will be&amp;nbsp;replaced.&lt;/p&gt;
&lt;div class="admonition hint"&gt;
&lt;p class="admonition-title"&gt;Hint&lt;/p&gt;
&lt;p&gt;You should note that the title will be automatically&amp;nbsp;capitalized.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Hint&lt;/p&gt;
&lt;p&gt;You should note that the title will be automatically&amp;nbsp;capitalized.&lt;/p&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="admonition-title"&gt;Replacement&amp;nbsp;Title&lt;/p&gt;
&lt;p&gt;You should note that the default title will be&amp;nbsp;replaced.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Replacement&amp;nbsp;Title&lt;/p&gt;
&lt;p&gt;You should note that the default title will be&amp;nbsp;replaced.&lt;/p&gt;
&lt;div class="admonition warning"&gt;
&lt;p class="admonition-title"&gt;Warning&lt;/p&gt;
&lt;p&gt;You should note that the title will be automatically&amp;nbsp;capitalized.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Warning&lt;/p&gt;
&lt;p&gt;You should note that the title will be automatically&amp;nbsp;capitalized.&lt;/p&gt;
&lt;div class="admonition caution"&gt;
&lt;p class="admonition-title"&gt;Replacement&amp;nbsp;Title&lt;/p&gt;
&lt;p&gt;You should note that the default title will be&amp;nbsp;replaced.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Replacement&amp;nbsp;Title&lt;/p&gt;
&lt;p&gt;You should note that the default title will be&amp;nbsp;replaced.&lt;/p&gt;
&lt;div class="admonition attention"&gt;
&lt;p&gt;You should note that this will have no title due to the empty&amp;nbsp;title.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;You should note that this will have no title due to the empty&amp;nbsp;title.&lt;/p&gt;
&lt;div class="admonition danger"&gt;
&lt;p class="admonition-title"&gt;Danger&lt;/p&gt;
&lt;p&gt;You should note that the title will be automatically&amp;nbsp;capitalized.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Danger&lt;/p&gt;
&lt;p&gt;You should note that the title will be automatically&amp;nbsp;capitalized.&lt;/p&gt;
&lt;div class="admonition error"&gt;
&lt;p class="admonition-title"&gt;Replacement&amp;nbsp;Title&lt;/p&gt;
&lt;p&gt;You should note that the default title will be&amp;nbsp;replaced.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Replacement&amp;nbsp;Title&lt;/p&gt;
&lt;p&gt;You should note that the default title will be&amp;nbsp;replaced.&lt;/p&gt;
&lt;p&gt;This is the first footnote.&amp;nbsp;↩&lt;/p&gt;
&lt;p&gt;Here’s one with multiple paragraphs and code.&amp;nbsp;↩  &lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;This is the first footnote.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:bignote"&gt;
&lt;p&gt;Here&amp;#8217;s one with multiple paragraphs and code.
Here’s a simple footnote,1 and here’s a longer one.2&amp;#160;&lt;a class="footnote-backref" href="#fnref:bignote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Website"></category><category term="markdown"></category><category term="example"></category></entry><entry><title>Version 2.3.0</title><link href="https://dvesti.github.io/Pelican/2019/06/29/version-2-3-0-release-notes/" rel="alternate"></link><published>2019-06-29T18:31:00+03:00</published><updated>2019-06-29T18:31:00+03:00</updated><author><name>Dmitriev</name></author><id>tag:dvesti.github.io,2019-06-29:/Pelican/2019/06/29/version-2-3-0-release-notes/</id><summary type="html">&lt;p&gt;Added Photos plugin support, besides other&amp;nbsp;features&lt;/p&gt;</summary><content type="html">&lt;p&gt;We have been busy making changes in our infrastructure. Our end goal is to automate as much as possible. We are half way&amp;nbsp;there.&lt;/p&gt;
&lt;p&gt;With this release, every pull request is deployed by Netlify. We no longer have to merge the pull request locally and test it first, before approving it. Anyone can preview the pull request right from the&amp;nbsp;Github.&lt;/p&gt;
&lt;p&gt;We are also planning to automate our release process. We have made several changes in our contribution process to ensure that we are compatible with the automate release requirements. Our next release will be published by a&amp;nbsp;bot.&lt;/p&gt;
&lt;h2 id="project-management"&gt;Project Management&lt;a class="headerlink" href="#project-management" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Documentation is hosted at&amp;nbsp;https://elegant.oncrashreboot.com/&lt;/li&gt;
&lt;li&gt;Host and build documentation using&amp;nbsp;Netlify&lt;/li&gt;
&lt;li&gt;&lt;code&gt;elegant.oncrashreboot.com&lt;/code&gt; domain is the final home of documentation. It shall never&amp;nbsp;change&lt;/li&gt;
&lt;li&gt;Delete github pages and related&amp;nbsp;repositories&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="features"&gt;Features&lt;a class="headerlink" href="#features" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;New: FontAwesome updated to version 4.7.0 &lt;!-- yaspeller ignore --&gt;&lt;/li&gt;
&lt;li&gt;New: &lt;code&gt;Photos&lt;/code&gt; plugin support for photo gallery&amp;nbsp;creation&lt;/li&gt;
&lt;li&gt;New: Lightbox support for &lt;code&gt;Photos&lt;/code&gt; plugin&lt;/li&gt;
&lt;li&gt;Fixed: Amazon One Link div is in the&amp;nbsp;header&lt;/li&gt;
&lt;li&gt;Fixed: Separated claims for Google and Bing into individual&amp;nbsp;includes&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="documentation"&gt;Documentation&lt;a class="headerlink" href="#documentation" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;New: Help article on claim Google and&amp;nbsp;Bing&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="ci"&gt;&lt;span class="caps"&gt;CI&lt;/span&gt;&lt;a class="headerlink" href="#ci" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;New: Enable deploy previews for every pull&amp;nbsp;request&lt;/li&gt;
&lt;li&gt;New: Add spell check for every pull request, and &lt;code&gt;master&lt;/code&gt; and &lt;code&gt;next&lt;/code&gt; branches&lt;/li&gt;
&lt;li&gt;New: Add git hooks to format the&amp;nbsp;code&lt;/li&gt;
&lt;li&gt;New: Add commit Zen&amp;nbsp;support&lt;/li&gt;
&lt;li&gt;New: Add html5validator, which along with w3c_validator, makes for two html validation tools in the &lt;span class="caps"&gt;CI&lt;/span&gt; &lt;!-- yaspeller ignore --&gt;&lt;/li&gt;
&lt;li&gt;New: Improve &lt;span class="caps"&gt;CI&lt;/span&gt; build&amp;nbsp;times&lt;/li&gt;
&lt;li&gt;Remove: peru for downloading plugins and&amp;nbsp;themes&lt;/li&gt;
&lt;li&gt;New: Add pull request&amp;nbsp;template&lt;/li&gt;
&lt;/ul&gt;</content><category term="Release Notes"></category><category term="change-log"></category><category term="project-management"></category></entry><entry><title>Пример стандартной разметки Markdown</title><link href="https://dvesti.github.io/Pelican/2019/06/29/standard-markdown-examples/" rel="alternate"></link><published>2019-06-29T10:20:00+03:00</published><updated>2020-07-04T19:30:00+03:00</updated><author><name>Dvesti</name></author><id>tag:dvesti.github.io,2019-06-29:/Pelican/2019/06/29/standard-markdown-examples/</id><summary type="html">&lt;p&gt;Пример стандартной разметки&amp;nbsp;Markdown&lt;/p&gt;</summary><content type="html">&lt;p&gt;Стандарт тот ещё – As I started writing my articles for my blog, I realized I needed something. To help me write articles using this flavor of Markdown&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;, I needed my own cheat sheet. My hope is that it provides clear guidance on which aspects of the various forms of Markdown worked for me, and which didn’t.&lt;/p&gt;

&lt;h2 id="introduction"&gt;Introduction&lt;a href="#introduction" title="Permanent link"&gt;&lt;/a&gt;&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I am writing articles and pages on Pelican 4.0.1&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2"&gt;2&lt;/a&gt;&lt;/sup&gt; using the Elegant&lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="#fn:3"&gt;3&lt;/a&gt;&lt;/sup&gt; theme, therefore I want to make sure I have a cheat sheet that is specific to this dialect of Markdown. The base Markdown used for Pelican uses the &lt;a href="https://python-markdown.github.io/"&gt;Python Markdown Package&lt;/a&gt; which (with 3 exceptions) follows &lt;a href="https://daringfireball.net/projects/markdown/syntax"&gt;John Gruber’s Markdown definition&lt;/a&gt; very literally. Pelican configuration also supports providing Markdown with additional configuration that enables other features. Those features are documented separately in &lt;a href="https://jackdewinter.github.io/2019/06/30/extended-markdown-examples/"&gt;the next page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The format of this cheat sheet is simple. Each section is separated from the next with a horizontal break and the name of the section. Any notes regarding that section are placed at the top of the section in point form, to ensure they are brief. Then a &lt;a href="#code-block"&gt;Code Block&lt;/a&gt; section is used to show the literal code used to produce the effects that are presented right after the code block.&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="horizontal-break"&gt;Horizontal Break&lt;a href="#horizontal-break" title="Permanent link"&gt;&lt;/a&gt;&lt;a class="headerlink" href="#horizontal-break" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;A horizontal break occurs after 3 or more hyphens.

---
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A horizontal break occurs after 3 or more hyphens.&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="headings"&gt;Headings&lt;a href="#headings" title="Permanent link"&gt;&lt;/a&gt;&lt;a class="headerlink" href="#headings" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gh"&gt;# Heading Level 1&lt;/span&gt;

&lt;span class="gu"&gt;## Heading Level 2&lt;/span&gt;

&lt;span class="gu"&gt;### Heading Level 3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id="heading-level-1"&gt;Heading Level 1&lt;a class="headerlink" href="#heading-level-1" title="Permanent link"&gt; &lt;/a&gt;&lt;/h1&gt;
&lt;h2 id="heading-level-2"&gt;Heading Level 2&lt;a class="headerlink" href="#heading-level-2" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="heading-level-3"&gt;Heading Level 3&lt;a class="headerlink" href="#heading-level-3" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;hr/&gt;
&lt;h2 id="text-emphasis"&gt;Text Emphasis&lt;a href="#text-emphasis" title="Permanent link"&gt;&lt;/a&gt;&lt;a class="headerlink" href="#text-emphasis" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;two spaces at the end of a line will be equivalent to &lt;code&gt;&amp;lt;br/&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;This text is \*\*bold\*\* and this text is also \_\_bold\_\_.  
This text is \*italic\* and this text is also \_italic\_.  
This text is \*\*\_italic and bold\_\*\*, but no two spaces at end.
Single \`\`\`line\`\`\` block.  
Inline \`code\` has \`\`\`back-ticks like this \` around\`\`\` it.  
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This text is &lt;strong&gt;bold&lt;/strong&gt; and this text is also &lt;strong&gt;bold&lt;/strong&gt;.&lt;br/&gt;
This text is &lt;em&gt;italic&lt;/em&gt; and this text is also &lt;em&gt;italic&lt;/em&gt;.&lt;br/&gt;
This text is &lt;strong&gt;&lt;em&gt;italic and bold&lt;/em&gt;&lt;/strong&gt;, but no two spaces at end. Single &lt;code&gt;line&lt;/code&gt; block.&lt;br/&gt;
Inline &lt;code&gt;code&lt;/code&gt; has &lt;code&gt;back-ticks like this ` around&lt;/code&gt; it.&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="numbered-lists"&gt;Numbered lists&lt;a href="#numbered-lists" title="Permanent link"&gt;&lt;/a&gt;&lt;a class="headerlink" href="#numbered-lists" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;to maintain the indentation, place 4 spaces at the start of the line&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;1.&lt;/span&gt; One  

    New para.  

    Blah

&lt;span class="k"&gt;2.&lt;/span&gt; Two
    &lt;span class="k"&gt;-&lt;/span&gt; unordered
    &lt;span class="k"&gt;-&lt;/span&gt; list
&lt;span class="k"&gt;3.&lt;/span&gt; Three
    &lt;span class="k"&gt;1.&lt;/span&gt; ordered
    &lt;span class="k"&gt;2.&lt;/span&gt; list
        &lt;span class="k"&gt;-&lt;/span&gt; unordered
        &lt;span class="k"&gt;-&lt;/span&gt; list
    &lt;span class="k"&gt;3.&lt;/span&gt; items
&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;One&lt;/p&gt;
&lt;p&gt;New para.&lt;/p&gt;
&lt;p&gt;Blah&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Two&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;unordered&lt;/li&gt;
&lt;li&gt;list&lt;/li&gt;
&lt;li&gt;Three&lt;/li&gt;
&lt;li&gt;ordered&lt;/li&gt;
&lt;li&gt;list&lt;ul&gt;
&lt;li&gt;unordered&lt;/li&gt;
&lt;li&gt;list&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;items&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr/&gt;
&lt;h2 id="bulleted-list"&gt;Bulleted List&lt;a href="#bulleted-list" title="Permanent link"&gt;&lt;/a&gt;&lt;a class="headerlink" href="#bulleted-list" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;to maintain the indentation, place 4 spaces at the start of the line&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;-&lt;/span&gt;   This is a list item with two paragraphs.

    This is the second paragraph in the list item. You're
only required to indent the first line. Lorem ipsum dolor
sit amet, consectetuer adipiscing elit.

&lt;span class="k"&gt;-&lt;/span&gt; Another item in the same list.
    &lt;span class="k"&gt;-&lt;/span&gt; Bulleted item
    &lt;span class="k"&gt;-&lt;/span&gt; Bulleted item
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;This is a list item with two paragraphs.&lt;/p&gt;
&lt;p&gt;This is the second paragraph in the list item. You’re
only required to indent the first line. Lorem ipsum dolor
sit amet, consectetuer adipiscing elit.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Another item in the same list.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bulleted item&lt;/li&gt;
&lt;li&gt;Bulleted item&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2 id="block-quote"&gt;Block quote&lt;a href="#block-quote" title="Permanent link"&gt;&lt;/a&gt;&lt;a class="headerlink" href="#block-quote" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; This is the first paragraph of a blockquote with two paragraphs.
&amp;gt; Lorem ipsum dolor sit amet,
&amp;gt; consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.
&amp;gt; Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.
&amp;gt;
&amp;gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.
&amp;gt;
&amp;gt; This is the first level of quoting.
&amp;gt;
&amp;gt; &amp;gt; This is nested blockquote.
&amp;gt;
&amp;gt; Back to the first level.
&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;This is the first paragraph of a blockquote with two paragraphs. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.&lt;/p&gt;
&lt;p&gt;This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.&lt;/p&gt;
&lt;p&gt;This is the first level of quoting.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is nested blockquote.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Back to the first level.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr/&gt;
&lt;h2 id="code-block"&gt;Code Block&lt;a href="#code-block" title="Permanent link"&gt;&lt;/a&gt;&lt;a class="headerlink" href="#code-block" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;line numbers can be added &lt;a href="https://jackdewinter.github.io/2019/06/30/extended-markdown-examples/#codehilite-code-blocks-with-line-numbers"&gt;via extensions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="sb"&gt; ```text&lt;/span&gt;
Make things only as complex as they need to be.
&lt;span class="sb"&gt; ```&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Make things only as complex as they need to be.  
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="sb"&gt; ```Python&lt;/span&gt;
&lt;span class="c1"&gt;# Blogroll&lt;/span&gt;
&lt;span class="n"&gt;LINKS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Pelican'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Pelican'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'http://getpelican.com/'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
         &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="sb"&gt; ```&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Blogroll&lt;/span&gt;
&lt;span class="n"&gt;LINKS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Pelican'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Pelican'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'http://getpelican.com/'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
         &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h2 id="tables"&gt;Tables&lt;a href="#tables" title="Permanent link"&gt;&lt;/a&gt;&lt;a class="headerlink" href="#tables" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;colons can be used to align columns.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;| Column1 | Column 2 | Column 3
|---|---|---|
| Value 1 | Value 2 | Value 3 |
| Value 4 | Value 5 | Value 6 |
| Value 7 | Value 8 | Value 9 |

| Tables        | Are           | Cool  |
| ------------- |:-------------:| -----:|
| col 3 is      | right-aligned | $1600 |
| col 2 is      | centered      |   $12 |
| zebra stripes | are neat      |    $1 |
&lt;/pre&gt;&lt;/div&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Column1&lt;/th&gt;
&lt;th&gt;Column 2&lt;/th&gt;
&lt;th&gt;Column 3&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Value 1&lt;/td&gt;
&lt;td&gt;Value 2&lt;/td&gt;
&lt;td&gt;Value 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Value 4&lt;/td&gt;
&lt;td&gt;Value 5&lt;/td&gt;
&lt;td&gt;Value 6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Value 7&lt;/td&gt;
&lt;td&gt;Value 8&lt;/td&gt;
&lt;td&gt;Value 9&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Tables&lt;/th&gt;
&lt;th align="center"&gt;Are&lt;/th&gt;
&lt;th align="right"&gt;Cool&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;col 3 is&lt;/td&gt;
&lt;td align="center"&gt;right-aligned&lt;/td&gt;
&lt;td align="right"&gt;$1600&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;col 2 is&lt;/td&gt;
&lt;td align="center"&gt;centered&lt;/td&gt;
&lt;td align="right"&gt;$12&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;zebra stripes&lt;/td&gt;
&lt;td align="center"&gt;are neat&lt;/td&gt;
&lt;td align="right"&gt;$1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr/&gt;
&lt;h2 id="links"&gt;Links&lt;a href="#links" title="Permanent link"&gt;&lt;/a&gt;&lt;a class="headerlink" href="#links" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="local-links"&gt;Local Links&lt;a href="#local-links" title="Permanent link"&gt;&lt;/a&gt;&lt;a class="headerlink" href="#local-links" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;{filename}&lt;/code&gt; tag indicates location in the content folder.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[&lt;span class="nt"&gt;About Page\&lt;/span&gt;](&lt;span class="na"&gt;{filename}/pages/landing-page-about-hidden.md&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href="https://jackdewinter.github.io/pages/landing-page-about-hidden.html"&gt;About Page&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="remote-links"&gt;Remote Links&lt;a href="#remote-links" title="Permanent link"&gt;&lt;/a&gt;&lt;a class="headerlink" href="#remote-links" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;proper &lt;span class="caps"&gt;URL&lt;/span&gt; indicates a remote website&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[&lt;span class="nt"&gt;Python Package Index\&lt;/span&gt;](&lt;span class="na"&gt;https://pypi.org&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href="https://pypi.org"&gt;Python Package Index&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="download-links"&gt;Download Links&lt;a href="#download-links" title="Permanent link"&gt;&lt;/a&gt;&lt;a class="headerlink" href="#download-links" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;download links are not natively supported in Markdown&lt;/li&gt;
&lt;li&gt;must explicitly create &lt;span class="caps"&gt;HTML&lt;/span&gt; text inline to achieve that Creating a link to a file to download, not display, is not natively supported in markdown.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[&lt;span class="nt"&gt;Pelican Brag Document (display)\&lt;/span&gt;](&lt;span class="na"&gt;{static}/images/markdown-1/pelican.txt&lt;/span&gt;)  
&amp;lt;a href="{static}/images/pelican.txt" download&amp;gt;Pelican Brag Document (download)&amp;lt;/a&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href="https://jackdewinter.github.io/images/markdown-1/pelican.txt"&gt;Pelican Brag Document (display)&lt;/a&gt;&lt;br/&gt;
&lt;a href="https://jackdewinter.github.io/images/markdown-1/pelican.txt"&gt;Pelican Brag Document (download)&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="images"&gt;Images&lt;a href="#images" title="Permanent link"&gt;&lt;/a&gt;&lt;a class="headerlink" href="#images" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;{filename}&lt;/code&gt; tag indicates location in the content folder.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;![&lt;span class="nt"&gt;python logo&lt;/span&gt;](&lt;span class="na"&gt;https://jackdewinter.github.io/images/markdown-1/python_icon.png&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img alt="python logo" src="https://jackdewinter.github.io/images/markdown-1/python_icon.png"/&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Markdown"&gt;Markdown&lt;/a&gt; allows for &lt;span class="caps"&gt;HTML&lt;/span&gt; pages to be written using a simple text editor with no knowledge of &lt;span class="caps"&gt;HTML&lt;/span&gt;. &lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;&lt;a href="http://docs.getpelican.com/en/stable/"&gt;Pelican&lt;/a&gt; is a Static Site Generator written in Python. &lt;a class="footnote-backref" href="#fnref:2" title="Jump back to footnote 2 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;The Elegant theme’s repository &lt;a href="https://github.com/Pelican-Elegant/elegant"&gt;is here&lt;/a&gt; &lt;a class="footnote-backref" href="#fnref:3" title="Jump back to footnote 3 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Website"></category><category term="markdown"></category><category term="example"></category></entry><entry><title>Claim website on Google, Yandex and Bing</title><link href="https://dvesti.github.io/Pelican/2019/06/27/website-claim/" rel="alternate"></link><published>2019-06-27T00:00:00+03:00</published><updated>2019-06-27T00:00:00+03:00</updated><author><name>Dmitriev</name></author><id>tag:dvesti.github.io,2019-06-27:/Pelican/2019/06/27/website-claim/</id><summary type="html">&lt;p&gt;Easily insert headers to claim&amp;nbsp;website&lt;/p&gt;</summary><content type="html">&lt;p&gt;For submitting a website and sitemap to Google Search Console or Bing Webmaster tools or Yandex Webmaster we&amp;#8217;ve to consider some&amp;nbsp;steps.&lt;/p&gt;
&lt;p&gt;One of those steps is to claim the website&amp;nbsp;ownership.&lt;/p&gt;
&lt;p&gt;Several approaches are&amp;nbsp;available:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a specific file on the root folder of the&amp;nbsp;website&lt;/li&gt;
&lt;li&gt;Use a &lt;span class="caps"&gt;DNS&lt;/span&gt;&amp;nbsp;Record&lt;/li&gt;
&lt;li&gt;Insert a &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; &lt;span class="caps"&gt;TAG&lt;/span&gt; in pages to claim&amp;nbsp;it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Usually both &lt;span class="caps"&gt;DNS&lt;/span&gt; record or uploading files make things more complicated
(require &lt;span class="caps"&gt;DNS&lt;/span&gt; setup, or configure pelican to upload static file to path,&amp;nbsp;etc).&lt;/p&gt;
&lt;p&gt;Pelican-Elegant has simplified this by including support for the &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; &lt;span class="caps"&gt;TAG&lt;/span&gt;
being inserted if the values are defined in&amp;nbsp;pelicanconf.&lt;/p&gt;
&lt;p&gt;Use the following variables to insert the relevant &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; in the document&amp;nbsp;headers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CLAIM_GOOGLE&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CLAIM_BING&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CLAIM_YANDEX&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Each one of those should be filled according to the values provided by
Google/Bing on their respective websites for&amp;nbsp;webmasters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.google.com/webmasters/tools/dashboard?pli=1"&gt;Google Search&amp;nbsp;Console&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.bing.com/webmaster/configure/verify/ownership"&gt;Bing Webmaster&amp;nbsp;tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://webmaster.yandex.com/sites/"&gt;Yandex&amp;nbsp;Webmaster&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once configured and when site is regenerated, the header should be&amp;nbsp;there.&lt;/p&gt;</content><category term="Analytics, SEO and SMO"></category><category term="google"></category><category term="bing"></category><category term="yandex"></category><category term="crawler"></category></entry><entry><title>Version 2.2.0</title><link href="https://dvesti.github.io/Pelican/2019/06/09/version-2-2-0-release-notes/" rel="alternate"></link><published>2019-06-09T18:58:00+03:00</published><updated>2019-06-09T18:58:00+03:00</updated><author><name>Dmitriev</name></author><id>tag:dvesti.github.io,2019-06-09:/Pelican/2019/06/09/version-2-2-0-release-notes/</id><summary type="html">&lt;p&gt;Update TipueSearch and add project list&amp;nbsp;customization&lt;/p&gt;</summary><content type="html">&lt;p&gt;We are planning to make several improvements in our infrastructure, which includes pull request previews and automated releases. In this regard, we have removed our standalone documentation repository from Github and moved it inside Elegant source code repository. You are going to see the result of this change in our next couple of&amp;nbsp;releases.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;New: TipueSearch updated to&amp;nbsp;7.1&lt;/li&gt;
&lt;li&gt;New: Use &lt;code&gt;PROJECTS_TITLE&lt;/code&gt; to customize project list title. (default My&amp;nbsp;Projects)&lt;/li&gt;
&lt;li&gt;Changed: Reading Time is displayed only if it is greater than &lt;code&gt;READING_TIME_LOWER_LIMIT&lt;/code&gt; variable (default 4&amp;nbsp;min)&lt;/li&gt;
&lt;li&gt;Changed: Project documentation has been moved inside the Elegant&amp;nbsp;repository&lt;/li&gt;
&lt;li&gt;Removed: Google&amp;nbsp;Plus&lt;/li&gt;
&lt;/ul&gt;</content><category term="Release Notes"></category><category term="change-log"></category><category term="project-management"></category></entry><entry><title>Creating a Photo Gallery Article</title><link href="https://dvesti.github.io/Pelican/2019/06/09/how-to-use-photos-plugin/" rel="alternate"></link><published>2019-06-09T10:49:00+03:00</published><updated>2019-06-09T10:49:00+03:00</updated><author><name>Talha Mansoor</name></author><id>tag:dvesti.github.io,2019-06-09:/Pelican/2019/06/09/how-to-use-photos-plugin/</id><summary type="html">&lt;p&gt;Elegant can be configured to provide a simple display of a series of images, usually photos. Instead of asking the article&amp;#8217;s author to manually add a link for each photo, this feature provides basic gallery behavior with almost no cost to the&amp;nbsp;author.&lt;/p&gt;</summary><content type="html">
&lt;p&gt;In many cases, when an author writes an article and includes an image, there is a specific
reason that the image needs to be in that exact place. A good example of this is the image
at the end of this section, specifically part of this first section to give an early visual
on what visual change is contained within the article. However, in some cases, the author
wishes to provide a bit of preamble to a series of pictures, and then wants those pictures to
be displayed with little effort. This action is most frequently performed when an author
wants to share a series of photos on a given subject, similar to how they would display them
in a brick and mortar art gallery.&lt;/p&gt;
&lt;p&gt;Elegant provides for a simple, yet effective photo gallery that displays thumbnails, one for
each member of a set of images. These sets of images are defined by specifying a directory
containing the set of images to present to the reader. If that reader is then interested in
viewing one or more of the full images, clicking on the respective thumbnail creates a window
the size of the browser to display the image in. That window has a number of simple controls,
such as a close button, a previous image button and a next image button.&lt;/p&gt;
&lt;p&gt;Here is an example of what the Image Gallery section of such an article may look like:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Photo Gallery Demonstration" src="https://dvesti.github.io/Pelican/articles/images/elegant-theme_photo-gallery.png"/&gt;&lt;/p&gt;
&lt;p&gt;Note that the photo gallery itself will be placed at the end of any text presented for the article.&lt;/p&gt;
&lt;h2 id="configuration"&gt;Configuration&lt;a class="headerlink" href="#configuration" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To enable the Photo Gallery plugin, add &lt;code&gt;photos&lt;/code&gt; to the &lt;code&gt;PLUGINS&lt;/code&gt; configuration variable in
your Pelican configuration.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;PLUGINS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'photos'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://github.com/getpelican/pelican-plugins/blob/master/photos/README.md"&gt;photos plugin&lt;/a&gt; requires the Python &lt;code&gt;pillow&lt;/code&gt; package to be installed.&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id="pelican-on-windows"&gt;Pelican on Windows&lt;a class="headerlink" href="#pelican-on-windows" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If you are running Pelican on a Windows machine, include the following configuration in your
&lt;code&gt;pelicanconf.py&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;PHOTO_RESIZE_JOBS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Due to known issues in the
&lt;a href="https://stackoverflow.com/questions/41385708/multiprocessing-example-giving-attributeerror"&gt;Windows implementation of Python&lt;/a&gt;
dealing with multiprocessing, a function being called within a multiprocessing context must be
written to a specific pattern. Currently, the Photo Plugins has not been written to that
pattern. Setting the &lt;code&gt;PHOTO_RESIZE_JOBS&lt;/code&gt; configuration variable to &lt;code&gt;-1&lt;/code&gt;
circumvents this issue by forcing the photo processing code to work in debug mode on a single
thread without invoking any of the multiprocessing code.&lt;/p&gt;
&lt;h2 id="article-metadata"&gt;Article Metadata&lt;a class="headerlink" href="#article-metadata" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Once the configuration for Photo Gallery is enabled in the configuration file, using this
feature for a given article requires that the article contains the &lt;code&gt;gallery&lt;/code&gt;
&lt;a href="https://dvesti.github.io/Pelican/2019/07/03/metadata/"&gt;metadata&lt;/a&gt; field value.&lt;/p&gt;
&lt;p&gt;The text assigned to the &lt;code&gt;gallery&lt;/code&gt; metadata field is the location of the directory where the
images to be displayed resides. This location is relative to the article in which the
&lt;code&gt;gallery&lt;/code&gt; metadata field is placed.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;gallery&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;filename&lt;/span&gt;&lt;span class="p p-Indicator"&gt;}&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;../gallery-source/dragondance&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the above example, the actual directory containing the images to display is the
&lt;code&gt;dragondance&lt;/code&gt; directory. While not specified in the example, the directory &lt;code&gt;articles&lt;/code&gt; and the
directory &lt;code&gt;gallery-source&lt;/code&gt; are at the same directory depth, one directory to contain articles
and one directory to contain galleries. By that convention, the article containing the
&lt;code&gt;gallery&lt;/code&gt; metadata is located in the the &lt;code&gt;articles&lt;/code&gt; directory. Therefore, the path to the
directory containing the &lt;code&gt;dragondance&lt;/code&gt; directory is &lt;code&gt;../gallery-source/&lt;/code&gt;. Together, the entire
path to the &lt;code&gt;dragondance&lt;/code&gt; directory from the article becomes &lt;code&gt;../gallery-source/dragondance&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id="photo-gallery-titles"&gt;Photo Gallery Titles&lt;a class="headerlink" href="#photo-gallery-titles" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Titles for a photo gallery are displayed in a large font directly above the first row of the
photo gallery. To specify the title for a gallery, add the required title to the metadata in
the &lt;code&gt;gallery&lt;/code&gt; metadata field within curly braces (‘{‘ and ‘}’) as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;gallery&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;filename&lt;/span&gt;&lt;span class="p p-Indicator"&gt;}&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;../gallery-source/dragondance{Dragon Dance}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="multiple-photo-galleries-in-the-same-article"&gt;Multiple Photo Galleries in the Same Article&lt;a class="headerlink" href="#multiple-photo-galleries-in-the-same-article" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Multiple photo galleries can be display, in order, within a single article. This is
accomplished by specify a comma separated list of photo galleries to display in the &lt;code&gt;gallery&lt;/code&gt;
metadata field. For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;gallery&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;filename&lt;/span&gt;&lt;span class="p p-Indicator"&gt;}&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;../gallery-source/dragondance{Dragon Dance}, {filename}../gallery-source/hamsterdance{Hamster Dance}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;will display the title &lt;code&gt;Dragon Dance&lt;/code&gt;, the Dragon Dance photo gallery, the title
&lt;code&gt;Hamster Dance&lt;/code&gt;, and finally the Hamster Dance photo gallery. The title of the specific
photo gallery is not required, but when including multiple galleries, is often desired.&lt;/p&gt;
&lt;h1 id="advanced-configuration"&gt;Advanced Configuration&lt;a class="headerlink" href="#advanced-configuration" title="Permanent link"&gt; &lt;/a&gt;&lt;/h1&gt;
&lt;div class="admonition warning"&gt;
&lt;p class="admonition-title"&gt;Warning&lt;/p&gt;
&lt;p&gt;Processing a quantity of photos in the 10,000s range can take multiple hours to complete. To reduce the effort needed to publish photo galleries, the &lt;code&gt;Photo&lt;/code&gt; plugin will only process images if the output file is not already present in the destination directory. For more information, please refer to the &lt;a href="https://dvesti.github.io/Pelican/2019/06/09/how-to-use-photos-plugin-advanced/#caching-processed-images"&gt;Caching Image Processing&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Using the above configuration, a photo gallery will be added to the end of the article
containing the &lt;code&gt;gallery&lt;/code&gt; metadata using default settings. For additional ways to use photo
galleries and for modifications to those default settings, please consult the sibling article
on
&lt;a href="https://dvesti.github.io/Pelican/2019/06/09/how-to-use-photos-plugin-advanced/"&gt;Advanced Configuration&lt;/a&gt; .&lt;/p&gt;</content><category term="Supported Plugins"></category><category term="pelican-theme"></category><category term="pelican-plugin"></category><category term="photo gallery"></category></entry><entry><title>Advanced Configuration for an Image Gallery Article</title><link href="https://dvesti.github.io/Pelican/2019/06/09/how-to-use-photos-plugin-advanced/" rel="alternate"></link><published>2019-06-09T10:49:00+03:00</published><updated>2019-06-09T10:49:00+03:00</updated><author><name>Talha Mansoor</name></author><id>tag:dvesti.github.io,2019-06-09:/Pelican/2019/06/09/how-to-use-photos-plugin-advanced/</id><summary type="html">&lt;p&gt;Elegant can be configured to provide a simple display of a series of images, usually photos. Instead of asking the author to manually add a link for each photo, this feature provides basic gallery behavior at low cost to the&amp;nbsp;author.&lt;/p&gt;</summary><content type="html">
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This article continues the documentation of the Photo Gallery configuration documented in the
article &lt;a href="https://dvesti.github.io/Pelican/2019/06/09/how-to-use-photos-plugin/"&gt;Creating a Photo Gallery Article&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;While getting started with a default photo gallery is relatively easy (one configuration
variable and a metadata field per article), enabling some of the more advanced features
requires a little more effort. This effort will allow for the inclusion of single gallery
photos into articles and the fine tuning of the image transformations used to render the
photos for the photo galleries and articles. Together these changes will give you the power
to customize your photo gallery to your requirements.&lt;/p&gt;
&lt;h2 id="including-gallery-photos-in-articles"&gt;Including Gallery Photos in Articles&lt;a class="headerlink" href="#including-gallery-photos-in-articles" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Prior to including single gallery photos in articles, the &lt;code&gt;PHOTO_LIBRARY&lt;/code&gt; configuration
variable must first be set to the full path of the directory containing all of the galleries.
For example, in the previous article,
&lt;a href="https://dvesti.github.io/Pelican/2019/06/09/how-to-use-photos-plugin/#article-metadata"&gt;Creating a Photo Gallery Article&lt;/a&gt;,
the gallery was added to the article as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;gallery&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;filename&lt;/span&gt;&lt;span class="p p-Indicator"&gt;}&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;../gallery-source/dragondance&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Assuming that you have installed a standard installation of Pelican in the directory
&lt;code&gt;/home/stuff/blog-content&lt;/code&gt; and inferring from the above metadata that all photo galleries are
located in the &lt;code&gt;content/gallery-source&lt;/code&gt; directory, the full path to the galleries should be as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;PHOTO_LIBRARY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'/home/stuff/blog-content/website/content/gallery-source'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="adding-a-single-photos-to-an-article"&gt;Adding a Single Photos to an Article&lt;a class="headerlink" href="#adding-a-single-photos-to-an-article" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Once the above configuration has been completed, add a photo into the body of an article using
the following format: &lt;code&gt;{photo}folder/image.jpg&lt;/code&gt;. The &lt;code&gt;{photo}&lt;/code&gt; part of the format calls out
this image as part of a gallery, and instructs the &lt;code&gt;Photos&lt;/code&gt; plugin to resize a photo
specifically for use in articles. The &lt;code&gt;folder&lt;/code&gt; part refers to the folder representing the
gallery, and the &lt;code&gt;image.jpg&lt;/code&gt; is the filename of the photo within the &lt;code&gt;folder&lt;/code&gt; directory.&lt;/p&gt;
&lt;p&gt;For example, say you want to highlight one of the photos, &lt;code&gt;photo-1.jpg&lt;/code&gt;, that was contained
within the &lt;code&gt;dragondance&lt;/code&gt; gallery presented in your article. To include it in a Markdown
article, add the following text to the article:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;![&lt;span class="nt"&gt;first image&lt;/span&gt;](&lt;span class="na"&gt;{photo}dragondance/photo-1.jpg&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In addition, using the prefix &lt;code&gt;{lightbox}&lt;/code&gt; instead of &lt;code&gt;{photo}&lt;/code&gt; will cause the thumbnail of the
photo to be displayed in the article. Clicking on the thumbnail will bring up the full sized
image from the photo gallery, similar to how it was displayed in the photo gallery.&lt;/p&gt;
&lt;h2 id="modifying-image-display-in-galleries"&gt;Modifying Image Display in Galleries&lt;a class="headerlink" href="#modifying-image-display-in-galleries" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There is a small amount of configuration that is available to modify how a single photo is
displayed in the galleries. These modifications include specifying captions for one or more
photos, specifying &lt;span class="caps"&gt;EXIF&lt;/span&gt; information for one or more photos, and specifying one or more photos
to not display as part of the gallery.&lt;/p&gt;
&lt;p&gt;All three of these modifications are controlled by text files that are located in the same
source directory as the photos. These text files provide extra information that is used when
the article containing the specified photo gallery is being generated.&lt;/p&gt;
&lt;p&gt;For the first two choices, there are two distinct files: &lt;code&gt;exif.txt&lt;/code&gt; and &lt;code&gt;captions.txt&lt;/code&gt;. In
both cases, the file format is simply the name of the image, a colon, and the information to
associate with the photo.&lt;/p&gt;
&lt;p&gt;For example, the information in the &lt;code&gt;exif.txt&lt;/code&gt; may be:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;best.jpg: Canon EOS 5D Mark II - 20mm f/8 1/250s ISO 100
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and the information in the &lt;code&gt;captions.txt&lt;/code&gt; file may be:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;best.jpg: My best photo ever! How lucky of me!
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Elegant will display both of these pieces of information at the bottom of the popup for an
individual image.&lt;/p&gt;
&lt;p&gt;To remove keep the photo file in a gallery, but not show it as part of the gallery, the
&lt;code&gt;blacklist.txt&lt;/code&gt; file is used. Even simpler than the previous two files, the file format is
simply the name of the photo to exclude, one photo to a line.&lt;/p&gt;
&lt;p&gt;For example, to keep the file &lt;code&gt;this-file-will-be-skipped.jpg&lt;/code&gt; in the gallery directory but not
display it as part of the gallery, the &lt;code&gt;blacklist.txt&lt;/code&gt; file would look like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;this-file-will-be-skipped.jpg
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="caching-processed-images"&gt;Caching Processed Images&lt;a class="headerlink" href="#caching-processed-images" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To reduce the need to reprocess images to fit into the gallery, article, and thumbnail sizes,
the &lt;code&gt;Photo&lt;/code&gt; plugin only processes images if the output file is not already present in the
destination directory. As such, to apply any configuration changes to images that have already
been processed, their destination images need to deleted from the relevant directories under
the &lt;code&gt;photos&lt;/code&gt; directory from the Pelican output.&lt;/p&gt;
&lt;p&gt;As both of the following sections change configuration variables that affect how the images
are processed, this note on caching applies to any changes of configuration variables
specified in the following sections.&lt;/p&gt;
&lt;h2 id="advanced-configuration-values"&gt;Advanced Configuration Values&lt;a class="headerlink" href="#advanced-configuration-values" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The definitive list of the values and their defaults is located on the
&lt;a href="https://github.com/getpelican/pelican-plugins/blob/master/photos/README.md"&gt;Photos Plugins&lt;/a&gt; webpage.&lt;/p&gt;
&lt;p&gt;The definitive list has been pared down, tested, and documented with specific focus on the
Elegant theme. Testing was performed using the list from the Photos Plugin webpage along
with the source code for the Photos Plugin. Any significant difference between the behavior
documented below and the definitive list is usually attributed to differences between the
source code and the documentation for the Photos Plugin.&lt;/p&gt;
&lt;p&gt;As a decent part of this information is presented after testing and research, please feel free
to contact us if you see different behavior than is documented here.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Configuration Name&lt;/th&gt;
&lt;th&gt;Default Value&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;PHOTO_GALLERY&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;(1024, 768, 80)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Three attributes, describing the maximum width, the maximum height, and the quality of the resized image. The specific set of attributes applies to the maximum size of the photo displayed when the reader clicks on a gallery’s thumbnail image in the article. Note that the quality of the resized image only applies to &lt;span class="caps"&gt;JPG&lt;/span&gt; images.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;PHOTO_ARTICLE&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;(760, 506, 80)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The same attributes as &lt;code&gt;PHOTO_GALLERY&lt;/code&gt;, but for the size of a photo from a gallery used in an article.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;PHOTO_THUMB&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;(192, 144, 60)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The same attributes as &lt;code&gt;PHOTO_GALLERY&lt;/code&gt;, but for the size of the thumbnails used to show the contents of the gallery.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;PHOTO_SQUARE_THUMB&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;False&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;This setting controls whether or not the thumbnails retain their aspect ratio when resized. If this setting is &lt;code&gt;True&lt;/code&gt;, the thumbnails will not retain their aspect ratio and will be cropped to fit into the rectangle defined by the &lt;code&gt;PHOTO_THUMB&lt;/code&gt; configuration variable.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;PHOTO_RESIZE_JOBS&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Number of resize jobs to be run in parallel. If installed on a Windows machine, &lt;a href="https://dvesti.github.io/Pelican/2019/06/09/how-to-use-photos-plugin/#pelican-on-windows"&gt;read this&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;PHOTO_WATERMARK&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;True&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Add a watermark to all photos in articles and pages. The watermarks added are controlled by the &lt;code&gt;PHOTO_WATERMARK_TEXT&lt;/code&gt; and &lt;code&gt;PHOTO_WATERMARK_IMG&lt;/code&gt; configuration variables described below. Note that if both are specified, both will be used.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;PHOTO_WATERMARK_TEXT&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;SITENAME&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Text to use for the watermark.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;PHOTO_WATERMARK_TEXT_COLOR&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;(255, 255, 255)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Color of the text used for the watermark.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;PHOTO_WATERMARK_IMG&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;''&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Full path to the image to use as a watermark.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;PHOTO_WATERMARK_IMG_SIZE&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;False&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Size to apply to the watermark image, expressed as &lt;code&gt;(width,height)&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="jpg-specific-exif-configuration-values"&gt;&lt;span class="caps"&gt;JPG&lt;/span&gt; Specific &lt;span class="caps"&gt;EXIF&lt;/span&gt; Configuration Values&lt;a class="headerlink" href="#jpg-specific-exif-configuration-values" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://github.com/getpelican/pelican-plugins/blob/master/photos/README.md"&gt;photos plugin&lt;/a&gt; requires the Python &lt;code&gt;piexif&lt;/code&gt; package to provide control over any &lt;a href="https://photographylife.com/what-is-exif-data"&gt;&lt;span class="caps"&gt;EXIF&lt;/span&gt;&lt;/a&gt; information in the images.&lt;/p&gt;
&lt;/div&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Configuration Name&lt;/th&gt;
&lt;th&gt;Default Value&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;PHOTO_EXIF_KEEP&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;False&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Keep the &lt;span class="caps"&gt;EXIF&lt;/span&gt; information from the input photo.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;PHOTO_EXIF_REMOVE_GPS&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;False&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Remove any &lt;span class="caps"&gt;EXIF&lt;/span&gt; &lt;span class="caps"&gt;GPS&lt;/span&gt; information from the photos.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;PHOTO_EXIF_AUTOROTATE&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;True&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Use the &lt;span class="caps"&gt;EXIF&lt;/span&gt; orientation field to determine how to rotate the photo so all photos are in a standard orientation.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;PHOTO_EXIF_COPYRIGHT&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;False&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;If not &lt;code&gt;False&lt;/code&gt; and no existing copyright information is provided in the image, attach an author and license to the file. Choices include: - &lt;span class="caps"&gt;COPYRIGHT&lt;/span&gt;, &lt;a href="https://creativecommons.org/share-your-work/public-domain/cc0/"&gt;&lt;span class="caps"&gt;CC0&lt;/span&gt;&lt;/a&gt;, &lt;a href="https://creativecommons.org/licenses/by-nc-nd/2.0/"&gt;&lt;span class="caps"&gt;CC&lt;/span&gt;-&lt;span class="caps"&gt;BY&lt;/span&gt;-&lt;span class="caps"&gt;NC&lt;/span&gt;-&lt;span class="caps"&gt;ND&lt;/span&gt;&lt;/a&gt;, &lt;a href="https://creativecommons.org/licenses/by-nc-sa/3.0/"&gt;&lt;span class="caps"&gt;CC&lt;/span&gt;-&lt;span class="caps"&gt;BY&lt;/span&gt;-&lt;span class="caps"&gt;NC&lt;/span&gt;-&lt;span class="caps"&gt;SA&lt;/span&gt;&lt;/a&gt;, &lt;a href="https://creativecommons.org/licenses/by/4.0"&gt;&lt;span class="caps"&gt;CC&lt;/span&gt;-&lt;span class="caps"&gt;BY&lt;/span&gt;&lt;/a&gt;, &lt;a href="https://creativecommons.org/licenses/by-sa/4.0"&gt;&lt;span class="caps"&gt;CC&lt;/span&gt;-&lt;span class="caps"&gt;BY&lt;/span&gt;-&lt;span class="caps"&gt;SA&lt;/span&gt;&lt;/a&gt;, &lt;a href="https://creativecommons.org/licenses/by-nc/4.0/"&gt;&lt;span class="caps"&gt;CC&lt;/span&gt;-&lt;span class="caps"&gt;BY&lt;/span&gt;-&lt;span class="caps"&gt;NC&lt;/span&gt;&lt;/a&gt;, &lt;a href="https://creativecommons.org/licenses/by-nd/4.0"&gt;&lt;span class="caps"&gt;CC&lt;/span&gt;-&lt;span class="caps"&gt;BY&lt;/span&gt;-&lt;span class="caps"&gt;ND&lt;/span&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;PHOTO_EXIF_COPYRIGHT_AUTHOR&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;SITENAME&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;If &lt;code&gt;PHOTO_EXIF_COPYRIGHT&lt;/code&gt; is not &lt;code&gt;False&lt;/code&gt; and no copyright author is present in the image, use this value as the author.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content><category term="Supported Plugins"></category><category term="pelican-theme"></category><category term="pelican-plugin"></category><category term="photo gallery"></category></entry><entry><title>How to use Heap Analytics</title><link href="https://dvesti.github.io/Pelican/2019/03/31/how-to-use-heap-analytics/" rel="alternate"></link><published>2019-03-31T16:45:00+03:00</published><updated>2019-03-31T16:45:00+03:00</updated><author><name>Dmitriev</name></author><id>tag:dvesti.github.io,2019-03-31:/Pelican/2019/03/31/how-to-use-heap-analytics/</id><summary type="html">&lt;p&gt;Elegant Pelican theme supports Heap Analytics out&amp;nbsp;of&lt;/p&gt;</summary><content type="html">&lt;p&gt;the box. This articles describes how to set it up.
Keywords:
authors: Talha&amp;nbsp;Mansoor  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Elegant supports the popular web tracking service,
&lt;a href="https://heap.io/"&gt;Heap Analytics&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;From your &lt;a href="https://heapanalytics.com/app/account"&gt;Heap console&lt;/a&gt;, navigate to
&lt;em&gt;Settings&lt;/em&gt; → &lt;em&gt;Projects&lt;/em&gt;. You need to copy the Project &lt;span class="caps"&gt;ID&lt;/span&gt; you want to log to.
Set &lt;code&gt;HEAP_ANALYTICS&lt;/code&gt; in your configuration with this&amp;nbsp;value.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;HEAP_ANALYTICS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1234567890&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That&amp;#8217;s it. Elegant will take care of the&amp;nbsp;rest.&lt;/p&gt;</content><category term="Analytics, SEO and SMO"></category><category term="web-analytics"></category></entry><entry><title>Формулы — Math Preview</title><link href="https://dvesti.github.io/Pelican/2019/03/04/formuly-math-preview/" rel="alternate"></link><published>2019-03-04T16:01:00+02:00</published><updated>2019-03-04T16:01:00+02:00</updated><author><name>Murray Bourne</name></author><id>tag:dvesti.github.io,2019-03-04:/Pelican/2019/03/04/formuly-math-preview/</id><summary type="html">
&lt;p&gt;Use KaTeX
See https://github.com/KaTeX/KaTeX&lt;/p&gt;
&lt;p&gt;Use Mmark
See https://gohugo.io/content-management/formats/#mmark&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.intmath.com/cg5/katex-mathjax-comparison.php"&gt;KaTeX and MathJax Comparison Demo, currently processed as KaTex&lt;/a&gt;&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id="repeating-fractions"&gt;Repeating fractions&lt;a class="headerlink" href="#repeating-fractions" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;div class="math"&gt;$$
\frac{1}{\Bigl(\sqrt{\phi \sqrt{5}}-\phi\Bigr) e^{\frac25 \pi}} \equiv 1+\frac{e^{-2\pi}} {1+\frac{e^{-4 …&lt;/div&gt;</summary><content type="html">
&lt;p&gt;Use KaTeX
See https://github.com/KaTeX/KaTeX&lt;/p&gt;
&lt;p&gt;Use Mmark
See https://gohugo.io/content-management/formats/#mmark&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.intmath.com/cg5/katex-mathjax-comparison.php"&gt;KaTeX and MathJax Comparison Demo, currently processed as KaTex&lt;/a&gt;&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id="repeating-fractions"&gt;Repeating fractions&lt;a class="headerlink" href="#repeating-fractions" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;div class="math"&gt;$$
\frac{1}{\Bigl(\sqrt{\phi \sqrt{5}}-\phi\Bigr) e^{\frac25 \pi}} \equiv 1+\frac{e^{-2\pi}} {1+\frac{e^{-4\pi}} {1+\frac{e^{-6\pi}} {1+\frac{e^{-8\pi}} {1+\cdots} } } }
$$&lt;/div&gt;
&lt;h2 id="summation-notation"&gt;Summation notation&lt;a class="headerlink" href="#summation-notation" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;div class="math"&gt;$$
\left( \sum_{k=1}^n a_k b_k \right)^2 \leq \left( \sum_{k=1}^n a_k^2 \right) \left( \sum_{k=1}^n b_k^2 \right)
$$&lt;/div&gt;
&lt;h2 id="sum-of-a-series"&gt;Sum of a Series&lt;a class="headerlink" href="#sum-of-a-series" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I broke up the next two examples into separate lines so it behaves better on a mobile phone. That’s why they include \displaystyle.&lt;/p&gt;
&lt;div class="math"&gt;$$
\displaystyle\sum_{i=1}^{k+1}i
$$&lt;/div&gt;
&lt;div class="math"&gt;$$
\displaystyle= \left(\sum_{i=1}^{k}i\right) +(k+1)
$$&lt;/div&gt;
&lt;div class="math"&gt;$$
\displaystyle= \frac{k(k+1)}{2}+k+1
$$&lt;/div&gt;
&lt;div class="math"&gt;$$
\displaystyle= \frac{k(k+1)+2(k+1)}{2}
$$&lt;/div&gt;
&lt;div class="math"&gt;$$
\displaystyle= \frac{(k+1)(k+2)}{2}
$$&lt;/div&gt;
&lt;div class="math"&gt;$$
\displaystyle= \frac{(k+1)((k+1)+1)}{2}
$$&lt;/div&gt;
&lt;h2 id="product-notation"&gt;Product notation&lt;a class="headerlink" href="#product-notation" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;div class="math"&gt;$$
\displaystyle 1 + \frac{q^2}{(1-q)}+\frac{q^6}{(1-q)(1-q^2)}+\cdots = \displaystyle \prod_{j=0}^{\infty}\frac{1}{(1-q^{5j+2})(1-q^{5j+3})}, \displaystyle\text{ for }\lvert q\rvert &amp;lt; 1.
$$&lt;/div&gt;
&lt;h2 id="inline-math"&gt;Inline math&lt;a class="headerlink" href="#inline-math" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;And here is some in-line math: &lt;/p&gt;
&lt;div class="math"&gt;$$ k_{n+1} = n^2 + k_n^2 - k_{n-1} $$&lt;/div&gt;
&lt;p&gt; , followed by some more text.&lt;/p&gt;
&lt;h2 id="greek-letters"&gt;Greek Letters&lt;a class="headerlink" href="#greek-letters" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;div class="math"&gt;$$
\Gamma\ \Delta\ \Theta\ \Lambda\ \Xi\ \Pi\ \Sigma\ \Upsilon\ \Phi\ \Psi\ \Omega
\alpha\ \beta\ \gamma\ \delta\ \epsilon\ \zeta\ \eta\ \theta\ \iota\ \kappa\ \lambda\ \mu\ \nu\ \xi \ \omicron\ \pi\ \rho\ \sigma\ \tau\ \upsilon\ \phi\ \chi\ \psi\ \omega\ \varepsilon\ \vartheta\ \varpi\ \varrho\ \varsigma\ \varphi
$$&lt;/div&gt;
&lt;h2 id="arrows"&gt;Arrows&lt;a class="headerlink" href="#arrows" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;div class="math"&gt;$$
\gets\ \to\ \leftarrow\ \rightarrow\ \uparrow\ \Uparrow\ \downarrow\ \Downarrow\ \updownarrow\ \Updownarrow
$$&lt;/div&gt;
&lt;div class="math"&gt;$$
\Leftarrow\ \Rightarrow\ \leftrightarrow\ \Leftrightarrow\ \mapsto\ \hookleftarrow
\leftharpoonup\ \leftharpoondown\ \rightleftharpoons\ \longleftarrow\ \Longleftarrow\ \longrightarrow
$$&lt;/div&gt;
&lt;div class="math"&gt;$$
\Longrightarrow\ \longleftrightarrow\ \Longleftrightarrow\ \longmapsto\ \hookrightarrow\ \rightharpoonup
$$&lt;/div&gt;
&lt;div class="math"&gt;$$
\rightharpoondown\ \leadsto\ \nearrow\ \searrow\ \swarrow\ \nwarrow
$$&lt;/div&gt;
&lt;h2 id="symbols"&gt;Symbols&lt;a class="headerlink" href="#symbols" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;div class="math"&gt;$$
\surd\ \barwedge\ \veebar\ \odot\ \oplus\ \otimes\ \oslash\ \circledcirc\ \boxdot\ \bigtriangleup
$$&lt;/div&gt;
&lt;div class="math"&gt;$$
\bigtriangledown\ \dagger\ \diamond\ \star\ \triangleleft\ \triangleright\ \angle\ \infty\ \prime\ \triangle
$$&lt;/div&gt;
&lt;h2 id="calculus"&gt;Calculus&lt;a class="headerlink" href="#calculus" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;div class="math"&gt;$$
\int u \frac{dv}{dx}\,dx=uv-\int \frac{du}{dx}v\,dx
$$&lt;/div&gt;
&lt;div class="math"&gt;$$
f(x) = \int_{-\infty}^\infty \hat f(\xi)\,e^{2 \pi i \xi x}
$$&lt;/div&gt;
&lt;div class="math"&gt;$$
\oint \vec{F} \cdot d\vec{s}=0
$$&lt;/div&gt;
&lt;h2 id="lorenz-equations"&gt;Lorenz Equations&lt;a class="headerlink" href="#lorenz-equations" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;div class="math"&gt;$$
\begin{aligned} \dot{x} &amp;amp; = \sigma(y-x) \\ \dot{y} &amp;amp; = \rho x - y - xz \\ \dot{z} &amp;amp; = -\beta z + xy \end{aligned}
$$&lt;/div&gt;
&lt;h2 id="cross-product"&gt;Cross Product&lt;a class="headerlink" href="#cross-product" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This works in KaTeX, but the separation of fractions in this environment is not so good.&lt;/p&gt;
&lt;div class="math"&gt;$$
\mathbf{V}_1 \times \mathbf{V}_2 = \begin{vmatrix} \mathbf{i} &amp;amp; \mathbf{j} &amp;amp; \mathbf{k} \\ \frac{\partial X}{\partial u} &amp;amp; \frac{\partial Y}{\partial u} &amp;amp; 0 \\ \frac{\partial X}{\partial v} &amp;amp; \frac{\partial Y}{\partial v} &amp;amp; 0 \end{vmatrix}
$$&lt;/div&gt;
&lt;p&gt;Here’s a workaround: make the fractions smaller with an extra class that targets the spans with “mfrac” class (makes no difference in the MathJax case):&lt;/p&gt;
&lt;div class="math"&gt;$$
\mathbf{V}_1 \times \mathbf{V}_2 = \begin{vmatrix} \mathbf{i} &amp;amp; \mathbf{j} &amp;amp; \mathbf{k} \\ \frac{\partial X}{\partial u} &amp;amp; \frac{\partial Y}{\partial u} &amp;amp; 0 \\ \frac{\partial X}{\partial v} &amp;amp; \frac{\partial Y}{\partial v} &amp;amp; 0 \end{vmatrix}
$$&lt;/div&gt;
&lt;h2 id="accents"&gt;Accents&lt;a class="headerlink" href="#accents" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;div class="math"&gt;$$
\hat{x}\ \vec{x}\ \ddot{x}
$$&lt;/div&gt;
&lt;h2 id="stretchy-brackets"&gt;Stretchy brackets&lt;a class="headerlink" href="#stretchy-brackets" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;div class="math"&gt;$$
\left(\frac{x^2}{y^3}\right)
$$&lt;/div&gt;
&lt;h2 id="evaluation-at-limits"&gt;Evaluation at limits&lt;a class="headerlink" href="#evaluation-at-limits" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;div class="math"&gt;$$
\left.\frac{x^3}{3}\right|_0^1
$$&lt;/div&gt;
&lt;h2 id="case-definitions"&gt;Case definitions&lt;a class="headerlink" href="#case-definitions" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;div class="math"&gt;$$
f(n) = \begin{cases} \frac{n}{2}, &amp;amp; \text{if } n\text{ is even} \\ 3n+1, &amp;amp; \text{if } n\text{ is odd} \end{cases}
$$&lt;/div&gt;
&lt;h2 id="maxwells-equations"&gt;Maxwell’s Equations&lt;a class="headerlink" href="#maxwells-equations" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;div class="math"&gt;$$
\begin{aligned} \nabla \times \vec{\mathbf{B}} -\, \frac1c\, \frac{\partial\vec{\mathbf{E}}}{\partial t} &amp;amp; = \frac{4\pi}{c}\vec{\mathbf{j}} \\ \nabla \cdot \vec{\mathbf{E}} &amp;amp; = 4 \pi \rho \\ \nabla \times \vec{\mathbf{E}}\, +\, \frac1c\, \frac{\partial\vec{\mathbf{B}}}{\partial t} &amp;amp; = \vec{\mathbf{0}} \\ \nabla \cdot \vec{\mathbf{B}} &amp;amp; = 0 \end{aligned}
$$&lt;/div&gt;
&lt;p&gt;These equations are quite cramped. We can add vertical spacing using (for example) [1em] after each line break (\). as you can see here:&lt;/p&gt;
&lt;div class="math"&gt;$$
\begin{aligned} \nabla \times \vec{\mathbf{B}} -\, \frac1c\, \frac{\partial\vec{\mathbf{E}}}{\partial t} &amp;amp; = \frac{4\pi}{c}\vec{\mathbf{j}} \\[1em] \nabla \cdot \vec{\mathbf{E}} &amp;amp; = 4 \pi \rho \\[0.5em] \nabla \times \vec{\mathbf{E}}\, +\, \frac1c\, \frac{\partial\vec{\mathbf{B}}}{\partial t} &amp;amp; = \vec{\mathbf{0}} \\[1em] \nabla \cdot \vec{\mathbf{B}} &amp;amp; = 0 \end{aligned}
$$&lt;/div&gt;
&lt;h2 id="statistics"&gt;Statistics&lt;a class="headerlink" href="#statistics" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Definition of combination:&lt;/p&gt;
&lt;div class="math"&gt;$$
\frac{n!}{k!(n-k)!} = {^n}C_k
{n \choose k}
$$&lt;/div&gt;
&lt;h2 id="fractions-on-fractions"&gt;Fractions on fractions&lt;a class="headerlink" href="#fractions-on-fractions" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;div class="math"&gt;$$
\frac{\frac{1}{x}+\frac{1}{y}}{y-z}
$$&lt;/div&gt;
&lt;h2 id="n-th-root"&gt;n-th root&lt;a class="headerlink" href="#n-th-root" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;div class="math"&gt;$$
\sqrt[n]{1+x+x^2+x^3+\ldots}
$$&lt;/div&gt;
&lt;h2 id="matrices"&gt;Matrices&lt;a class="headerlink" href="#matrices" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;div class="math"&gt;$$
\begin{pmatrix} a_{11} &amp;amp; a_{12} &amp;amp; a_{13}\\ a_{21} &amp;amp; a_{22} &amp;amp; a_{23}\\ a_{31} &amp;amp; a_{32} &amp;amp; a_{33} \end{pmatrix}
\begin{bmatrix} 0 &amp;amp; \cdots &amp;amp; 0 \\ \vdots &amp;amp; \ddots &amp;amp; \vdots \\ 0 &amp;amp; \cdots &amp;amp; 0 \end{bmatrix}
$$&lt;/div&gt;
&lt;h2 id="punctuation"&gt;Punctuation&lt;a class="headerlink" href="#punctuation" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;div class="math"&gt;$$
f(x) = \sqrt{1+x} \quad (x \ge -1)
f(x) \sim x^2 \quad (x\to\infty)
$$&lt;/div&gt;
&lt;p&gt;Now with punctuation:&lt;/p&gt;
&lt;div class="math"&gt;$$
f(x) = \sqrt{1+x}, \quad x \ge -1
f(x) \sim x^2, \quad x\to\infty
$$&lt;/div&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';

    var configscript = document.createElement('script');
    configscript.type = 'text/x-mathjax-config';
    configscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        availableFonts: ['STIX', 'TeX']," +
        "        preferredFont: 'STIX'," +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";

    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Blog"></category><category term="preview"></category><category term="math"></category></entry><entry><title>Version 2.1.1</title><link href="https://dvesti.github.io/Pelican/2019/02/10/version-2-1-1-release-notes/" rel="alternate"></link><published>2019-02-10T17:52:00+02:00</published><updated>2019-02-10T17:52:00+02:00</updated><author><name>Dmitriev</name></author><id>tag:dvesti.github.io,2019-02-10:/Pelican/2019/02/10/version-2-1-1-release-notes/</id><summary type="html">&lt;p&gt;Add compatibility for Jinja2&amp;nbsp;(v2.9)&lt;/p&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;New: Update code to be compatible with Jinja2&amp;nbsp;(v2.9)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In case you are stuck with Jinja2 (&amp;lt; V2.9) then you can use &lt;a href="https://dvesti.github.io/Pelican/2019/02/10/version-2-1-0-release-notes/"&gt;Elegant version 2.1.0&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Refer to following issues for&amp;nbsp;details.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/Pelican-Elegant/elegant/issues/162"&gt;Issue&amp;nbsp;#162&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Pelican-Elegant/elegant/issues/202"&gt;Issue&amp;nbsp;#202&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><category term="Release Notes"></category><category term="change-log"></category><category term="project-management"></category></entry><entry><title>Version 2.1.0</title><link href="https://dvesti.github.io/Pelican/2019/02/10/version-2-1-0-release-notes/" rel="alternate"></link><published>2019-02-10T11:34:00+02:00</published><updated>2019-02-10T11:34:00+02:00</updated><author><name>Dmitriev</name></author><id>tag:dvesti.github.io,2019-02-10:/Pelican/2019/02/10/version-2-1-0-release-notes/</id><summary type="html">&lt;p&gt;Add new features and&amp;nbsp;updates&lt;/p&gt;</summary><content type="html">&lt;h2 id="features"&gt;Features&lt;a class="headerlink" href="#features" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;New: Disable comments per article basis by setting &lt;code&gt;article.comments&lt;/code&gt; to&amp;nbsp;false&lt;/li&gt;
&lt;li&gt;New: Add &lt;code&gt;post_stats&lt;/code&gt; plugin&amp;nbsp;support&lt;/li&gt;
&lt;li&gt;New: Add &lt;a href="https://www.freelists.org/"&gt;FreeLists&lt;/a&gt;&amp;nbsp;support&lt;/li&gt;
&lt;li&gt;New: Add &lt;code&gt;itemscope&lt;/code&gt; tag to &lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="fixes"&gt;Fixes&lt;a class="headerlink" href="#fixes" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Fix: &lt;span class="caps"&gt;RSS&lt;/span&gt; feed does not work on Pelican&amp;nbsp;4&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="ci"&gt;&lt;span class="caps"&gt;CI&lt;/span&gt;&lt;a class="headerlink" href="#ci" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Improve&amp;nbsp;tests&lt;/li&gt;
&lt;/ul&gt;</content><category term="Release Notes"></category><category term="change-log"></category><category term="project-management"></category></entry><entry><title>Version 2.0.0</title><link href="https://dvesti.github.io/Pelican/2019/02/10/elegant-2-0-0-release-notes/" rel="alternate"></link><published>2019-02-10T05:59:00+02:00</published><updated>2019-02-10T05:59:00+02:00</updated><author><name>Pablo Iranzo Gómez</name></author><id>tag:dvesti.github.io,2019-02-10:/Pelican/2019/02/10/elegant-2-0-0-release-notes/</id><summary type="html">&lt;p&gt;Big improvements on all fronts – loads of bug fixes, improved &lt;span class="caps"&gt;W3C&lt;/span&gt; conformance, a community development model, and a new&amp;nbsp;website.&lt;/p&gt;</summary><content type="html">
&lt;h1 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt; &lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;With more than 4 years in the making, this release started “better late then never”, but it turned out to &lt;em&gt;so &lt;strong&gt;much&lt;/strong&gt;&lt;/em&gt; more than that.&lt;/p&gt;
&lt;p&gt;With the &lt;a href="https://dvesti.github.io/Pelican/2019/01/05/community-led-project/"&gt;community spark re-ignited&lt;/a&gt;, this has become the biggest release since probably 1.0. And as such a very worthy release to carry the 2.0 crown.&lt;/p&gt;
&lt;h1 id="elegant-v-20-is-finally-here"&gt;Elegant v 2.0 is finally here!&lt;a class="headerlink" href="#elegant-v-20-is-finally-here" title="Permanent link"&gt; &lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;A lot has happened since the last release of elegant theme and a great effort was also done and new steps for the future have been set as the way forward.&lt;/p&gt;
&lt;p&gt;V2 is not only a new set of bytes but also features and probably, the most important step has been evolving elegant into a community effort.&lt;/p&gt;
&lt;p&gt;Talha, who created the elegant theme, helped this movement by setting a new home for the repository and the documentation as well as adding some next steps towards evolving the theme faster in the future by removing some dependencies.&lt;/p&gt;
&lt;p&gt;A brave set of collaborators have helped shape this future via new issue creation, review of pending pull requests and defining how the community and project should continue.&lt;/p&gt;
&lt;p&gt;This has been noticed in the last months activity in the repository, the opened issues, and zapping the old ones not to lose any contribution, either from their original authors or resubmitting them on their behalf.&lt;/p&gt;
&lt;p&gt;A lot of things are remain to be done that will allow pelican 4.0 compatibility, removal of legacy code inherited from bootstrap, etc&lt;/p&gt;
&lt;p&gt;Don’t hesitate to give Elegant a new try, testing the new version or experimenting it at our brand new documentation/demo site at &lt;a href="https://pelican-elegant.github.io"&gt;https://pelican-elegant.github.io&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;And of course let us know if something is not as you would expect or wish so that we can have Elegant become your pelican theme.&lt;/p&gt;
&lt;p&gt;Thanks to all our contributors mentioned either at Authors document &lt;a href="https://github.com/Pelican-Elegant/elegant/blob/master/AUTHORS.md"&gt;https://github.com/Pelican-Elegant/elegant/blob/master/&lt;span class="caps"&gt;AUTHORS&lt;/span&gt;.md&lt;/a&gt; or at &lt;a href="https://github.com/Pelican-Elegant/elegant/graphs/contributors"&gt;https://github.com/Pelican-Elegant/elegant/graphs/contributors&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="stats"&gt;Stats&lt;a class="headerlink" href="#stats" title="Permanent link"&gt; &lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;119 issues&lt;/strong&gt; were &lt;a href="https://github.com/Pelican-Elegant/elegant/milestone/3?closed=1"&gt;closed in the 2.0 release&lt;/a&gt; – an impressive number, even if we take into account that many of the bugs were of an organizational nature, as Pelican Elegant has changed the development and governance model (more on that in a &lt;a href="https://dvesti.github.io/Pelican/2019/01/05/community-led-project/"&gt;separate post&lt;/a&gt;). Compare that to &lt;a href="https://github.com/Pelican-Elegant/elegant/milestone/1?closed=1"&gt;1.3 release&lt;/a&gt;, which consisted of 4 issues, or the total amount of closed issues so far, which amount to 133.&lt;/p&gt;
&lt;p&gt;Up until &lt;a href="https://github.com/Pelican-Elegant/elegant/graphs/contributors?to=2013-10-11&amp;amp;type=c"&gt;1.3 release&lt;/a&gt;, the only person to commit was &lt;a href="http://oncrashreboot.com"&gt;Talha Mansoor&lt;/a&gt; with 357 commits.&lt;/p&gt;
&lt;p&gt;From 1.3 release until the &lt;a href="https://github.com/Pelican-Elegant/elegant/graphs/contributors?from=2013-10-12&amp;amp;to=2018-12-27&amp;amp;type=c"&gt;2.0 release&lt;/a&gt; there were &lt;strong&gt;316 new commits in total&lt;/strong&gt; and divided as follows (excluding merge commits):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://oncrashreboot.com"&gt;Talha Mansoor – “talha131”&lt;/a&gt;: 264 commits&lt;/li&gt;
&lt;li&gt;[Pablo Iranzo Gómez – “iranzo”][iranzo]: 8 commits&lt;/li&gt;
&lt;li&gt;[Calf Zhou – “calfzhou”][calfzhou]: 7 commits &lt;!-- yaspeller ignore --&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://andrewwegner.com"&gt;Andrew Wegner – “AWegnerGitHub”&lt;/a&gt;: 6 commits &lt;!-- yaspeller ignore --&gt;&lt;/li&gt;
&lt;li&gt;[Matija Šuklje – “silverhook”][silverhook]: 5 commits &lt;!-- yaspeller ignore --&gt;&lt;/li&gt;
&lt;li&gt;[Jeremy Thurgood – “jerith”][jerith]: 1 commit &lt;!-- yaspeller ignore --&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://0x8badfood.github.io/blog/"&gt;Mobile Developer – “0x8BADFOOD”&lt;/a&gt;: 1 commit&lt;/li&gt;
&lt;li&gt;&lt;a href="http://leotrs.com/"&gt;Leo Torres – “leotrs”&lt;/a&gt;: 1 commit &lt;!-- yaspeller ignore --&gt;&lt;/li&gt;
&lt;li&gt;[Gan Shen – “gshen42”][gshen42]: 1 commit &lt;!-- yaspeller ignore --&gt;&lt;/li&gt;
&lt;li&gt;[Gert van Dijk – “gertvdijk”][gertvdijk]: 1 commit &lt;!-- yaspeller ignore --&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.debiatan.net/"&gt;Miguel Lechón – “debiatan”&lt;/a&gt;: 1 commit &lt;!-- yaspeller ignore --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As we can clearly see, by any metric this is a huge milestone for Elegant.&lt;/p&gt;
&lt;p&gt;[ashwinvis]: https://ashwinvis.github.io/ &lt;!-- yaspeller ignore --&gt;
[calfzhou]: http://gocalf.com &lt;!-- yaspeller ignore --&gt;&lt;/p&gt;
&lt;p&gt;[iranzo]: https://iranzo.github.io/ &lt;!-- yaspeller ignore --&gt;
[silverhook]: https://matija.suklje.name &lt;!-- yaspeller ignore --&gt;
[jerith]: http://rhetoric.jerith.org/ &lt;!-- yaspeller ignore --&gt;&lt;/p&gt;
&lt;p&gt;[gshen42]: https://gshen42.github.io/ &lt;!-- yaspeller ignore --&gt;
[gertvdijk]: https://blog.g3rt.nl/ &lt;!-- yaspeller ignore --&gt;&lt;/p&gt;
&lt;h1 id="highlights"&gt;Highlights&lt;a class="headerlink" href="#highlights" title="Permanent link"&gt; &lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Most issues belonged to bugs and dependency updates,
amongst &lt;!-- yaspeller ignore --&gt;
the biggest:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;support for &lt;span class="caps"&gt;HTTPS&lt;/span&gt; out of the box by making the links protocol agnostic&lt;/li&gt;
&lt;li&gt;fix for search to work again&lt;/li&gt;
&lt;li&gt;fix of accordion menus not opening up – fixes both issues with categories and comments&lt;/li&gt;
&lt;li&gt;fix of table of content&lt;/li&gt;
&lt;li&gt;much improved build speed&lt;/li&gt;
&lt;li&gt;support for Jinja 2.9 (and newer)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But also new features were added. To list just a few:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;article summaries in recent posts&lt;/li&gt;
&lt;li&gt;added links to social networks (if so desired)&lt;/li&gt;
&lt;li&gt;support for several analytics providers&lt;/li&gt;
&lt;li&gt;support for the &lt;code&gt;series&lt;/code&gt; plugin (instead of the deprecated &lt;code&gt;multi_part&lt;/code&gt; plugin)&lt;/li&gt;
&lt;li&gt;non-English languages are now possible as default, as well as having translations of articles&lt;/li&gt;
&lt;li&gt;big steps towards full &lt;span class="caps"&gt;W3C&lt;/span&gt; compliance&lt;/li&gt;
&lt;li&gt;support of LaTeX as input format&lt;/li&gt;
&lt;li&gt;support for Disqus comments&lt;/li&gt;
&lt;li&gt;new website and documentation (more on that in a &lt;a href="https://dvesti.github.io/Pelican/2019/01/05/community-led-project/"&gt;separate post&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For a full &lt;span class="caps"&gt;CHANGELOG&lt;/span&gt;, see below.&lt;/p&gt;
&lt;h1 id="full-changelog"&gt;Full &lt;span class="caps"&gt;CHANGELOG&lt;/span&gt;&lt;a class="headerlink" href="#full-changelog" title="Permanent link"&gt; &lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Below is the full &lt;span class="caps"&gt;CHANGELOG&lt;/span&gt;:&lt;/p&gt;
&lt;h2 id="version-20"&gt;Version 2.0&lt;a class="headerlink" href="#version-20" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Link to your social profiles&lt;/li&gt;
&lt;li&gt;Upgraded to Twitter Bootstrap 2.3.2&lt;/li&gt;
&lt;li&gt;Upgraded to Tipue Search 3.1&lt;/li&gt;
&lt;li&gt;Support for &lt;code&gt;custom.css&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://statcounter.com/"&gt;Stat Counter Analytics &lt;/a&gt; support&lt;/li&gt;
&lt;li&gt;Google Universal Analytics support&lt;/li&gt;
&lt;li&gt;Support for custom icons for social profiles&lt;/li&gt;
&lt;li&gt;Support for Pelican (&amp;gt;3.3) new metadata &lt;code&gt;modified&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Support for Social Media Tags&lt;/li&gt;
&lt;li&gt;Support for Google Authorship&lt;/li&gt;
&lt;li&gt;Translations support&lt;/li&gt;
&lt;li&gt;&lt;code&gt;article.comments_intro&lt;/code&gt; that overrides &lt;code&gt;COMMENTS_INTRO&lt;/code&gt;. Now you can define
  article specific comments introduction&lt;/li&gt;
&lt;li&gt;Add Disqus comments to Pages&lt;/li&gt;
&lt;li&gt;All customizable variables consolidated in a single &lt;code&gt;_defaults.html&lt;/code&gt;, making
  it easier for you to customize or even &lt;em&gt;localize&lt;/em&gt; the theme&lt;/li&gt;
&lt;li&gt;Adds author blurbs at the end of the article&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="performance"&gt;Performance&lt;a class="headerlink" href="#performance" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;4x faster output&lt;/li&gt;
&lt;li&gt;Reduce number of &lt;span class="caps"&gt;HTTP&lt;/span&gt; requests using &lt;code&gt;assets&lt;/code&gt; plugin&lt;/li&gt;
&lt;li&gt;Shortcut icons, like favicon, are disabled by default. Set
  &lt;code&gt;USE_SHORTCUT_ICONS&lt;/code&gt; to true to enable it&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="visual-style"&gt;Visual Style&lt;a class="headerlink" href="#visual-style" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Email newsletter subscriber form style matches rest of the theme&lt;/li&gt;
&lt;li&gt;Article images have a visible border&lt;/li&gt;
&lt;li&gt;Block quotes have a quote icon instead of a thick line on left&lt;/li&gt;
&lt;li&gt;Article’s paragraph font size is bigger, for better readability&lt;/li&gt;
&lt;li&gt;Remove unnecessary padding in sidebar’s tag list&lt;/li&gt;
&lt;li&gt;Archives page and recent posts on home page have better presentation&lt;/li&gt;
&lt;li&gt;Time stamps in categories and tags pages are justified&lt;/li&gt;
&lt;li&gt;Line number in code block is hidden on tablets and phones to save space for content&lt;/li&gt;
&lt;li&gt;More sizes of image for Apple Touch icons&lt;/li&gt;
&lt;li&gt;Fixed: Nested lists have different font sizes&lt;/li&gt;
&lt;li&gt;Fixed: &lt;span class="caps"&gt;CSS&lt;/span&gt; style rules for literal block in reST is missing&lt;/li&gt;
&lt;li&gt;Fixed: Long lines in code block will wrap to next line&lt;/li&gt;
&lt;li&gt;Fixed: Code block will not play nice with line numbers&lt;/li&gt;
&lt;li&gt;Fixed: Subscribe button changes its size on smaller screens&lt;/li&gt;
&lt;li&gt;Fixed: Articles under tag heading on tags page are not sorted&lt;/li&gt;
&lt;li&gt;Fixed: &lt;span class="caps"&gt;URL&lt;/span&gt; scheme for blogs which are not published to the root folder&lt;/li&gt;
&lt;li&gt;Fixed: Footer is always under the fold even on smaller length web pages&lt;/li&gt;
&lt;li&gt;Fixed: Site Name and top navigation menu move to left on wide displays&lt;/li&gt;
&lt;li&gt;Fixed: Page link is not active in the navbar if &lt;code&gt;SAVE_PAGE_AS&lt;/code&gt; is not set to default&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="plugins"&gt;Plugins&lt;a class="headerlink" href="#plugins" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;neighbor&lt;/code&gt; plugin to show next and previous articles&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;assets&lt;/code&gt; plugin to minify &lt;span class="caps"&gt;CSS&lt;/span&gt; and &lt;span class="caps"&gt;JS&lt;/span&gt; files&lt;/li&gt;
&lt;li&gt;Support for &lt;code&gt;share_post&lt;/code&gt; plugin&lt;/li&gt;
&lt;li&gt;Support for &lt;code&gt;related_posts&lt;/code&gt; plugin&lt;/li&gt;
&lt;li&gt;Support for &lt;code&gt;multi_part&lt;/code&gt; plugin&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="behavior"&gt;Behavior&lt;a class="headerlink" href="#behavior" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Search results link open in the same window, which is consistent with
  internet search engines&lt;/li&gt;
&lt;li&gt;Comments section message changes when user toggles it&lt;/li&gt;
&lt;li&gt;Fixed: Clicking Search button in 404.html does not trigger search&lt;/li&gt;
&lt;/ul&gt;</content><category term="Release Notes"></category><category term="change-log"></category><category term="project-management"></category></entry><entry><title>Comments — Disable Comments in an Article</title><link href="https://dvesti.github.io/Pelican/2019/01/12/disable-comments-per-article/" rel="alternate"></link><published>2019-01-12T16:29:00+02:00</published><updated>2019-01-12T16:29:00+02:00</updated><author><name>Talha Mansoor</name></author><id>tag:dvesti.github.io,2019-01-12:/Pelican/2019/01/12/disable-comments-per-article/</id><summary type="html">&lt;p&gt;If you remove your comment service configuration, say you set &lt;code&gt;DISQUS_SITENAME&lt;/code&gt; to empty string, then comments will disappear from all the&amp;nbsp;articles.&lt;/p&gt;
&lt;p&gt;Sometimes you want to disable comments on selected articles. In which case, you can set &lt;code&gt;comments&lt;/code&gt; variable in the article metadata to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here is an&amp;nbsp;example,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;Title …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;If you remove your comment service configuration, say you set &lt;code&gt;DISQUS_SITENAME&lt;/code&gt; to empty string, then comments will disappear from all the&amp;nbsp;articles.&lt;/p&gt;
&lt;p&gt;Sometimes you want to disable comments on selected articles. In which case, you can set &lt;code&gt;comments&lt;/code&gt; variable in the article metadata to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here is an&amp;nbsp;example,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;Title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Disable Comments&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nt"&gt;date&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;2019-01-12 16:29&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nt"&gt;comments&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;false&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nt"&gt;Category&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Commenting&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="Connecting With Your Readers"></category><category term="interaction"></category></entry><entry><title>Quickly get a GitHub hosted blog with Pelican, Elegant with little setup steps.</title><link href="https://dvesti.github.io/Pelican/2019/01/11/quickly-get-a-github-hosted-blog-with-pelican-elegant-with-little-setup-steps/" rel="alternate"></link><published>2019-01-11T17:30:47+01:00</published><updated>2019-01-11T17:30:47+01:00</updated><author><name>Pablo Iranzo Gómez</name></author><id>tag:dvesti.github.io,2019-01-11:/Pelican/2019/01/11/quickly-get-a-github-hosted-blog-with-pelican-elegant-with-little-setup-steps/</id><summary type="html">
&lt;h1 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt; &lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;We’re using automation for some of the aspects of Elegant development, but one of the issues for users trying to setup a new site with Pelican is to download plugins, theme, doing configuration, etc.&lt;/p&gt;
&lt;p&gt;Based on this feedback, a new ‘blog-o-matic’ approach has been tested:&lt;/p&gt;
&lt;h1 id="the-approach"&gt;The approach&lt;a class="headerlink" href="#the-approach" title="Permanent link"&gt; &lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/iranzo/blog-o-matic/"&gt;Blog-o-Matic …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">
&lt;h1 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt; &lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;We’re using automation for some of the aspects of Elegant development, but one of the issues for users trying to setup a new site with Pelican is to download plugins, theme, doing configuration, etc.&lt;/p&gt;
&lt;p&gt;Based on this feedback, a new ‘blog-o-matic’ approach has been tested:&lt;/p&gt;
&lt;h1 id="the-approach"&gt;The approach&lt;a class="headerlink" href="#the-approach" title="Permanent link"&gt; &lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/iranzo/blog-o-matic/"&gt;Blog-o-Matic&lt;/a&gt;, uses several discussed topics so far:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com"&gt;Github&lt;/a&gt; and &lt;span class="caps"&gt;GH&lt;/span&gt; Pages for hosting the source and the website&lt;/li&gt;
&lt;li&gt;&lt;a href="https://travis-ci.org"&gt;Travis-&lt;span class="caps"&gt;CI&lt;/span&gt;.org&lt;/a&gt; for automating the update and generation process&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.getpelican.com/"&gt;&lt;span class="quo"&gt;‘&lt;/span&gt;Pelican’&lt;/a&gt; for static rendering of your blog from the markdown or AsciiDoc articles&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Pelican-Elegant/elegant"&gt;&lt;span class="quo"&gt;‘&lt;/span&gt;Elegant’&lt;/a&gt; for the ‘Theme’&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/buildinspace/peru"&gt;peru&lt;/a&gt; for automating repository upgrades for plugins, etc&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The setup process is outlined at its &lt;a href="https://github.com/iranzo/blog-o-matic/"&gt;&lt;span class="caps"&gt;README&lt;/span&gt;.md&lt;/a&gt; and just requires a few steps to setup that, from that point, will allow you to get your website published each time you commit a new document to the content folder.&lt;/p&gt;
&lt;p&gt;You can also check the ‘generated’ website after installation via &lt;a href="https://iranzo.github.io/blog-o-matic"&gt;https://iranzo.github.io/blog-o-matic&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="how-does-it-work-under-the-hood"&gt;How does it work under the hood?&lt;a class="headerlink" href="#how-does-it-work-under-the-hood" title="Permanent link"&gt; &lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;The repository, contains already the required setups and configurations for setting up a blog using github pages.&lt;/p&gt;
&lt;p&gt;It requires some manual steps like configuring authentication token in order for automation to ‘push’ to github the ‘rendered webpage’, plus enabling ‘Travis &lt;span class="caps"&gt;CI&lt;/span&gt;’ automation for doing that step.&lt;/p&gt;
&lt;p&gt;Check the updated &lt;a href="https://github.com/iranzo/blog-o-matic"&gt;&lt;span class="caps"&gt;README&lt;/span&gt; on Blog-o-Matic&lt;/a&gt; if you’re interested in the setup, but thing is:&lt;/p&gt;
&lt;h2 id="setup"&gt;Setup&lt;a class="headerlink" href="#setup" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Repository contains already predefined Travis &lt;span class="caps"&gt;CI&lt;/span&gt; configuration&lt;/li&gt;
&lt;li&gt;A &lt;span class="caps"&gt;GH&lt;/span&gt; token is needed for Travis &lt;span class="caps"&gt;CI&lt;/span&gt; to push to the ‘master’ branch that is used by github pages&lt;/li&gt;
&lt;li&gt;The token needs to be configured as environment variable in ‘travis-ci.org’ which needs to be enabled for your repository&lt;/li&gt;
&lt;li&gt;Once this is done, all the automation is ready.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="automation-workflow"&gt;Automation workflow&lt;a class="headerlink" href="#automation-workflow" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The automation, on a new ‘commit’ (new config, new article, whatever), that can be even done via github.com Web User Interface, will launch a set of tasks:&lt;/p&gt;
&lt;h3 id="preparation"&gt;Preparation&lt;a class="headerlink" href="#preparation" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Setup python environment (Pelican uses python)&lt;/li&gt;
&lt;li&gt;Install tool ‘peru’ to sync from other repositories (for later syncing plugins, latest theme, etc)&lt;/li&gt;
&lt;li&gt;Launch the synchronization of themes, plugins etc (as defined in &lt;code&gt;peru.yaml&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="validation"&gt;Validation&lt;a class="headerlink" href="#validation" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Validate that web page builds (&lt;code&gt;make html&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Validate that it builds with publish configuration (&lt;code&gt;make publish&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="deployment"&gt;Deployment&lt;a class="headerlink" href="#deployment" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Copy extra files to generated website&lt;/li&gt;
&lt;li&gt;Update the checked out git config to use https so that we can use the token defined in environment variable &lt;code&gt;GHTOKEN&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Regenerate website and push to github&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="blog-is-ready"&gt;Blog is ready!&lt;a class="headerlink" href="#blog-is-ready" title="Permanent link"&gt; &lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;At this point, Travis &lt;span class="caps"&gt;CI&lt;/span&gt; will have built the blog with the sample content &lt;code&gt;content/welcome.md&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Keep adding new files to your new repository in the &lt;code&gt;content/&lt;/code&gt; folder and check the configuration settings in &lt;code&gt;pelicanconf.py&lt;/code&gt; to customize your name, twitter, &lt;span class="caps"&gt;SEO&lt;/span&gt;, etc&lt;/p&gt;
&lt;p&gt;Bear in mind, that at this point you’re using a regular Elegant setup with Pelican and some Pelican Plugins, so refer to &lt;code&gt;peru.yaml&lt;/code&gt; for the URLs containing the files and extra information that might be helpful for you to learn on the features and customization possibilities.&lt;/p&gt;
&lt;p&gt;Enjoy your Elegant blog!&lt;/p&gt;</content><category term="101 — Quick Start"></category><category term="pelican"></category><category term="foss"></category><category term="travis"></category><category term="ci/cd"></category><category term="elegant"></category><category term="blog"></category><category term="python"></category><category term="github"></category><category term="blog-o-matic"></category></entry><entry><title>Elegant grows into a community-led project</title><link href="https://dvesti.github.io/Pelican/2019/01/05/community-led-project/" rel="alternate"></link><published>2019-01-05T19:40:00+02:00</published><updated>2019-01-05T19:40:00+02:00</updated><author><name>Pablo Iranzo Gómez</name></author><id>tag:dvesti.github.io,2019-01-05:/Pelican/2019/01/05/community-led-project/</id><summary type="html">&lt;p&gt;Elegant has grown into a community-driven project. It also got a new website and organizational structure, culminating in its biggest release&amp;nbsp;yet.&lt;/p&gt;</summary><content type="html">
&lt;h2 id="adopting-bazar-model"&gt;Adopting Bazar Model&lt;a class="headerlink" href="#adopting-bazar-model" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.oncrashreboot.com"&gt;Talha Mansoor&lt;/a&gt; published the first version of Elegant in 2012. It grew in popularity in a short time, due to its clean and functional style.&lt;/p&gt;
&lt;p&gt;In November 2018,
&lt;a href="https://matija.suklje.name"&gt;Matija Šuklje&lt;/a&gt; &lt;!-- yaspeller ignore --&gt;
called Elegant’s community into a &lt;a href="https://github.com/talha131/pelican-elegant/issues/173"&gt;discussion about the future of the theme&lt;/a&gt;. Response was immense. Talha was the first to support the proposal of changing the development model from a single-developer to a community-led project following the &lt;a href="https://en.wikipedia.org/wiki/The_Cathedral_and_the_Bazaar"&gt;bazaar development model&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.oncrashreboot.com"&gt;He&lt;/a&gt; moved Elegant from a personal repository to a separate organization &lt;a href="https://github.com/Pelican-Elegant/"&gt;Pelican-Elegant&lt;/a&gt;, and added active community members to the &lt;a href="https://github.com/orgs/Pelican-Elegant/people"&gt;team&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This way, the bus factor of the project has greatly improved.&lt;/p&gt;
&lt;!-- yaspeller ignore:start --&gt;
&lt;!-- yaspeller ignore:end --&gt;
&lt;h2 id="new-governance-model"&gt;New Governance Model&lt;a class="headerlink" href="#new-governance-model" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Since the code base is now tended by more than one, &lt;a href="https://github.com/orgs/Pelican-Elegant/people"&gt;team&lt;/a&gt; has put in place some basic rules of governance to avoid people stepping on each-others toes.&lt;/p&gt;
&lt;p&gt;We clarified the outbound and inbound licensing situation. We release Elegant (outbound license) under the &lt;a href="https://spdx.org/licenses/MIT.html"&gt;&lt;span class="caps"&gt;MIT&lt;/span&gt;&lt;/a&gt; license and its documentation under the &lt;a href="https://creativecommons.org/licenses/by/4.0/"&gt;&lt;span class="caps"&gt;CC&lt;/span&gt;-&lt;span class="caps"&gt;BY&lt;/span&gt;-4.0&lt;/a&gt; license. All code contributions are made directly under the “Inbound=Outbound licensing model”. What it means is that, the license everyone contributes their code under (i.e. inbound license) is same as the license that the code is then released under to the general public.&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://github.com/Pelican-Elegant/elegant/blob/master/CONTRIBUTING.md"&gt;contribution guidelines&lt;/a&gt; are also updated and should be easier to follow now.&lt;/p&gt;
&lt;p&gt;We have also started discussing &lt;a href="https://github.com/Pelican-Elegant/elegant/issues/180"&gt;how to vote on new features and other important decisions&lt;/a&gt;, which we will put into effect soon.&lt;/p&gt;
&lt;h2 id="new-documentation-website"&gt;New Documentation Website&lt;a class="headerlink" href="#new-documentation-website" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Any good project needs good documentation and deserves a good homepage.&lt;/p&gt;
&lt;p&gt;We decided to eat our own dog food and host Elegant documentation on an Elegant-themed Pelican instance. This serves three purposes. One, hosts documentation, two, showcases Elegant features, and third, a testing ground to try out new ideas.&lt;/p&gt;
&lt;p&gt;This resulted in &lt;a href="https://elegant.oncrashreboot.com"&gt;elegant.onCrashReboot.com&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="future-releases"&gt;Future releases&lt;a class="headerlink" href="#future-releases" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As we write this blog post, the discussion on &lt;a href="https://github.com/Pelican-Elegant/elegant/issues/192"&gt;how to tackle future releases&lt;/a&gt; is still on-going.&lt;/p&gt;
&lt;p&gt;Right now, the discussion seems to go in the line of:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/Pelican-Elegant/elegant/milestone/3"&gt;2.0&lt;/a&gt; – All those fixes and features that do not require creating Pelican plugins or changes in Pelican code. This release will have updated documentation too.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Pelican-Elegant/elegant/milestone/5"&gt;2.1&lt;/a&gt; – Make theme compatible with Pelican 4.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Pelican-Elegant/elegant/milestone/4"&gt;3.0&lt;/a&gt; – Next generation Elegant – the biggest goal is to remove dependency on Bootstrap, to make it easier to maintain. 3.0.0 should have feature parity with 2.0.0.&lt;/li&gt;
&lt;/ol&gt;</content><category term="Contributing"></category></entry><entry><title>Amazon OneLink Support</title><link href="https://dvesti.github.io/Pelican/2019/01/02/amazon-onelink/" rel="alternate"></link><published>2019-01-02T22:47:47+01:00</published><updated>2019-01-02T22:47:47+01:00</updated><author><name>Pablo Iranzo Gómez</name></author><id>tag:dvesti.github.io,2019-01-02:/Pelican/2019/01/02/amazon-onelink/</id><summary type="html">&lt;p&gt;Elegant supports &lt;a href="https://affiliate-program.amazon.com/onelink/"&gt;Amazon OneLink&lt;/a&gt;, so that you may monetize your traffic using affiliate&amp;nbsp;links.&lt;/p&gt;
&lt;p&gt;Visit Amazon website and create your OneLink account. Amazon will provide you a code snippet similar to&amp;nbsp;following,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;amzn-assoc-ad-$UUID&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;
  &lt;span class="na"&gt;async&lt;/span&gt;
  &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;//z-na.amazon-adsystem.com/widgets/onejs?MarketPlace=US&amp;amp;adInstanceId=$UUID&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Elegant supports &lt;a href="https://affiliate-program.amazon.com/onelink/"&gt;Amazon OneLink&lt;/a&gt;, so that you may monetize your traffic using affiliate&amp;nbsp;links.&lt;/p&gt;
&lt;p&gt;Visit Amazon website and create your OneLink account. Amazon will provide you a code snippet similar to&amp;nbsp;following,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;amzn-assoc-ad-$UUID&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;
  &lt;span class="na"&gt;async&lt;/span&gt;
  &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;//z-na.amazon-adsystem.com/widgets/onejs?MarketPlace=US&amp;amp;adInstanceId=$UUID&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pay close attention to the &lt;code&gt;amzn-assoc-ad-&lt;/code&gt; part. The value following it is your Amazon OneLink&amp;nbsp;id.&lt;/p&gt;
&lt;p&gt;In your pelican configuration, preferably in the file &lt;code&gt;publishconf.py&lt;/code&gt;, set &lt;code&gt;AMAZON_ONELINK&lt;/code&gt; to your Amazon OneLink id, for&amp;nbsp;example,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;AMAZON_ONELINK&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;b63a2115-85f7-43a9-b169-5f4c8c275655&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When the site is generated, &lt;code&gt;$UUID&lt;/code&gt; in the snippet above is substituted with your id. Thus, ensuring that correct referral code is passed to the&amp;nbsp;script.&lt;/p&gt;
&lt;p&gt;Now, when international visitors of your site click on a link on your site to buy from Amazon, they are redirected to their local or nearest Amazon market place.
For example, original link (Python&amp;nbsp;book):&lt;/p&gt;
&lt;p&gt;This is an optional feature. If you do not set the variable then Amazon OneLink script is not added to the rendered&amp;nbsp;output.&lt;/p&gt;
&lt;p&gt;You, as a content creator, should be aware of &lt;span class="caps"&gt;GDPR&lt;/span&gt; or other regulations.
&lt;a href="https://affiliate-program.amazon.com/help/operating/agreement"&gt;Section 5 of the Operating
Agreement&lt;/a&gt; for
Amazon Associates states that you need to disclose your affiliation with Amazon and that you earn from qualifying&amp;nbsp;purchases.&lt;/p&gt;
&lt;p&gt;To conform to this rule in the agreement, Elegant automatically adds the disclaimer in the footer of the website if &lt;code&gt;AMAZON_ONELINK&lt;/code&gt; variable is set. It looks like&amp;nbsp;this,&lt;/p&gt;
&lt;p&gt;&lt;img alt="Amazon OneLink Disclosure" src="https://dvesti.github.io/Pelican/images/amazon-online-disclaimer.png" /&gt;&lt;/p&gt;</content><category term="Monetizing Your Blog"></category><category term="amazon"></category><category term="affiliates"></category><category term="income"></category></entry><entry><title>Warnings and admonition boxes</title><link href="https://dvesti.github.io/Pelican/2018/12/18/warnings-admonition/" rel="alternate"></link><published>2018-12-18T09:00:00+02:00</published><updated>2018-12-18T09:00:00+02:00</updated><author><name>Andy Wegner</name></author><id>tag:dvesti.github.io,2018-12-18:/Pelican/2018/12/18/warnings-admonition/</id><summary type="html">
&lt;p&gt;Sometimes you want to draw your reader’s attention to an important piece of
information. You can do this using admonitions. Below are a few examples of how
to do this, and the various styles that are available in Elegant.&lt;/p&gt;
&lt;h1 id="set-up"&gt;Set up&lt;a class="headerlink" href="#set-up" title="Permanent link"&gt; &lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;To use admonitions within our Markdown, we need …&lt;/p&gt;</summary><content type="html">
&lt;p&gt;Sometimes you want to draw your reader’s attention to an important piece of
information. You can do this using admonitions. Below are a few examples of how
to do this, and the various styles that are available in Elegant.&lt;/p&gt;
&lt;h1 id="set-up"&gt;Set up&lt;a class="headerlink" href="#set-up" title="Permanent link"&gt; &lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;To use admonitions within our Markdown, we need to enable support for them first.
In &lt;code&gt;pelicanconfig.py&lt;/code&gt; find your &lt;code&gt;MARKDOWN&lt;/code&gt; dictionary. Add the following line to
the dictionary (and ensure the previous line ends with a comma so that the dictionary
is valid).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;'markdown.extensions.admonition': {},
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That’s it! Now your site will support Markdown admonitions.&lt;/p&gt;
&lt;h1 id="types-of-admonitions"&gt;Types of admonitions&lt;a class="headerlink" href="#types-of-admonitions" title="Permanent link"&gt; &lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;There are several styles available and Elegant supports the recommended values of:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;attention&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;caution&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;danger&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;error&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hint&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;important&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;note&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tip&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;warning&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="examples"&gt;Examples&lt;a class="headerlink" href="#examples" title="Permanent link"&gt; &lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Let’s see some examples!&lt;/p&gt;
&lt;h2 id="default-danger-error"&gt;Default Danger, Error&lt;a class="headerlink" href="#default-danger-error" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You can use either &lt;code&gt;danger&lt;/code&gt; or &lt;code&gt;error&lt;/code&gt; to get a red admonition box.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;!!! danger

    This is a danger or error admonition
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="admonition danger"&gt;
&lt;p class="admonition-title"&gt;Danger&lt;/p&gt;
&lt;p&gt;This is a danger or error admonition&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id="default-attention-caution-warning"&gt;Default Attention, Caution, Warning&lt;a class="headerlink" href="#default-attention-caution-warning" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;An &lt;code&gt;attention&lt;/code&gt;, &lt;code&gt;caution&lt;/code&gt; or &lt;code&gt;warning&lt;/code&gt; admonition will be yellow.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;!!! warning

    This is an attention, caution or warning admonition
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="admonition warning"&gt;
&lt;p class="admonition-title"&gt;Warning&lt;/p&gt;
&lt;p&gt;This is an attention, caution or warning admonition&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id="default-important-note"&gt;Default Important, Note&lt;a class="headerlink" href="#default-important-note" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Use &lt;code&gt;important&lt;/code&gt; or &lt;code&gt;note&lt;/code&gt; to get a green admonition box.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;!!! important

    This is an important or note admonition
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="admonition important"&gt;
&lt;p class="admonition-title"&gt;Important&lt;/p&gt;
&lt;p&gt;This is an important or note admonition&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id="default-hint-tip"&gt;Default Hint, Tip&lt;a class="headerlink" href="#default-hint-tip" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Use either &lt;code&gt;hint&lt;/code&gt; or &lt;code&gt;tip&lt;/code&gt; to get a blue admonition box.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;!!! hint

    This is a hint or tip admonition
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="admonition hint"&gt;
&lt;p class="admonition-title"&gt;Hint&lt;/p&gt;
&lt;p&gt;This is a hint or tip admonition&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id="custom-titles"&gt;Custom Titles&lt;a class="headerlink" href="#custom-titles" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Admonitions can have custom titles. When the default examples are used, the titles
of each box are the same as the admonition type. This isn’t always what you want.
If you want to use a custom title, you pass the title in double quotes after the
type of admonition you are utilizing.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;!!!&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;hint&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Use double quotes to change the title"&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;This&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;admonition&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;box&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;contains&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;custom&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tile&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;because&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;placed&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;quotes&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;after&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n n-Quoted"&gt;`hint`&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="admonition hint"&gt;
&lt;p class="admonition-title"&gt;Use double quotes to change the title&lt;/p&gt;
&lt;p&gt;This admonition box contains a custom tile because I placed it in double quotes after the &lt;code&gt;hint&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id="no-title"&gt;No title&lt;a class="headerlink" href="#no-title" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There are times when you don’t need a title in your boxes. This can be done by
passing an empty string (&lt;code&gt;""&lt;/code&gt;) after the admonition type.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;!!!&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;important&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;This&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;box&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;doesn&lt;/span&gt;&lt;span class="s1"&gt;'t require a title, but is still an `important` admonition&lt;/span&gt;
&lt;span class="s1"&gt;    and will be highlighted as such.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="admonition important"&gt;
&lt;p&gt;This box doesn’t require a title, but is still an &lt;code&gt;important&lt;/code&gt; admonition and will be highlighted as such.&lt;/p&gt;
&lt;/div&gt;</content><category term="Components"></category><category term="admonitions"></category><category term="warning"></category><category term="attention"></category></entry><entry><title>Triggering a travis-ci build on another repository</title><link href="https://dvesti.github.io/Pelican/2018/12/11/travis-to-trigger-build-in-another-repository/" rel="alternate"></link><published>2018-12-11T21:49:47+01:00</published><updated>2018-12-11T21:49:47+01:00</updated><author><name>Pablo Iranzo Gómez</name></author><id>tag:dvesti.github.io,2018-12-11:/Pelican/2018/12/11/travis-to-trigger-build-in-another-repository/</id><summary type="html">
&lt;div class="admonition warning"&gt;
&lt;p class="admonition-title"&gt;Outdated&lt;/p&gt;
&lt;p&gt;Elegant no longer uses the procedure described in this article&lt;/p&gt;
&lt;/div&gt;
&lt;h1 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt; &lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;After setting up &lt;a href="https://dvesti.github.io/Pelican/2018/12/07/travis-ci-and-doc-website/"&gt;build automation&lt;/a&gt; we also wanted it not to happen only when updating the &lt;code&gt;documentation&lt;/code&gt; repository.&lt;/p&gt;
&lt;p&gt;Besides hosting documentation, Elegant website also serves as a live demo of the current release. This meant, the website should …&lt;/p&gt;</summary><content type="html">
&lt;div class="admonition warning"&gt;
&lt;p class="admonition-title"&gt;Outdated&lt;/p&gt;
&lt;p&gt;Elegant no longer uses the procedure described in this article&lt;/p&gt;
&lt;/div&gt;
&lt;h1 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt; &lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;After setting up &lt;a href="https://dvesti.github.io/Pelican/2018/12/07/travis-ci-and-doc-website/"&gt;build automation&lt;/a&gt; we also wanted it not to happen only when updating the &lt;code&gt;documentation&lt;/code&gt; repository.&lt;/p&gt;
&lt;p&gt;Besides hosting documentation, Elegant website also serves as a live demo of the current release. This meant, the website should be regenerated and updated every time when a documented is added or edited, and also when Elegant theme is updated.&lt;/p&gt;
&lt;p&gt;Github and Travis doesn’t offer dependent builds out of the box, so the trick goes to ‘signal’ via a github token to trigger a Travis build.&lt;/p&gt;
&lt;h1 id="the-technical-solution"&gt;The technical solution&lt;a class="headerlink" href="#the-technical-solution" title="Permanent link"&gt; &lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;The approach goes via tweaking the ‘test validation’ &lt;code&gt;.travis.yaml&lt;/code&gt; and adding some more steps:&lt;/p&gt;
&lt;p&gt;The initial file (similar to the one in our previous article, but for running the ‘page build’ with latest repository checkout) looks like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Copyright (C) 2017, 2018 Pablo Iranzo Gómez &amp;lt;Pablo.Iranzo@gmail.com&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="nt"&gt;language&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;python&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nt"&gt;dist&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;trusty&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nt"&gt;sudo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;required&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="nt"&gt;python&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"3.5"&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;# prepare and move data for execution&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="nt"&gt;before_install&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;pip install -U pip&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;pip install -U setuptools&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;pip install -r tests/requirements.txt&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;pip install -r tests/test-requirements.txt&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;pip install peru&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;mkdir -p tests/themes/elegant&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;mv templates tests/themes/elegant/&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;mv static tests/themes/elegant/&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;cd tests &amp;amp;&amp;amp; peru sync&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;pelican content/ -o output/&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Is then modified to add:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;before_script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;npm install travis-ci&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="nt"&gt;after_success&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;node trigger-build.js&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This installs Travis-&lt;span class="caps"&gt;CI&lt;/span&gt; utilities and runs a custom script ‘trigger-build.js’ with node, which in turn actually triggers Travis build.&lt;/p&gt;
&lt;p&gt;The script, downloaded from
&lt;a href="https://kamranicus.com/posts/2015-02-26-continuous-deployment-with-travis-ci"&gt;Kamran Ayub blog&lt;/a&gt; &lt;!-- yaspeller ignore --&gt;
has been edited to specify the ‘repository’ we will trigger and the name of the environment variable containing the token:&lt;/p&gt;
&lt;!-- yaspeller ignore:start --&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Travis&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"travis-ci"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;// change this&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;repo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Pelican-Elegant/documentation"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;travis&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Travis&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;version&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2.0.0"&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="nx"&gt;travis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;authenticate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// available through Travis CI&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// see: http://kamranicus.com/blog/2015/02/26/continuous-deployment-with-travis-ci/&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;github_token&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;TRATOKEN&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;travis&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;repos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mf"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;builds&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;travis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nx"&gt;build_id&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;builds&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;flash&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;notice&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;!-- yaspeller ignore:end --&gt;
&lt;p&gt;As you can see, in line 14, it grabs the github token from environment variable ‘&lt;span class="caps"&gt;TRATOKEN&lt;/span&gt;’ that we’ve defined in Travis-&lt;span class="caps"&gt;CI&lt;/span&gt; environment for the build.&lt;/p&gt;
&lt;p&gt;This is similar to &lt;a href="https://dvesti.github.io/Pelican/2018/12/07/travis-ci-and-doc-website/"&gt;what we did&lt;/a&gt; in the documentation repository to push the built website to another repository.&lt;/p&gt;
&lt;p&gt;With this solution in place, when a new commit is merged on ‘master’ branch on the ‘theme’ repository &lt;a href="https://github.com/Pelican-Elegant/elegant"&gt;(&lt;code&gt;elegant&lt;/code&gt;)&lt;/a&gt;, Travis &lt;span class="caps"&gt;CI&lt;/span&gt; does get invoked to schedule a build on the &lt;a href="https://github.com/Pelican-Elegant/documentation"&gt;&lt;code&gt;documentation&lt;/code&gt;&lt;/a&gt; repository, thus, rendering the live website with latest templates.&lt;/p&gt;</content><category term="Contributing"></category><category term="pelican"></category><category term="FOSS"></category><category term="travis"></category><category term="ci/cd"></category><category term="elegant"></category><category term="blog"></category><category term="python"></category></entry><entry><title>Travis-CI Automation for documentation website</title><link href="https://dvesti.github.io/Pelican/2018/12/07/travis-ci-and-doc-website/" rel="alternate"></link><published>2018-12-07T16:00:47+01:00</published><updated>2018-12-07T16:00:47+01:00</updated><author><name>Pablo Iranzo Gómez</name></author><id>tag:dvesti.github.io,2018-12-07:/Pelican/2018/12/07/travis-ci-and-doc-website/</id><summary type="html">
&lt;div class="admonition warning"&gt;
&lt;p class="admonition-title"&gt;Outdated&lt;/p&gt;
&lt;p&gt;Elegant no longer uses the procedure described in this article&lt;/p&gt;
&lt;/div&gt;
&lt;h1 id="background"&gt;Background&lt;a class="headerlink" href="#background" title="Permanent link"&gt; &lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/Pelican-Elegant/elegant"&gt;Elegant&lt;/a&gt; theme for pelican has been undergoing a big change from individual-driven effort to community, as part of this, one of the tasks to accomplish, has been the decoupling from author blog to project site for documentation.&lt;/p&gt;
&lt;p&gt;As …&lt;/p&gt;</summary><content type="html">
&lt;div class="admonition warning"&gt;
&lt;p class="admonition-title"&gt;Outdated&lt;/p&gt;
&lt;p&gt;Elegant no longer uses the procedure described in this article&lt;/p&gt;
&lt;/div&gt;
&lt;h1 id="background"&gt;Background&lt;a class="headerlink" href="#background" title="Permanent link"&gt; &lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/Pelican-Elegant/elegant"&gt;Elegant&lt;/a&gt; theme for pelican has been undergoing a big change from individual-driven effort to community, as part of this, one of the tasks to accomplish, has been the decoupling from author blog to project site for documentation.&lt;/p&gt;
&lt;p&gt;As we wanted this process to be both automated and allowed us to demonstrate via
dogfooding &lt;!-- yaspeller ignore --&gt;
that the theme works and how it looks, the idea was to automate the rendering of pelican website with new documents.&lt;/p&gt;
&lt;h1 id="under-the-hood"&gt;Under the hood&lt;a class="headerlink" href="#under-the-hood" title="Permanent link"&gt; &lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Setting an automated build required several steps to be done:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Get a GitHub token that could be used by Travis for pushing to a repository (and configure it in Travis environment variables for the repository in a variable named &lt;code&gt;GITHUB_TOKEN&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;run unit tests for validating new &lt;span class="caps"&gt;PR&lt;/span&gt; before merging&lt;/li&gt;
&lt;li&gt;configure Travis so that it downloads required dependencies in order to run pelican and then publish the generated web to the repository&lt;/li&gt;
&lt;li&gt;a GitHub pages enabled repository so that resulting files can be viewed as a webpage.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;One of the key pieces is a properly configured &lt;code&gt;.travis.yaml&lt;/code&gt; like the one we started using:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;language&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;python&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nt"&gt;dist&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;trusty&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nt"&gt;sudo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;required&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="nt"&gt;python&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"3.5"&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="nt"&gt;before_install&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;pip install -U pip&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;pip install -U setuptools&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;pip install -r requirements.txt&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;pip install -r test-requirements.txt&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;pip install peru&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;peru sync&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;pip install tox&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;tox&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;make html&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="nt"&gt;after_success&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;rm -rf .git/&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;git init&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;git config user.name "Travis CI"&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;git config user.email "travis@domain.com"&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;git config --global push.default simple&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;git remote add origin https://${GITHUB_TOKEN}@github.com/Pelican-Elegant/pelican-elegant.github.io.git&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;make github&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="image-setup"&gt;Image setup&lt;a class="headerlink" href="#image-setup" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So, from above file we do:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;language&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;python&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nt"&gt;dist&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;trusty&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nt"&gt;sudo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;required&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="nt"&gt;python&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"3.5"&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Configure language as python&lt;/li&gt;
&lt;li&gt;Select distribution&lt;/li&gt;
&lt;li&gt;Confirm we require ‘sudo’ access&lt;/li&gt;
&lt;li&gt;Configure python version as 3.5&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All of this depends on Travis Image being used and their documentation&lt;/p&gt;
&lt;h2 id="preparation-of-environment"&gt;Preparation of environment&lt;a class="headerlink" href="#preparation-of-environment" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Now, we’ll prepare the environment for our tests:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;before_install&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;pip install -U pip&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;pip install -U setuptools&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;pip install -r requirements.txt&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;pip install -r test-requirements.txt&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;pip install peru&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;peru sync&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;pip install tox&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We do install pip, setuptools, repository and test requirements, peru and tox.&lt;/p&gt;
&lt;p&gt;Peru is used to grab additional dependencies for elegant (plugins, latest theme, etc)&lt;/p&gt;
&lt;h2 id="actual-tests"&gt;Actual tests&lt;a class="headerlink" href="#actual-tests" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is really easy in our case:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;tox&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;make html&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We run ‘tox’ that allows to automate Python virtualenv and tests and then, use the Makefile from Pelican to build the site and tests plugins, etc&lt;/p&gt;
&lt;p&gt;If everything succeeds, we’re ready for the next step (publishing)&lt;/p&gt;
&lt;h2 id="after-tests-passed"&gt;After tests passed&lt;a class="headerlink" href="#after-tests-passed" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;All the environment setup and tests have succeed now, we do need to push the site ‘live’&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;after_success&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;rm -rf .git/&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;git init&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;git config user.name "Travis CI"&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;git config user.email "travis@domain.com"&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;git config --global push.default simple&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;git remote add origin https://${GITHUB_TOKEN}@github.com/Pelican-Elegant/pelican-elegant.github.io.git&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;make github&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This piece does the final step, first removes info about the repository containing the actual documentation and allows us to initialize a new one, that we make it point towards the repository we’re pushing (so that we keep separate actual website content from ‘rendered’ website).&lt;/p&gt;
&lt;p&gt;In the final step, ‘make github’ uses the Makefile provided with pelican to push the changes to the ‘master’ branch of the target repository, that then, is ready to be served via github pages as a regular web server would do.&lt;/p&gt;
&lt;h1 id="wrap-up"&gt;Wrap up&lt;a class="headerlink" href="#wrap-up" title="Permanent link"&gt; &lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;So, right now we’ve accomplished several things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We do use pelican in the same way that we’ll do for our own website&lt;/li&gt;
&lt;li&gt;We do also have as a consequence, a &lt;a href="https://elegant.oncrashreboot.com"&gt;‘live’ demo&lt;/a&gt; of latest master branch showcasing features&lt;/li&gt;
&lt;li&gt;We did automate publishing of webpage as soon as contributors send new articles and are approved for merge&lt;/li&gt;
&lt;li&gt;All requires no extra change to regular workflow as &lt;travis-ci.org&gt; is the glue here putting together all the pieces.&lt;/travis-ci.org&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let us know via an &lt;a href="https://github.com/Pelican-Elegant/elegant/issues/new"&gt;issue&lt;/a&gt; if any problem is spotted on the generated documentation website.&lt;/p&gt;</content><category term="Contributing"></category><category term="pelican"></category><category term="foss"></category><category term="travis"></category><category term="ci/cd"></category><category term="elegant"></category><category term="python"></category></entry><entry><title>Add Author Blurbs to Your Articles</title><link href="https://dvesti.github.io/Pelican/2018/12/07/adding-author-blurbs/" rel="alternate"></link><published>2018-12-07T11:00:00+02:00</published><updated>2018-12-07T11:00:00+02:00</updated><author><name>Talha Mansoor</name></author><id>tag:dvesti.github.io,2018-12-07:/Pelican/2018/12/07/adding-author-blurbs/</id><summary type="html">&lt;p&gt;Elegant can be configured to provide author blurbs for articles, relaying extra information on the authors of the&amp;nbsp;articles.&lt;/p&gt;</summary><content type="html">
&lt;p&gt;On websites where the author of an article may vary, many sites include a quick blurb about
the author with the article. This blurb will typically be at the start of the article or the
end of the article, and provides extra information for readers on the author.&lt;/p&gt;
&lt;p&gt;Elegant provides
this feature, adding a section for any recognized articles at the end of the article.&lt;/p&gt;
&lt;p&gt;Here are two examples of what the Author Blurbs may look like:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Author Blurb 1" src="https://dvesti.github.io/Pelican/images/author-blurb.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Author Blurb 2" src="https://dvesti.github.io/Pelican/images/author-blurb2.png"/&gt;&lt;/p&gt;
&lt;h2 id="configuration"&gt;Configuration&lt;a class="headerlink" href="#configuration" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To enable author blurbs for your articles, you need to define an &lt;code&gt;AUTHORS&lt;/code&gt; configuration variable
in your Pelican configuration. The &lt;code&gt;AUTHORS&lt;/code&gt; configuration variable for the Elegant
documentation website is specified as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;AUTHORS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"Talha Mansoor"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;"url"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"https://www.oncrashreboot.com/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"blurb"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"is the creator and lead developer of Elegant theme."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"avatar"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"/images/avatars/talha131.png"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s2"&gt;"Pablo Iranzo Gómez"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;"url"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"http://iranzo.github.io"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"blurb"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;" opensource enthusiast and Lego fan doing some python simple programs like @redken_bot in telegram, etc"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"avatar"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"https://avatars.githubusercontent.com/u/312463"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s2"&gt;"Jack De Winter"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;"url"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"http://jackdewinter.github.io"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"blurb"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"ever evolving, ever learning"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The value assigned to the configuration variable is a Python dictionary&lt;sup id="fnref:python-dictionary"&gt;&lt;a class="footnote-ref" href="#fn:python-dictionary"&gt;1&lt;/a&gt;&lt;/sup&gt;
containing one key-value pair for every author. The key for the key-value pair is the name of
the author as you want it to appear at the end of the article. In the example, the three
authors are “Talha Mansoor”, “Pablo Iranzo Gómez”, and “Jack De Winter”.&lt;/p&gt;
&lt;p&gt;The value for each of the key-value pairs is another dictionary. Elegant specifically looks
for these three keys in the each author’s dictionary:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;url&lt;/code&gt; (string) &lt;span class="caps"&gt;URL&lt;/span&gt; to the author’s homepage or profile&lt;/li&gt;
&lt;li&gt;&lt;code&gt;blurb&lt;/code&gt; (string) Introduction of author&lt;/li&gt;
&lt;li&gt;&lt;code&gt;avatar&lt;/code&gt; (string) &lt;span class="caps"&gt;URL&lt;/span&gt; to author’s avatar image&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For the &lt;code&gt;url&lt;/code&gt; and &lt;code&gt;avatar&lt;/code&gt; values, there is no restriction on where the &lt;span class="caps"&gt;URL&lt;/span&gt; links to. In the
above example, Talha’s &lt;code&gt;avatar&lt;/code&gt; &lt;span class="caps"&gt;URL&lt;/span&gt; is local, while Pablo’s &lt;span class="caps"&gt;URL&lt;/span&gt; is remote.&lt;/p&gt;
&lt;h2 id="article-metadata"&gt;Article Metadata&lt;a class="headerlink" href="#article-metadata" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While the configuration for Author Blurbs is centralized in the configuration file, enabling
this feature for a given article requires that the article contains either the &lt;code&gt;author&lt;/code&gt; or
&lt;code&gt;authors&lt;/code&gt; &lt;a href="https://dvesti.github.io/Pelican/2019/07/03/metadata/"&gt;metadata&lt;/a&gt; field values. If neither
of these values are provided, the &lt;code&gt;AUTHOR&lt;/code&gt; configuration variable will be used as a default.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;AUTHOR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Pablo Iranzo Gómez'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The default &lt;code&gt;AUTHOR&lt;/code&gt; configuration variable and the &lt;code&gt;author&lt;/code&gt; metadata field both denote a
single author. The &lt;code&gt;authors&lt;/code&gt; metadata field denotes multiple authors using a comma separated list.&lt;/p&gt;
&lt;p&gt;For each author determined through in this manner, a check is performed against the &lt;code&gt;AUTHORS&lt;/code&gt;
configuration in the previous section on &lt;a href="#Configuration"&gt;Configuration&lt;/a&gt;. If the author is
found using a case-sensitive exact match, a blurb will be generated for that author. If the
author is not found, it will be silently ignored.&lt;/p&gt;
&lt;p&gt;A good example of the &lt;code&gt;authors&lt;/code&gt; metadata field is available by looking at the
&lt;a href="https://raw.githubusercontent.com/Pelican-Elegant/elegant/master/documentation/content/Supported%20Plugins/author-blurbs.md"&gt;raw Markdown&lt;/a&gt; for this page.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;Authors&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Talha Mansoor, Jack De Winter&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="admonition warning"&gt;
&lt;p class="admonition-title"&gt;Common Mistake&lt;/p&gt;
&lt;p&gt;A frequent mistake is to define multiple authors, but assign the value to the &lt;code&gt;author&lt;/code&gt; metadata field.  This can happen easily if one author writes the original version of the article and another author updates or changes that article.  This mistake causes Elegant to look for that &lt;em&gt;single&lt;/em&gt; author using the entire text for that value.&lt;/p&gt;
&lt;p&gt;The correct way to do this is to use &lt;code&gt;authors&lt;/code&gt; metadata field.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:python-dictionary"&gt;
&lt;p&gt;For more information on Python dictionaries, refer to this comprehensive article on &lt;a href="https://realpython.com/python-dicts/"&gt;Python dictionaries&lt;/a&gt;. &lt;a class="footnote-backref" href="#fnref:python-dictionary" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Supported Plugins"></category><category term="web-design"></category><category term="metadata"></category><category term="authors"></category></entry><entry><title>Article redirection</title><link href="https://dvesti.github.io/Pelican/2018/11/30/article-redirect/" rel="alternate"></link><published>2018-11-30T10:32:00+02:00</published><updated>2018-11-30T10:32:00+02:00</updated><author><name>Pablo Iranzo Gómez</name></author><id>tag:dvesti.github.io,2018-11-30:/Pelican/2018/11/30/article-redirect/</id><summary type="html">&lt;p&gt;Use Pelican redirect yaml preamble to point to new&amp;nbsp;articles&lt;/p&gt;</summary><content type="html">&lt;p&gt;We might want to redirect a visitor to another &lt;span class="caps"&gt;URL&lt;/span&gt; or&amp;nbsp;article.&lt;/p&gt;
&lt;p&gt;Ideally this is done via a &lt;code&gt;.htaccess&lt;/code&gt; so that a proper 301 code is generated, but we might not have access to the web server&amp;nbsp;configuration.&lt;/p&gt;
&lt;p&gt;In Elegant we&amp;#8217;ve included a &lt;code&gt;redirect&lt;/code&gt; slug in the &lt;code&gt;yaml preamble&lt;/code&gt; that allows to specify a target &lt;span class="caps"&gt;URL&lt;/span&gt;, that will be load with a&amp;nbsp;http-refresh:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;refresh&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0;URL={{ article.redirect }}&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The actual code to define a redirection in an article is to include &lt;code&gt;redirect&lt;/code&gt; in the yaml&amp;nbsp;preamble:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nn"&gt;---&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nt"&gt;Title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Article redirection&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nt"&gt;Slug&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;article-redirect&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nt"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;https://pelican-elegant.github.io/&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nn"&gt;---&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When the article loads, it will refresh to the new &lt;span class="caps"&gt;URL&lt;/span&gt; defined in redirect, allowing you to still provide search engines and users a way to get to the new&amp;nbsp;article.&lt;/p&gt;</content><category term="Advanced Features"></category><category term="redirection"></category></entry><entry><title>Newsletter — Add FreeLists</title><link href="https://dvesti.github.io/Pelican/2018/07/05/add-freelists/" rel="alternate"></link><published>2018-07-05T23:20:00+03:00</published><updated>2018-07-05T23:20:00+03:00</updated><author><name>Talha Mansoor</name></author><id>tag:dvesti.github.io,2018-07-05:/Pelican/2018/07/05/add-freelists/</id><summary type="html">&lt;p&gt;Elegant shows a form to subscribe to your newsletter, above the fold, in the right section of every&amp;nbsp;article.&lt;/p&gt;
&lt;p&gt;You need to put your FreeLists name in &lt;code&gt;FREELISTS_NAME&lt;/code&gt; in your configuration&amp;nbsp;file.&lt;/p&gt;
&lt;p&gt;To customize user experience you can also&amp;nbsp;define,&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;EMAIL_SUBSCRIPTION_LABEL&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;EMAIL_FIELD_PLACEHOLDER&lt;/code&gt; and&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SUBSCRIBE_BUTTON_TITLE&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The &amp;#8220;Notify me&amp;#8221; button you see …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Elegant shows a form to subscribe to your newsletter, above the fold, in the right section of every&amp;nbsp;article.&lt;/p&gt;
&lt;p&gt;You need to put your FreeLists name in &lt;code&gt;FREELISTS_NAME&lt;/code&gt; in your configuration&amp;nbsp;file.&lt;/p&gt;
&lt;p&gt;To customize user experience you can also&amp;nbsp;define,&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;EMAIL_SUBSCRIPTION_LABEL&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;EMAIL_FIELD_PLACEHOLDER&lt;/code&gt; and&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SUBSCRIBE_BUTTON_TITLE&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The &amp;#8220;Notify me&amp;#8221; button you see in the sidebar of this page is an example of FreeLists subscription form. It links to Oracle database discussion list to demonstrate the&amp;nbsp;function.&lt;/p&gt;
&lt;h2 id="show-freelists-form-by-default"&gt;Show FreeLists Form by default&lt;a class="headerlink" href="#show-freelists-form-by-default" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Just set &lt;code&gt;FREELISTS_NAME&lt;/code&gt; variable.&lt;/p&gt;
&lt;h2 id="hide-freelists-form-by-default"&gt;Hide FreeLists Form by default&lt;a class="headerlink" href="#hide-freelists-form-by-default" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Unset &lt;code&gt;FREELISTS_NAME&lt;/code&gt; variable.&lt;/p&gt;
&lt;p&gt;This is the default&amp;nbsp;setting.&lt;/p&gt;
&lt;h2 id="hide-freelists-form-by-default-show-on-selected"&gt;Hide FreeLists Form by default. Show on Selected&lt;a class="headerlink" href="#hide-freelists-form-by-default-show-on-selected" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Set &lt;code&gt;FREELISTS_NAME&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Set &lt;code&gt;FREELISTS_FILTER&lt;/code&gt; to &lt;code&gt;True&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This will hide FreeLists form on all&amp;nbsp;pages.&lt;/p&gt;
&lt;p&gt;Now to show FreeLists form on selected posts, in article metadata&amp;nbsp;set&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;freelists_filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;off&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="show-freelists-form-by-default-hide-on-selected"&gt;Show FreeLists Form by default. Hide on Selected&lt;a class="headerlink" href="#show-freelists-form-by-default-hide-on-selected" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Set &lt;code&gt;FREELISTS_NAME&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Remove &lt;code&gt;FREELISTS_FILTER&lt;/code&gt; or set it to &lt;code&gt;False&lt;/code&gt; which is its default&amp;nbsp;value&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This will hide FreeLists form on all&amp;nbsp;pages.&lt;/p&gt;
&lt;p&gt;Now to hide FreeLists form on selected posts, in article metadata&amp;nbsp;set&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;freelists_filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;on&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="Connecting With Your Readers"></category><category term="marketing"></category><category term="network"></category><category term="subscriber"></category></entry><entry><title>Создание новой Темы — English Creating a New Theme</title><link href="https://dvesti.github.io/Pelican/2017/08/31/sozdanie-novoi-temy-english-creating-a-new-theme/" rel="alternate"></link><published>2017-08-31T15:43:00+03:00</published><updated>2017-08-31T15:43:00+03:00</updated><author><name>Michael Henderson</name></author><id>tag:dvesti.github.io,2017-08-31:/Pelican/2017/08/31/sozdanie-novoi-temy-english-creating-a-new-theme/</id><summary type="html">
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with &lt;span class="caps"&gt;HTML&lt;/span&gt;, the bash command line, and that you are comfortable using Markdown to format content. I’ll explain how Hugo uses templates and how you can organize your templates …&lt;/p&gt;</summary><content type="html">
&lt;h2 id="introduction"&gt;Introduction&lt;a class="headerlink" href="#introduction" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with &lt;span class="caps"&gt;HTML&lt;/span&gt;, the bash command line, and that you are comfortable using Markdown to format content. I’ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won’t cover using &lt;span class="caps"&gt;CSS&lt;/span&gt; to style your theme.&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;We’ll start with creating a new site with a very basic template. Then we’ll add in a few pages and posts. With small variations on that, you will be able to create many different types of web sites.&lt;/p&gt;
&lt;p&gt;In this tutorial, commands that you enter will start with the “$” prompt. The output will follow. Lines that start with “#” are comments that I’ve added to explain a point. When I show updates to a file, the “:wq” on the last line means to save the file.&lt;/p&gt;
&lt;p&gt;Here’s an example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gu"&gt;## this is a comment&lt;/span&gt;
$ echo this is a command
this is a command

&lt;span class="gu"&gt;## edit the file&lt;/span&gt;
$vi foo.md
+++
date = "2014-09-28"
title = "creating a new theme"
+++

bah and humbug
:wq

&lt;span class="gu"&gt;## show it&lt;/span&gt;
$ cat foo.md
+++
date = "2014-09-28"
title = "creating a new theme"
+++

bah and humbug
$
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="some-definitions"&gt;Some Definitions&lt;a class="headerlink" href="#some-definitions" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There are a few concepts that you need to understand before creating a theme.&lt;/p&gt;
&lt;h3 id="skins"&gt;Skins&lt;a class="headerlink" href="#skins" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Skins are the files responsible for the look and feel of your site. It’s the &lt;span class="caps"&gt;CSS&lt;/span&gt; that controls colors and fonts, it’s the Javascript that determines actions and reactions. It’s also the rules that Hugo uses to transform your content into the &lt;span class="caps"&gt;HTML&lt;/span&gt; that the site will serve to visitors.&lt;/p&gt;
&lt;p&gt;You have two ways to create a skin. The simplest way is to create it in the &lt;code&gt;layouts/&lt;/code&gt; directory. If you do, then you don’t have to worry about configuring Hugo to recognize it. The first place that Hugo will look for rules and files is in the &lt;code&gt;layouts/&lt;/code&gt; directory so it will always find the skin.&lt;/p&gt;
&lt;p&gt;Your second choice is to create it in a sub-directory of the &lt;code&gt;themes/&lt;/code&gt; directory. If you do, then you must always tell Hugo where to search for the skin. It’s extra work, though, so why bother with it?&lt;/p&gt;
&lt;p&gt;The difference between creating a skin in &lt;code&gt;layouts/&lt;/code&gt; and creating it in &lt;code&gt;themes/&lt;/code&gt; is very subtle. A skin in &lt;code&gt;layouts/&lt;/code&gt; can’t be customized without updating the templates and static files that it is built from. A skin created in &lt;code&gt;themes/&lt;/code&gt;, on the other hand, can be and that makes it easier for other people to use it.&lt;/p&gt;
&lt;p&gt;The rest of this tutorial will call a skin created in the &lt;code&gt;themes/&lt;/code&gt; directory a theme.&lt;/p&gt;
&lt;p&gt;Note that you can use this tutorial to create a skin in the &lt;code&gt;layouts/&lt;/code&gt; directory if you wish to. The main difference will be that you won’t need to update the site’s configuration file to use a theme.&lt;/p&gt;
&lt;h3 id="the-home-page"&gt;The Home Page&lt;a class="headerlink" href="#the-home-page" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The home page, or landing page, is the first page that many visitors to a site see. It is the index.html file in the root directory of the web site. Since Hugo writes files to the public/ directory, our home page is public/index.html.&lt;/p&gt;
&lt;h3 id="site-configuration-file"&gt;Site Configuration File&lt;a class="headerlink" href="#site-configuration-file" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;When Hugo runs, it looks for a configuration file that contains settings that override default values for the entire site. The file can use &lt;span class="caps"&gt;TOML&lt;/span&gt;, &lt;span class="caps"&gt;YAML&lt;/span&gt;, or &lt;span class="caps"&gt;JSON&lt;/span&gt;. I prefer to use &lt;span class="caps"&gt;TOML&lt;/span&gt; for my configuration files. If you prefer to use &lt;span class="caps"&gt;JSON&lt;/span&gt; or &lt;span class="caps"&gt;YAML&lt;/span&gt;, you’ll need to translate my examples. You’ll also need to change the name of the file since Hugo uses the extension to determine how to process it.&lt;/p&gt;
&lt;p&gt;Hugo translates Markdown files into &lt;span class="caps"&gt;HTML&lt;/span&gt;. By default, Hugo expects to find Markdown files in your &lt;code&gt;content/&lt;/code&gt; directory and template files in your &lt;code&gt;themes/&lt;/code&gt; directory. It will create &lt;span class="caps"&gt;HTML&lt;/span&gt; files in your &lt;code&gt;public/&lt;/code&gt; directory. You can change this by specifying alternate locations in the configuration file.&lt;/p&gt;
&lt;h3 id="content"&gt;Content&lt;a class="headerlink" href="#content" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Content is stored in text files that contain two sections. The first section is the “front matter,” which is the meta-information on the content. The second section contains Markdown that will be converted to &lt;span class="caps"&gt;HTML&lt;/span&gt;.&lt;/p&gt;
&lt;h4 id="front-matter"&gt;Front Matter&lt;a class="headerlink" href="#front-matter" title="Permanent link"&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The front matter is information about the content. Like the configuration file, it can be written in &lt;span class="caps"&gt;TOML&lt;/span&gt;, &lt;span class="caps"&gt;YAML&lt;/span&gt;, or &lt;span class="caps"&gt;JSON&lt;/span&gt;. Unlike the configuration file, Hugo doesn’t use the file’s extension to know the format. It looks for markers to signal the type. &lt;span class="caps"&gt;TOML&lt;/span&gt; is surrounded by “&lt;code&gt;+++&lt;/code&gt;”, &lt;span class="caps"&gt;YAML&lt;/span&gt; by “&lt;code&gt;---&lt;/code&gt;”, and &lt;span class="caps"&gt;JSON&lt;/span&gt; is enclosed in curly braces. I prefer to use &lt;span class="caps"&gt;TOML&lt;/span&gt;, so you’ll need to translate my examples if you prefer &lt;span class="caps"&gt;YAML&lt;/span&gt; or &lt;span class="caps"&gt;JSON&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;The information in the front matter is passed into the template before the content is rendered into &lt;span class="caps"&gt;HTML&lt;/span&gt;.&lt;/p&gt;
&lt;h4 id="markdown"&gt;Markdown&lt;a class="headerlink" href="#markdown" title="Permanent link"&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Content is written in Markdown which makes it easier to create the content. Hugo runs the content through a Markdown engine to create the &lt;span class="caps"&gt;HTML&lt;/span&gt; which will be written to the output file.&lt;/p&gt;
&lt;h3 id="template-files"&gt;Template Files&lt;a class="headerlink" href="#template-files" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Hugo uses template files to render content into &lt;span class="caps"&gt;HTML&lt;/span&gt;. Template files are a bridge between the content and presentation. Rules in the template define what content is published, where it’s published to, and how it will rendered to the &lt;span class="caps"&gt;HTML&lt;/span&gt; file. The template guides the presentation by specifying the style to use.&lt;/p&gt;
&lt;p&gt;There are three types of templates: single, list, and partial. Each type takes a bit of content as input and transforms it based on the commands in the template.&lt;/p&gt;
&lt;p&gt;Hugo uses its knowledge of the content to find the template file used to render the content. If it can’t find a template that is an exact match for the content, it will shift up a level and search from there. It will continue to do so until it finds a matching template or runs out of templates to try. If it can’t find a template, it will use the default template for the site.&lt;/p&gt;
&lt;p&gt;Please note that you can use the front matter to influence Hugo’s choice of templates.&lt;/p&gt;
&lt;h4 id="single-template"&gt;Single Template&lt;a class="headerlink" href="#single-template" title="Permanent link"&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;A single template is used to render a single piece of content. For example, an article or post would be a single piece of content and use a single template.&lt;/p&gt;
&lt;h4 id="list-template"&gt;List Template&lt;a class="headerlink" href="#list-template" title="Permanent link"&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;A list template renders a group of related content. That could be a summary of recent postings or all articles in a category. List templates can contain multiple groups.&lt;/p&gt;
&lt;p&gt;The homepage template is a special type of list template. Hugo assumes that the home page of your site will act as the portal for the rest of the content in the site.&lt;/p&gt;
&lt;h4 id="partial-template"&gt;Partial Template&lt;a class="headerlink" href="#partial-template" title="Permanent link"&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;A partial template is a template that can be included in other templates. Partial templates must be called using the “partial” template command. They are very handy for rolling up common behavior. For example, your site may have a banner that all pages use. Instead of copying the text of the banner into every single and list template, you could create a partial with the banner in it. That way if you decide to change the banner, you only have to change the partial template.&lt;/p&gt;
&lt;h2 id="create-a-new-site"&gt;Create a New Site&lt;a class="headerlink" href="#create-a-new-site" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Let’s use Hugo to create a new web site. I’m a Mac user, so I’ll create mine in my home directory, in the Sites folder. If you’re using Linux, you might have to create the folder first.&lt;/p&gt;
&lt;p&gt;The “new site” command will create a skeleton of a site. It will give you the basic directory structure and a useable configuration file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ hugo new site ~/Sites/zafta
$ cd ~/Sites/zafta
$ ls -l
total 8
drwxr-xr-x  7 quoha  staff  238 Sep 29 16:49 .
drwxr-xr-x  3 quoha  staff  102 Sep 29 16:49 ..
drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 archetypes
-rw-r--r--  1 quoha  staff   82 Sep 29 16:49 config.toml
drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 content
drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 layouts
drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 static
$
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Take a look in the content/ directory to confirm that it is empty.&lt;/p&gt;
&lt;p&gt;The other directories (archetypes/, layouts/, and static/) are used when customizing a theme. That’s a topic for a different tutorial, so please ignore them for now.&lt;/p&gt;
&lt;h3 id="generate-the-html-for-the-new-site"&gt;Generate the &lt;span class="caps"&gt;HTML&lt;/span&gt; For the New Site&lt;a class="headerlink" href="#generate-the-html-for-the-new-site" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Running the &lt;code&gt;hugo&lt;/code&gt; command with no options will read all the available content and generate the &lt;span class="caps"&gt;HTML&lt;/span&gt; files. It will also copy all static files (that’s everything that’s not content). Since we have an empty site, it won’t do much, but it will do it very quickly.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ hugo --verbose
INFO: 2014/09/29 Using config file: config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
WARN: 2014/09/29 Unable to locate layout: [index.html &lt;span class="ge"&gt;_default/list.html _&lt;/span&gt;default/single.html]
WARN: 2014/09/29 Unable to locate layout: [404.html]
0 draft content
0 future content
0 pages created
0 tags created
0 categories created
in 2 ms
$
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The “&lt;code&gt;--verbose&lt;/code&gt;” flag gives extra information that will be helpful when we build the template. Every line of the output that starts with “&lt;span class="caps"&gt;INFO&lt;/span&gt;:” or “&lt;span class="caps"&gt;WARN&lt;/span&gt;:” is present because we used that flag. The lines that start with “&lt;span class="caps"&gt;WARN&lt;/span&gt;:” are warning messages. We’ll go over them later.&lt;/p&gt;
&lt;p&gt;We can verify that the command worked by looking at the directory again.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;ls&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;
&lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;
&lt;span class="n"&gt;drwxr&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;xr&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;  &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;quoha&lt;/span&gt;  &lt;span class="n"&gt;staff&lt;/span&gt;   &lt;span class="mi"&gt;68&lt;/span&gt; &lt;span class="n"&gt;Sep&lt;/span&gt; &lt;span class="mi"&gt;29&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;49&lt;/span&gt; &lt;span class="n"&gt;archetypes&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;rw&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;quoha&lt;/span&gt;  &lt;span class="n"&gt;staff&lt;/span&gt;   &lt;span class="mi"&gt;82&lt;/span&gt; &lt;span class="n"&gt;Sep&lt;/span&gt; &lt;span class="mi"&gt;29&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;49&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toml&lt;/span&gt;
&lt;span class="n"&gt;drwxr&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;xr&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;  &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;quoha&lt;/span&gt;  &lt;span class="n"&gt;staff&lt;/span&gt;   &lt;span class="mi"&gt;68&lt;/span&gt; &lt;span class="n"&gt;Sep&lt;/span&gt; &lt;span class="mi"&gt;29&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;49&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;
&lt;span class="n"&gt;drwxr&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;xr&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;  &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;quoha&lt;/span&gt;  &lt;span class="n"&gt;staff&lt;/span&gt;   &lt;span class="mi"&gt;68&lt;/span&gt; &lt;span class="n"&gt;Sep&lt;/span&gt; &lt;span class="mi"&gt;29&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;49&lt;/span&gt; &lt;span class="n"&gt;layouts&lt;/span&gt;
&lt;span class="n"&gt;drwxr&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;xr&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;  &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="n"&gt;quoha&lt;/span&gt;  &lt;span class="n"&gt;staff&lt;/span&gt;  &lt;span class="mi"&gt;136&lt;/span&gt; &lt;span class="n"&gt;Sep&lt;/span&gt; &lt;span class="mi"&gt;29&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;02&lt;/span&gt; &lt;span class="n"&gt;public&lt;/span&gt;
&lt;span class="n"&gt;drwxr&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;xr&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;  &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;quoha&lt;/span&gt;  &lt;span class="n"&gt;staff&lt;/span&gt;   &lt;span class="mi"&gt;68&lt;/span&gt; &lt;span class="n"&gt;Sep&lt;/span&gt; &lt;span class="mi"&gt;29&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;49&lt;/span&gt; &lt;span class="n"&gt;static&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;See that new public/ directory? Hugo placed all generated content there. When you’re ready to publish your web site, that’s the place to start. For now, though, let’s just confirm that we have what we’d expect from a site with no content.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;ls&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="n"&gt;public&lt;/span&gt;
&lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;rw&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;quoha&lt;/span&gt;  &lt;span class="n"&gt;staff&lt;/span&gt;  &lt;span class="mi"&gt;416&lt;/span&gt; &lt;span class="n"&gt;Sep&lt;/span&gt; &lt;span class="mi"&gt;29&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;02&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xml&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;rw&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;quoha&lt;/span&gt;  &lt;span class="n"&gt;staff&lt;/span&gt;  &lt;span class="mi"&gt;262&lt;/span&gt; &lt;span class="n"&gt;Sep&lt;/span&gt; &lt;span class="mi"&gt;29&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;02&lt;/span&gt; &lt;span class="n"&gt;sitemap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xml&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Hugo created two &lt;span class="caps"&gt;XML&lt;/span&gt; files, which is standard, but there are no &lt;span class="caps"&gt;HTML&lt;/span&gt; files.&lt;/p&gt;
&lt;h3 id="test-the-new-site"&gt;Test the New Site&lt;a class="headerlink" href="#test-the-new-site" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Verify that you can run the built-in web server. It will dramatically shorten your development cycle if you do. Start it by running the “server” command. If it is successful, you will see output similar to the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;$ hugo server --verbose&lt;/span&gt;
&lt;span class="x"&gt;INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml&lt;/span&gt;
&lt;span class="x"&gt;INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/&lt;/span&gt;
&lt;span class="x"&gt;WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html]&lt;/span&gt;
&lt;span class="x"&gt;WARN: 2014/09/29 Unable to locate layout: [404.html]&lt;/span&gt;
&lt;span class="x"&gt;0 draft content&lt;/span&gt;
&lt;span class="x"&gt;0 future content&lt;/span&gt;
&lt;span class="x"&gt;0 pages created&lt;/span&gt;
&lt;span class="x"&gt;0 tags created&lt;/span&gt;
&lt;span class="x"&gt;0 categories created&lt;/span&gt;
&lt;span class="x"&gt;in 2 ms&lt;/span&gt;
&lt;span class="x"&gt;Serving pages from /Users/quoha/Sites/zafta/public&lt;/span&gt;
&lt;span class="x"&gt;Web Server is available at http://localhost:1313&lt;/span&gt;
&lt;span class="x"&gt;Press Ctrl+C to stop&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Connect to the listed &lt;span class="caps"&gt;URL&lt;/span&gt; (it’s on the line that starts with “Web Server”). If everything is working correctly, you should get a page that shows the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;index.xml
sitemap.xml
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That’s a listing of your public/ directory. Hugo didn’t create a home page because our site has no content. When there’s no index.html file in a directory, the server lists the files in the directory, which is what you should see in your browser.&lt;/p&gt;
&lt;p&gt;Let’s go back and look at those warnings again.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;WARN&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2014&lt;/span&gt;&lt;span class="sr"&gt;/09/29 Unable to locate layout: [index.html _default/list.html _default/si&lt;/span&gt;&lt;span class="n"&gt;ngle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;html&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;WARN&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2014&lt;/span&gt;&lt;span class="sr"&gt;/09/&lt;/span&gt;&lt;span class="mi"&gt;29&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Unable&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;locate&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;layout&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;404&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;html&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That second warning is easier to explain. We haven’t created a template to be used to generate “page not found errors.” The 404 message is a topic for a separate tutorial.&lt;/p&gt;
&lt;p&gt;Now for the first warning. It is for the home page. You can tell because the first layout that it looked for was “index.html.” That’s only used by the home page.&lt;/p&gt;
&lt;p&gt;I like that the verbose flag causes Hugo to list the files that it’s searching for. For the home page, they are index.html, _default/list.html, and _default/single.html. There are some rules that we’ll cover later that explain the names and paths. For now, just remember that Hugo couldn’t find a template for the home page and it told you so.&lt;/p&gt;
&lt;p&gt;At this point, you’ve got a working installation and site that we can build upon. All that’s left is to add some content and a theme to display it.&lt;/p&gt;
&lt;h2 id="create-a-new-theme"&gt;Create a New Theme&lt;a class="headerlink" href="#create-a-new-theme" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Hugo doesn’t ship with a default theme. There are a few available (I counted a dozen when I first installed Hugo) and Hugo comes with a command to create new themes.&lt;/p&gt;
&lt;p&gt;We’re going to create a new theme called “zafta.” Since the goal of this tutorial is to show you how to fill out the files to pull in your content, the theme will not contain any &lt;span class="caps"&gt;CSS&lt;/span&gt;. In other words, ugly but functional.&lt;/p&gt;
&lt;p&gt;All themes have opinions on content and layout. For example, Zafta uses “post” over “blog”. Strong opinions make for simpler templates but differing opinions make it tougher to use themes. When you build a theme, consider using the terms that other themes do.&lt;/p&gt;
&lt;h3 id="create-a-skeleton"&gt;Create a Skeleton&lt;a class="headerlink" href="#create-a-skeleton" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Use the hugo “new” command to create the skeleton of a theme. This creates the directory structure and places empty files for you to fill out.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ hugo new theme zafta

$ ls -l
total &lt;span class="m"&gt;8&lt;/span&gt;
drwxr-xr-x  &lt;span class="m"&gt;2&lt;/span&gt; quoha  staff   &lt;span class="m"&gt;68&lt;/span&gt; Sep &lt;span class="m"&gt;29&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt;:49 archetypes
-rw-r--r--  &lt;span class="m"&gt;1&lt;/span&gt; quoha  staff   &lt;span class="m"&gt;82&lt;/span&gt; Sep &lt;span class="m"&gt;29&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt;:49 config.toml
drwxr-xr-x  &lt;span class="m"&gt;2&lt;/span&gt; quoha  staff   &lt;span class="m"&gt;68&lt;/span&gt; Sep &lt;span class="m"&gt;29&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt;:49 content
drwxr-xr-x  &lt;span class="m"&gt;2&lt;/span&gt; quoha  staff   &lt;span class="m"&gt;68&lt;/span&gt; Sep &lt;span class="m"&gt;29&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt;:49 layouts
drwxr-xr-x  &lt;span class="m"&gt;4&lt;/span&gt; quoha  staff  &lt;span class="m"&gt;136&lt;/span&gt; Sep &lt;span class="m"&gt;29&lt;/span&gt; &lt;span class="m"&gt;17&lt;/span&gt;:02 public
drwxr-xr-x  &lt;span class="m"&gt;2&lt;/span&gt; quoha  staff   &lt;span class="m"&gt;68&lt;/span&gt; Sep &lt;span class="m"&gt;29&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt;:49 static
drwxr-xr-x  &lt;span class="m"&gt;3&lt;/span&gt; quoha  staff  &lt;span class="m"&gt;102&lt;/span&gt; Sep &lt;span class="m"&gt;29&lt;/span&gt; &lt;span class="m"&gt;17&lt;/span&gt;:31 themes

$ find themes -type f &lt;span class="p"&gt;|&lt;/span&gt; xargs ls -l
-rw-r--r--  &lt;span class="m"&gt;1&lt;/span&gt; quoha  staff  &lt;span class="m"&gt;1081&lt;/span&gt; Sep &lt;span class="m"&gt;29&lt;/span&gt; &lt;span class="m"&gt;17&lt;/span&gt;:31 themes/zafta/LICENSE.md
-rw-r--r--  &lt;span class="m"&gt;1&lt;/span&gt; quoha  staff     &lt;span class="m"&gt;0&lt;/span&gt; Sep &lt;span class="m"&gt;29&lt;/span&gt; &lt;span class="m"&gt;17&lt;/span&gt;:31 themes/zafta/archetypes/default.md
-rw-r--r--  &lt;span class="m"&gt;1&lt;/span&gt; quoha  staff     &lt;span class="m"&gt;0&lt;/span&gt; Sep &lt;span class="m"&gt;29&lt;/span&gt; &lt;span class="m"&gt;17&lt;/span&gt;:31 themes/zafta/layouts/_default/list.html
-rw-r--r--  &lt;span class="m"&gt;1&lt;/span&gt; quoha  staff     &lt;span class="m"&gt;0&lt;/span&gt; Sep &lt;span class="m"&gt;29&lt;/span&gt; &lt;span class="m"&gt;17&lt;/span&gt;:31 themes/zafta/layouts/_default/single.html
-rw-r--r--  &lt;span class="m"&gt;1&lt;/span&gt; quoha  staff     &lt;span class="m"&gt;0&lt;/span&gt; Sep &lt;span class="m"&gt;29&lt;/span&gt; &lt;span class="m"&gt;17&lt;/span&gt;:31 themes/zafta/layouts/index.html
-rw-r--r--  &lt;span class="m"&gt;1&lt;/span&gt; quoha  staff     &lt;span class="m"&gt;0&lt;/span&gt; Sep &lt;span class="m"&gt;29&lt;/span&gt; &lt;span class="m"&gt;17&lt;/span&gt;:31 themes/zafta/layouts/partials/footer.html
-rw-r--r--  &lt;span class="m"&gt;1&lt;/span&gt; quoha  staff     &lt;span class="m"&gt;0&lt;/span&gt; Sep &lt;span class="m"&gt;29&lt;/span&gt; &lt;span class="m"&gt;17&lt;/span&gt;:31 themes/zafta/layouts/partials/header.html
-rw-r--r--  &lt;span class="m"&gt;1&lt;/span&gt; quoha  staff    &lt;span class="m"&gt;93&lt;/span&gt; Sep &lt;span class="m"&gt;29&lt;/span&gt; &lt;span class="m"&gt;17&lt;/span&gt;:31 themes/zafta/theme.toml
$
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The skeleton includes templates (the files ending in .html), license file, a description of your theme (the theme.toml file), and an empty archetype.&lt;/p&gt;
&lt;p&gt;Please take a minute to fill out the theme.toml and &lt;span class="caps"&gt;LICENSE&lt;/span&gt;.md files. They’re optional, but if you’re going to be distributing your theme, it tells the world who to praise (or blame). It’s also nice to declare the license so that people will know how they can use the theme.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;vi&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;themes&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;zafta&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toml&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nx"&gt;author&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"michael d henderson"&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"a minimal working template"&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nx"&gt;license&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"MIT"&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"zafta"&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nx"&gt;source_repo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nx"&gt;tags&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"tags"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"categories"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;wq&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="err"&gt;##&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;also&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;edit&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;themes&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;zafta&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;LICENSE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;md&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;change&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;##&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;bit&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;that&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;says&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"YOUR_NAME_HERE"&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that the the skeleton’s template files are empty. Don’t worry, we’ll be changing that shortly.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;$ find themes/zafta -name '*.html' | xargs ls -l&lt;/span&gt;
&lt;span class="x"&gt;-rw-r--r--  1 quoha  staff  0 Sep 29 17:31 themes/zafta/layouts/_default/list.html&lt;/span&gt;
&lt;span class="x"&gt;-rw-r--r--  1 quoha  staff  0 Sep 29 17:31 themes/zafta/layouts/_default/single.html&lt;/span&gt;
&lt;span class="x"&gt;-rw-r--r--  1 quoha  staff  0 Sep 29 17:31 themes/zafta/layouts/index.html&lt;/span&gt;
&lt;span class="x"&gt;-rw-r--r--  1 quoha  staff  0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html&lt;/span&gt;
&lt;span class="x"&gt;-rw-r--r--  1 quoha  staff  0 Sep 29 17:31 themes/zafta/layouts/partials/header.html&lt;/span&gt;
&lt;span class="x"&gt;$&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="update-the-configuration-file-to-use-the-theme"&gt;Update the Configuration File to Use the Theme&lt;a class="headerlink" href="#update-the-configuration-file-to-use-the-theme" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Now that we’ve got a theme to work with, it’s a good idea to add the theme name to the configuration file. This is optional, because you can always add “-t zafta” on all your commands. I like to put it the configuration file because I like shorter command lines. If you don’t put it in the configuration file or specify it on the command line, you won’t use the template that you’re expecting to.&lt;/p&gt;
&lt;p&gt;Edit the file to add the theme, add a title for the site, and specify that all of our content will use the &lt;span class="caps"&gt;TOML&lt;/span&gt; format.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ vi config.toml
&lt;span class="nv"&gt;theme&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"zafta"&lt;/span&gt;
&lt;span class="nv"&gt;baseurl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;
&lt;span class="nv"&gt;languageCode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"en-us"&lt;/span&gt;
&lt;span class="nv"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"zafta - totally refreshing"&lt;/span&gt;
&lt;span class="nv"&gt;MetaDataFormat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"toml"&lt;/span&gt;
:wq

$
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="generate-the-site"&gt;Generate the Site&lt;a class="headerlink" href="#generate-the-site" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Now that we have an empty theme, let’s generate the site again.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ hugo --verbose
INFO: &lt;span class="m"&gt;2014&lt;/span&gt;/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: &lt;span class="m"&gt;2014&lt;/span&gt;/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: &lt;span class="m"&gt;2014&lt;/span&gt;/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
WARN: &lt;span class="m"&gt;2014&lt;/span&gt;/09/29 Unable to locate layout: &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;404&lt;/span&gt;.html theme/404.html&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="m"&gt;0&lt;/span&gt; draft content
&lt;span class="m"&gt;0&lt;/span&gt; future content
&lt;span class="m"&gt;0&lt;/span&gt; pages created
&lt;span class="m"&gt;0&lt;/span&gt; tags created
&lt;span class="m"&gt;0&lt;/span&gt; categories created
&lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt; ms
$
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Did you notice that the output is different? The warning message for the home page has disappeared and we have an additional information line saying that Hugo is syncing from the theme’s directory.&lt;/p&gt;
&lt;p&gt;Let’s check the public/ directory to see what Hugo’s created.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;total&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;16&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;drwxr&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="n"&gt;xr&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;quoha&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;staff&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="m"&gt;68&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sep&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;29&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;17&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;56&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;css&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="n"&gt;rw&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;--&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;--&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;quoha&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;staff&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sep&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;29&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;17&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;56&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="n"&gt;rw&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;--&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;--&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;quoha&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;staff&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="m"&gt;407&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sep&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;29&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;17&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;56&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xml&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;drwxr&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="n"&gt;xr&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;quoha&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;staff&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="m"&gt;68&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sep&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;29&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;17&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;56&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;js&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="n"&gt;rw&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;--&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;--&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;quoha&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;staff&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="m"&gt;243&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sep&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;29&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;17&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;56&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sitemap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xml&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice four things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Hugo created a home page. This is the file public/index.html.&lt;/li&gt;
&lt;li&gt;Hugo created a css/ directory.&lt;/li&gt;
&lt;li&gt;Hugo created a js/ directory.&lt;/li&gt;
&lt;li&gt;Hugo claimed that it created 0 pages. It created a file and copied over static files, but didn’t create any pages. That’s because it considers a “page” to be a file created directly from a content file. It doesn’t count things like the index.html files that it creates automatically.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id="the-home-page_1"&gt;The Home Page&lt;a class="headerlink" href="#the-home-page_1" title="Permanent link"&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Hugo supports many different types of templates. The home page is special because it gets its own type of template and its own template file. The file, layouts/index.html, is used to generate the &lt;span class="caps"&gt;HTML&lt;/span&gt; for the home page. The Hugo documentation says that this is the only required template, but that depends. Hugo’s warning message shows that it looks for three different templates:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nl"&gt;WARN&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2014&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;09&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;29&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Unable&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;locate&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;layout&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;_default&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;_default&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;single&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If it can’t find any of these, it completely skips creating the home page. We noticed that when we built the site without having a theme installed.&lt;/p&gt;
&lt;p&gt;When Hugo created our theme, it created an empty home page template. Now, when we build the site, Hugo finds the template and uses it to generate the &lt;span class="caps"&gt;HTML&lt;/span&gt; for the home page. Since the template file is empty, the &lt;span class="caps"&gt;HTML&lt;/span&gt; file is empty, too. If the template had any rules in it, then Hugo would have used them to generate the home page.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ find . -name index.html &lt;span class="p"&gt;|&lt;/span&gt; xargs ls -l
-rw-r--r--  &lt;span class="m"&gt;1&lt;/span&gt; quoha  staff  &lt;span class="m"&gt;0&lt;/span&gt; Sep &lt;span class="m"&gt;29&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;:21 ./public/index.html
-rw-r--r--  &lt;span class="m"&gt;1&lt;/span&gt; quoha  staff  &lt;span class="m"&gt;0&lt;/span&gt; Sep &lt;span class="m"&gt;29&lt;/span&gt; &lt;span class="m"&gt;17&lt;/span&gt;:31 ./themes/zafta/layouts/index.html
$
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="the-magic-of-static"&gt;The Magic of Static&lt;a class="headerlink" href="#the-magic-of-static" title="Permanent link"&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Hugo does two things when generating the site. It uses templates to transform content into &lt;span class="caps"&gt;HTML&lt;/span&gt; and it copies static files into the site. Unlike content, static files are not transformed. They are copied exactly as they are.&lt;/p&gt;
&lt;p&gt;Hugo assumes that your site will use both &lt;span class="caps"&gt;CSS&lt;/span&gt; and JavaScript, so it creates directories in your theme to hold them. Remember opinions? Well, Hugo’s opinion is that you’ll store your &lt;span class="caps"&gt;CSS&lt;/span&gt; in a directory named css/ and your JavaScript in a directory named js/. If you don’t like that, you can change the directory names in your theme directory or jane delete them completely. Hugo’s nice enough to offer its opinion, then behave nicely if you disagree.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;themes&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;zafta&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;xargs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ld&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;drwxr&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;xr&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;quoha&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;staff&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="mi"&gt;238&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sep&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;29&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;38&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;themes&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;zafta&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;drwxr&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;xr&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;quoha&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;staff&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="mi"&gt;102&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sep&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;29&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;themes&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;zafta&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;archetypes&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;drwxr&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;xr&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;quoha&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;staff&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="mi"&gt;170&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sep&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;29&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;themes&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;zafta&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;layouts&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;drwxr&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;xr&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;quoha&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;staff&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="mi"&gt;136&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sep&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;29&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;themes&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;zafta&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;layouts&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;_default&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;drwxr&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;xr&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;quoha&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;staff&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="mi"&gt;136&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sep&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;29&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;themes&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;zafta&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;layouts&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;partials&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;drwxr&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;xr&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;quoha&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;staff&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="mi"&gt;136&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sep&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;29&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;themes&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;zafta&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="kd"&gt;static&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;drwxr&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;xr&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;quoha&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;staff&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="mi"&gt;68&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sep&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;29&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;themes&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;zafta&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="kd"&gt;static&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;css&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;drwxr&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;xr&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;quoha&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;staff&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="mi"&gt;68&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sep&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;29&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;themes&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;zafta&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="kd"&gt;static&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;js&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="the-theme-development-cycle"&gt;The Theme Development Cycle&lt;a class="headerlink" href="#the-theme-development-cycle" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When you’re working on a theme, you will make changes in the theme’s directory, rebuild the site, and check your changes in the browser. Hugo makes this very easy:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Purge the public/ directory.&lt;/li&gt;
&lt;li&gt;Run the built in web server in watch mode.&lt;/li&gt;
&lt;li&gt;Open your site in a browser.&lt;/li&gt;
&lt;li&gt;Update the theme.&lt;/li&gt;
&lt;li&gt;Glance at your browser window to see changes.&lt;/li&gt;
&lt;li&gt;Return to step 4.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I’ll throw in one more opinion: never work on a theme on a live site. Always work on a copy of your site. Make changes to your theme, test them, then copy them up to your site. For added safety, use a tool like Git to keep a revision history of your content and your theme. Believe me when I say that it is too easy to lose both your mind and your changes.&lt;/p&gt;
&lt;p&gt;Check the main Hugo site for information on using Git with Hugo.&lt;/p&gt;
&lt;h3 id="purge-the-public-directory"&gt;Purge the public/ Directory&lt;a class="headerlink" href="#purge-the-public-directory" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;When generating the site, Hugo will create new files and update existing ones in the &lt;code&gt;public/&lt;/code&gt; directory. It will not delete files that are no longer used. For example, files that were created in the wrong directory or with the wrong title will remain. If you leave them, you might get confused by them later. I recommend cleaning out your site prior to generating it.&lt;/p&gt;
&lt;p&gt;Note: If you’re building on an &lt;span class="caps"&gt;SSD&lt;/span&gt;, you should ignore this. Churning on a &lt;span class="caps"&gt;SSD&lt;/span&gt; can be costly.&lt;/p&gt;
&lt;h3 id="hugos-watch-option"&gt;Hugo’s Watch Option&lt;a class="headerlink" href="#hugos-watch-option" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Hugo’s “&lt;code&gt;--watch&lt;/code&gt;” option will monitor the content/ and your theme directories for changes and rebuild the site automatically.&lt;/p&gt;
&lt;h3 id="live-reload"&gt;Live Reload&lt;a class="headerlink" href="#live-reload" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Hugo’s built in web server supports live reload. As pages are saved on the server, the browser is told to refresh the page. Usually, this happens faster than you can say, “Wow, that’s totally amazing.”&lt;/p&gt;
&lt;h3 id="development-commands"&gt;Development Commands&lt;a class="headerlink" href="#development-commands" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Use the following commands as the basis for your workflow.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gu"&gt;## purge old files. hugo will recreate the public directory.&lt;/span&gt;
&lt;span class="gu"&gt;##&lt;/span&gt;
&lt;span class="gu"&gt;$ rm -rf public&lt;/span&gt;
&lt;span class="gu"&gt;##&lt;/span&gt;
&lt;span class="gu"&gt;## run hugo in watch mode&lt;/span&gt;
&lt;span class="gu"&gt;##&lt;/span&gt;
&lt;span class="gu"&gt;$ hugo server --watch --verbose&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here’s sample output showing Hugo detecting a change to the template for the home page. Once generated, the web browser automatically reloaded the page. I’ve said this before, it’s amazing.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;rm&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;rf&lt;/span&gt; &lt;span class="n"&gt;public&lt;/span&gt;
&lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;hugo&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;watch&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;verbose&lt;/span&gt;
&lt;span class="n"&gt;INFO&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2014&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;09&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;29&lt;/span&gt; &lt;span class="n"&gt;Using&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Users&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;quoha&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Sites&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;zafta&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;config.toml&lt;/span&gt;
&lt;span class="n"&gt;INFO&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2014&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;09&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;29&lt;/span&gt; &lt;span class="n"&gt;syncing&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Users&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;quoha&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Sites&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;zafta&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;themes&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;zafta&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;static&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Users&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;quoha&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Sites&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;zafta&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;public&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="n"&gt;INFO&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2014&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;09&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;29&lt;/span&gt; &lt;span class="n"&gt;syncing&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Users&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;quoha&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Sites&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;zafta&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;static&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Users&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;quoha&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Sites&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;zafta&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;public&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="n"&gt;WARN&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2014&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;09&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;29&lt;/span&gt; &lt;span class="n"&gt;Unable&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;locate&lt;/span&gt; &lt;span class="n"&gt;layout&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;404&lt;/span&gt;&lt;span class="n"&gt;.html&lt;/span&gt; &lt;span class="n"&gt;theme&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;404&lt;/span&gt;&lt;span class="n"&gt;.html&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="n"&gt;draft&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;
&lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="n"&gt;future&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;
&lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="n"&gt;pages&lt;/span&gt; &lt;span class="n"&gt;created&lt;/span&gt;
&lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="n"&gt;tags&lt;/span&gt; &lt;span class="n"&gt;created&lt;/span&gt;
&lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="n"&gt;categories&lt;/span&gt; &lt;span class="n"&gt;created&lt;/span&gt;
&lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="n"&gt;ms&lt;/span&gt;
&lt;span class="n"&gt;Watching&lt;/span&gt; &lt;span class="n"&gt;for&lt;/span&gt; &lt;span class="n"&gt;changes&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Users&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;quoha&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Sites&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;zafta&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;
&lt;span class="n"&gt;Serving&lt;/span&gt; &lt;span class="n"&gt;pages&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Users&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;quoha&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Sites&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;zafta&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;public&lt;/span&gt;
&lt;span class="n"&gt;Web&lt;/span&gt; &lt;span class="n"&gt;Server&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;available&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;://&lt;/span&gt;&lt;span class="n"&gt;localhost&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="m"&gt;1313&lt;/span&gt;
&lt;span class="n"&gt;Press&lt;/span&gt; &lt;span class="n"&gt;Ctrl&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;stop&lt;/span&gt;
&lt;span class="n"&gt;INFO&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2014&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;09&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;29&lt;/span&gt; &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="n"&gt;System&lt;/span&gt; &lt;span class="n"&gt;Event&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"/Users/quoha/Sites/zafta/themes/zafta/layouts/index.html"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;MODIFY&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;ATTRIB&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;Change&lt;/span&gt; &lt;span class="n"&gt;detected&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rebuilding&lt;/span&gt; &lt;span class="n"&gt;site&lt;/span&gt;

&lt;span class="n"&gt;WARN&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2014&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;09&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;29&lt;/span&gt; &lt;span class="n"&gt;Unable&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;locate&lt;/span&gt; &lt;span class="n"&gt;layout&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;404&lt;/span&gt;&lt;span class="n"&gt;.html&lt;/span&gt; &lt;span class="n"&gt;theme&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;404&lt;/span&gt;&lt;span class="n"&gt;.html&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="n"&gt;draft&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;
&lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="n"&gt;future&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;
&lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="n"&gt;pages&lt;/span&gt; &lt;span class="n"&gt;created&lt;/span&gt;
&lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="n"&gt;tags&lt;/span&gt; &lt;span class="n"&gt;created&lt;/span&gt;
&lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="n"&gt;categories&lt;/span&gt; &lt;span class="n"&gt;created&lt;/span&gt;
&lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="n"&gt;ms&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="update-the-home-page-template"&gt;Update the Home Page Template&lt;a class="headerlink" href="#update-the-home-page-template" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The home page is one of a few special pages that Hugo creates automatically. As mentioned earlier, it looks for one of three files in the theme’s layout/ directory:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;index.html&lt;/li&gt;
&lt;li&gt;_default/list.html&lt;/li&gt;
&lt;li&gt;_default/single.html&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We could update one of the default templates, but a good design decision is to update the most specific template available. That’s not a hard and fast rule (in fact, we’ll break it a few times in this tutorial), but it is a good generalization.&lt;/p&gt;
&lt;h3 id="make-a-static-home-page"&gt;Make a Static Home Page&lt;a class="headerlink" href="#make-a-static-home-page" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Right now, that page is empty because we don’t have any content and we don’t have any logic in the template. Let’s change that by adding some text to the template.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ vi themes/zafta/layouts/index.html
&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;hugo says hello!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
:wq

$
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Build the web site and then verify the results.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ hugo --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content
0 future content
0 pages created
0 tags created
0 categories created
in 2 ms

$ find public -type f -name '*.html' | xargs ls -l
-rw-r--r--  1 quoha  staff  78 Sep 29 21:26 public/index.html

$ cat public/index.html
&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;hugo says hello!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="live-reload_1"&gt;Live Reload&lt;a class="headerlink" href="#live-reload_1" title="Permanent link"&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Note: If you’re running the server with the &lt;code&gt;--watch&lt;/code&gt; option, you’ll see different content in the file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;$ cat public/index.html&lt;/span&gt;
&lt;span class="x"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;  &amp;lt;p&amp;gt;hugo says hello!&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;&amp;lt;script&amp;gt;document.write('&amp;lt;script src="http://'&lt;/span&gt;
&lt;span class="x"&gt;        + (location.host || 'localhost').split(':')[0]&lt;/span&gt;
&lt;span class="x"&gt;    + ':1313/livereload.js?mindelay=10"&amp;gt;&amp;lt;/'&lt;/span&gt;
&lt;span class="x"&gt;        + 'script&amp;gt;')&amp;lt;/script&amp;gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When you use &lt;code&gt;--watch&lt;/code&gt;, the Live Reload script is added by Hugo. Look for live reload in the documentation to see what it does and how to disable it.&lt;/p&gt;
&lt;h3 id="build-a-dynamic-home-page"&gt;Build a “Dynamic” Home Page&lt;a class="headerlink" href="#build-a-dynamic-home-page" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span class="dquo"&gt;“&lt;/span&gt;Dynamic home page?” Hugo’s a static web site generator, so this seems an odd thing to say. I mean let’s have the home page automatically reflect the content in the site every time Hugo builds it. We’ll use iteration in the template to do that.&lt;/p&gt;
&lt;h4 id="create-new-posts"&gt;Create New Posts&lt;a class="headerlink" href="#create-new-posts" title="Permanent link"&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Now that we have the home page generating static content, let’s add some content to the site. We’ll display these posts as a list on the home page and on their own page, too.&lt;/p&gt;
&lt;p&gt;Hugo has a command to generate a skeleton post, just like it does for sites and themes.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ hugo --verbose new post/first.md
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 attempting to create  post/first.md of post
INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/default.md
ERROR: 2014/09/29 Unable to Cast &amp;lt;nil&amp;gt; to map[string]interface{}

$
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That wasn’t very nice, was it?&lt;/p&gt;
&lt;p&gt;The “new” command uses an archetype to create the post file. Hugo created an empty default archetype file, but that causes an error when there’s a theme. For me, the workaround was to create an archetypes file specifically for the post type.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ vi themes/zafta/archetypes/post.md
+++
&lt;span class="nv"&gt;Description&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;
&lt;span class="nv"&gt;Tags&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[]&lt;/span&gt;
&lt;span class="nv"&gt;Categories&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[]&lt;/span&gt;
+++
:wq

$ find themes/zafta/archetypes -type f &lt;span class="p"&gt;|&lt;/span&gt; xargs ls -l
-rw-r--r--  &lt;span class="m"&gt;1&lt;/span&gt; quoha  staff   &lt;span class="m"&gt;0&lt;/span&gt; Sep &lt;span class="m"&gt;29&lt;/span&gt; &lt;span class="m"&gt;21&lt;/span&gt;:53 themes/zafta/archetypes/default.md
-rw-r--r--  &lt;span class="m"&gt;1&lt;/span&gt; quoha  staff  &lt;span class="m"&gt;51&lt;/span&gt; Sep &lt;span class="m"&gt;29&lt;/span&gt; &lt;span class="m"&gt;21&lt;/span&gt;:54 themes/zafta/archetypes/post.md

$ hugo --verbose new post/first.md
INFO: &lt;span class="m"&gt;2014&lt;/span&gt;/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: &lt;span class="m"&gt;2014&lt;/span&gt;/09/29 attempting to create  post/first.md of post
INFO: &lt;span class="m"&gt;2014&lt;/span&gt;/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md
INFO: &lt;span class="m"&gt;2014&lt;/span&gt;/09/29 creating /Users/quoha/Sites/zafta/content/post/first.md
/Users/quoha/Sites/zafta/content/post/first.md created

$ hugo --verbose new post/second.md
INFO: &lt;span class="m"&gt;2014&lt;/span&gt;/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: &lt;span class="m"&gt;2014&lt;/span&gt;/09/29 attempting to create  post/second.md of post
INFO: &lt;span class="m"&gt;2014&lt;/span&gt;/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md
INFO: &lt;span class="m"&gt;2014&lt;/span&gt;/09/29 creating /Users/quoha/Sites/zafta/content/post/second.md
/Users/quoha/Sites/zafta/content/post/second.md created

$ ls -l content/post
total &lt;span class="m"&gt;16&lt;/span&gt;
-rw-r--r--  &lt;span class="m"&gt;1&lt;/span&gt; quoha  staff  &lt;span class="m"&gt;104&lt;/span&gt; Sep &lt;span class="m"&gt;29&lt;/span&gt; &lt;span class="m"&gt;21&lt;/span&gt;:54 first.md
-rw-r--r--  &lt;span class="m"&gt;1&lt;/span&gt; quoha  staff  &lt;span class="m"&gt;105&lt;/span&gt; Sep &lt;span class="m"&gt;29&lt;/span&gt; &lt;span class="m"&gt;21&lt;/span&gt;:57 second.md

$ cat content/post/first.md
+++
&lt;span class="nv"&gt;Categories&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[]&lt;/span&gt;
&lt;span class="nv"&gt;Description&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;
&lt;span class="nv"&gt;Tags&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[]&lt;/span&gt;
&lt;span class="nv"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"2014-09-29T21:54:53-05:00"&lt;/span&gt;
&lt;span class="nv"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"first"&lt;/span&gt;

+++
my first post

$ cat content/post/second.md
+++
&lt;span class="nv"&gt;Categories&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[]&lt;/span&gt;
&lt;span class="nv"&gt;Description&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;
&lt;span class="nv"&gt;Tags&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[]&lt;/span&gt;
&lt;span class="nv"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"2014-09-29T21:57:09-05:00"&lt;/span&gt;
&lt;span class="nv"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"second"&lt;/span&gt;

+++
my second post

$
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Build the web site and then verify the results.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;rm&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;rf&lt;/span&gt; &lt;span class="n"&gt;public&lt;/span&gt;
&lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;hugo&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;verbose&lt;/span&gt;
&lt;span class="n"&gt;INFO&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2014&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;09&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;29&lt;/span&gt; &lt;span class="n"&gt;Using&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Users&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;quoha&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Sites&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;zafta&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;config.toml&lt;/span&gt;
&lt;span class="n"&gt;INFO&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2014&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;09&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;29&lt;/span&gt; &lt;span class="n"&gt;syncing&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Users&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;quoha&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Sites&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;zafta&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;themes&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;zafta&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;static&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Users&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;quoha&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Sites&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;zafta&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;public&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="n"&gt;INFO&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2014&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;09&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;29&lt;/span&gt; &lt;span class="n"&gt;syncing&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Users&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;quoha&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Sites&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;zafta&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;static&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Users&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;quoha&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Sites&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;zafta&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;public&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="n"&gt;INFO&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2014&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;09&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;29&lt;/span&gt; &lt;span class="n"&gt;found&lt;/span&gt; &lt;span class="n"&gt;taxonomies&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"category"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s"&gt;"categories"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"tag"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s"&gt;"tags"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;WARN&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2014&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;09&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;29&lt;/span&gt; &lt;span class="n"&gt;Unable&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;locate&lt;/span&gt; &lt;span class="n"&gt;layout&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;404&lt;/span&gt;&lt;span class="n"&gt;.html&lt;/span&gt; &lt;span class="n"&gt;theme&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;404&lt;/span&gt;&lt;span class="n"&gt;.html&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="n"&gt;draft&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;
&lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="n"&gt;future&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;
&lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="n"&gt;pages&lt;/span&gt; &lt;span class="n"&gt;created&lt;/span&gt;
&lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="n"&gt;tags&lt;/span&gt; &lt;span class="n"&gt;created&lt;/span&gt;
&lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="n"&gt;categories&lt;/span&gt; &lt;span class="n"&gt;created&lt;/span&gt;
&lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt; &lt;span class="n"&gt;ms&lt;/span&gt;
&lt;span class="o"&gt;$&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The output says that it created 2 pages. Those are our new posts:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ find public -type f -name '*.html' | xargs ls -l
-rw-r--r--  1 quoha  staff  78 Sep 29 22:13 public/index.html
-rw-r--r--  1 quoha  staff   0 Sep 29 22:13 public/post/first/index.html
-rw-r--r--  1 quoha  staff   0 Sep 29 22:13 public/post/index.html
-rw-r--r--  1 quoha  staff   0 Sep 29 22:13 public/post/second/index.html
$
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The new files are empty because because the templates used to generate the content are empty. The homepage doesn’t show the new content, either. We have to update the templates to add the posts.&lt;/p&gt;
&lt;h3 id="list-and-single-templates"&gt;List and Single Templates&lt;a class="headerlink" href="#list-and-single-templates" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In Hugo, we have three major kinds of templates. There’s the home page template that we updated previously. It is used only by the home page. We also have “single” templates which are used to generate output for a single content file. We also have “list” templates that are used to group multiple pieces of content before generating output.&lt;/p&gt;
&lt;p&gt;Generally speaking, list templates are named “list.html” and single templates are named “single.html.”&lt;/p&gt;
&lt;p&gt;There are three other types of templates: partials, content views, and terms. We will not go into much detail on these.&lt;/p&gt;
&lt;h3 id="add-content-to-the-homepage"&gt;Add Content to the Homepage&lt;a class="headerlink" href="#add-content-to-the-homepage" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The home page will contain a list of posts. Let’s update its template to add the posts that we just created. The logic in the template will run every time we build the site.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;$ vi themes/zafta/layouts/index.html&lt;/span&gt;
&lt;span class="x"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;  {{ range first 10 .Data.Pages }}&lt;/span&gt;
&lt;span class="x"&gt;    &amp;lt;h1&amp;gt;{{ .Title }}&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;  {{ end }}&lt;/span&gt;
&lt;span class="x"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;:wq&lt;/span&gt;

&lt;span class="x"&gt;$&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Hugo uses the Go template engine. That engine scans the template files for commands which are enclosed between “{{” and “}}”. In our template, the commands are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;range&lt;/li&gt;
&lt;li&gt;.Title&lt;/li&gt;
&lt;li&gt;end&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The “range” command is an iterator. We’re going to use it to go through the first ten pages. Every &lt;span class="caps"&gt;HTML&lt;/span&gt; file that Hugo creates is treated as a page, so looping through the list of pages will look at every file that will be created.&lt;/p&gt;
&lt;p&gt;The “.Title” command prints the value of the “title” variable. Hugo pulls it from the front matter in the Markdown file.&lt;/p&gt;
&lt;p&gt;The “end” command signals the end of the range iterator. The engine loops back to the top of the iteration when it finds “end.” Everything between the “range” and “end” is evaluated every time the engine goes through the iteration. In this file, that would cause the title from the first ten pages to be output as heading level one.&lt;/p&gt;
&lt;p&gt;It’s helpful to remember that some variables, like .Data, are created before any output files. Hugo loads every content file into the variable and then gives the template a chance to process before creating the &lt;span class="caps"&gt;HTML&lt;/span&gt; files.&lt;/p&gt;
&lt;p&gt;Build the web site and then verify the results.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ rm -rf public
$ hugo --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 found taxonomies: map[string]string{"tag":"tags", "category":"categories"}
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content
0 future content
2 pages created
0 tags created
0 categories created
in 4 ms
$ find public -type f -name '*.html' | xargs ls -l
-rw-r--r--  1 quoha  staff  94 Sep 29 22:23 public/index.html
-rw-r--r--  1 quoha  staff   0 Sep 29 22:23 public/post/first/index.html
-rw-r--r--  1 quoha  staff   0 Sep 29 22:23 public/post/index.html
-rw-r--r--  1 quoha  staff   0 Sep 29 22:23 public/post/second/index.html
$ cat public/index.html
&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;second&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;first&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
$
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Congratulations, the home page shows the title of the two posts. The posts themselves are still empty, but let’s take a moment to appreciate what we’ve done. Your template now generates output dynamically. Believe it or not, by inserting the range command inside of those curly braces, you’ve learned everything you need to know to build a theme. All that’s really left is understanding which template will be used to generate each content file and becoming familiar with the commands for the template engine.&lt;/p&gt;
&lt;p&gt;And, if that were entirely true, this tutorial would be much shorter. There are a few things to know that will make creating a new template much easier. Don’t worry, though, that’s all to come.&lt;/p&gt;
&lt;h3 id="add-content-to-the-posts"&gt;Add Content to the Posts&lt;a class="headerlink" href="#add-content-to-the-posts" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;We’re working with posts, which are in the content/post/ directory. That means that their section is “post” (and if we don’t do something weird, their type is also “post”).&lt;/p&gt;
&lt;p&gt;Hugo uses the section and type to find the template file for every piece of content. Hugo will first look for a template file that matches the section or type name. If it can’t find one, then it will look in the _default/ directory. There are some twists that we’ll cover when we get to categories and tags, but for now we can assume that Hugo will try post/single.html, then _default/single.html.&lt;/p&gt;
&lt;p&gt;Now that we know the search rule, let’s see what we actually have available:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ find themes/zafta -name single.html &lt;span class="p"&gt;|&lt;/span&gt; xargs ls -l
-rw-r--r--  &lt;span class="m"&gt;1&lt;/span&gt; quoha  staff  &lt;span class="m"&gt;132&lt;/span&gt; Sep &lt;span class="m"&gt;29&lt;/span&gt; &lt;span class="m"&gt;17&lt;/span&gt;:31 themes/zafta/layouts/_default/single.html
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We could create a new template, post/single.html, or change the default. Since we don’t know of any other content types, let’s start with updating the default.&lt;/p&gt;
&lt;p&gt;Remember, any content that we haven’t created a template for will end up using this template. That can be good or bad. Bad because I know that we’re going to be adding different types of content and we’re going to end up undoing some of the changes we’ve made. It’s good because we’ll be able to see immediate results. It’s also good to start here because we can start to build the basic layout for the site. As we add more content types, we’ll refactor this file and move logic around. Hugo makes that fairly painless, so we’ll accept the cost and proceed.&lt;/p&gt;
&lt;p&gt;Please see the Hugo documentation on template rendering for all the details on determining which template to use. And, as the docs mention, if you’re building a single page application (&lt;span class="caps"&gt;SPA&lt;/span&gt;) web site, you can delete all of the other templates and work with just the default single page. That’s a refreshing amount of joy right there.&lt;/p&gt;
&lt;h4 id="update-the-template-file"&gt;Update the Template File&lt;a class="headerlink" href="#update-the-template-file" title="Permanent link"&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ vi themes/zafta/layouts/_default/single.html
&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;.Title&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;.Title&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;.Content&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
:wq

$
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Build the web site and verify the results.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ rm -rf public
$ hugo --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 found taxonomies: map[string]string{"tag":"tags", "category":"categories"}
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content
0 future content
2 pages created
0 tags created
0 categories created
in 4 ms

$ find public -type f -name '*.html' | xargs ls -l
-rw-r--r--  1 quoha  staff   94 Sep 29 22:40 public/index.html
-rw-r--r--  1 quoha  staff  125 Sep 29 22:40 public/post/first/index.html
-rw-r--r--  1 quoha  staff    0 Sep 29 22:40 public/post/index.html
-rw-r--r--  1 quoha  staff  128 Sep 29 22:40 public/post/second/index.html

$ cat public/post/first/index.html
&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;first&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;first&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;my first post&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

$ cat public/post/second/index.html
&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;second&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;second&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;my second post&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
$
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice that the posts now have content. You can go to localhost:1313/post/first to verify.&lt;/p&gt;
&lt;h3 id="linking-to-content"&gt;Linking to Content&lt;a class="headerlink" href="#linking-to-content" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The posts are on the home page. Let’s add a link from there to the post. Since this is the home page, we’ll update its template.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ vi themes/zafta/layouts/index.html
&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;range&lt;/span&gt; &lt;span class="nv"&gt;first&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt; &lt;span class="nv"&gt;.Data.Pages&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;.Permalink&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;.Title&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Build the web site and verify the results.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ rm -rf public
$ hugo --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 found taxonomies: map[string]string{"tag":"tags", "category":"categories"}
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content
0 future content
2 pages created
0 tags created
0 categories created
in 4 ms

$ find public -type f -name '*.html' | xargs ls -l
-rw-r--r--  1 quoha  staff  149 Sep 29 22:44 public/index.html
-rw-r--r--  1 quoha  staff  125 Sep 29 22:44 public/post/first/index.html
-rw-r--r--  1 quoha  staff    0 Sep 29 22:44 public/post/index.html
-rw-r--r--  1 quoha  staff  128 Sep 29 22:44 public/post/second/index.html

$ cat public/index.html
&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/post/second/"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;second&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/post/first/"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;first&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

$
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="create-a-post-listing"&gt;Create a Post Listing&lt;a class="headerlink" href="#create-a-post-listing" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;We have the posts displaying on the home page and on their own page. We also have a file public/post/index.html that is empty. Let’s make it show a list of all posts (not just the first ten).&lt;/p&gt;
&lt;p&gt;We need to decide which template to update. This will be a listing, so it should be a list template. Let’s take a quick look and see which list templates are available.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ find themes/zafta -name list.html &lt;span class="p"&gt;|&lt;/span&gt; xargs ls -l
-rw-r--r--  &lt;span class="m"&gt;1&lt;/span&gt; quoha  staff  &lt;span class="m"&gt;0&lt;/span&gt; Sep &lt;span class="m"&gt;29&lt;/span&gt; &lt;span class="m"&gt;17&lt;/span&gt;:31 themes/zafta/layouts/_default/list.html
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As with the single post, we have to decide to update _default/list.html or create post/list.html. We still don’t have multiple content types, so let’s stay consistent and update the default list template.&lt;/p&gt;
&lt;h2 id="creating-top-level-pages"&gt;Creating Top Level Pages&lt;a class="headerlink" href="#creating-top-level-pages" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Let’s add an “about” page and display it at the top level (as opposed to a sub-level like we did with posts).&lt;/p&gt;
&lt;p&gt;The default in Hugo is to use the directory structure of the content/ directory to guide the location of the generated html in the public/ directory. Let’s verify that by creating an “about” page at the top level:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ vi content/about.md
+++
&lt;span class="nv"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"about"&lt;/span&gt;
&lt;span class="nv"&gt;description&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"about this site"&lt;/span&gt;
&lt;span class="nv"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"2014-09-27"&lt;/span&gt;
&lt;span class="nv"&gt;slug&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"about time"&lt;/span&gt;
+++

&lt;span class="c1"&gt;## about us&lt;/span&gt;

i&lt;span class="err"&gt;'&lt;/span&gt;m speechless
:wq
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Generate the web site and verify the results.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ find public -name &lt;span class="s1"&gt;'*.html'&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; xargs ls -l
-rw-rw-r--  &lt;span class="m"&gt;1&lt;/span&gt; mdhender  staff   &lt;span class="m"&gt;334&lt;/span&gt; Sep &lt;span class="m"&gt;27&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt;:08 public/about-time/index.html
-rw-rw-r--  &lt;span class="m"&gt;1&lt;/span&gt; mdhender  staff   &lt;span class="m"&gt;527&lt;/span&gt; Sep &lt;span class="m"&gt;27&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt;:08 public/index.html
-rw-rw-r--  &lt;span class="m"&gt;1&lt;/span&gt; mdhender  staff   &lt;span class="m"&gt;358&lt;/span&gt; Sep &lt;span class="m"&gt;27&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt;:08 public/post/first-post/index.html
-rw-rw-r--  &lt;span class="m"&gt;1&lt;/span&gt; mdhender  staff     &lt;span class="m"&gt;0&lt;/span&gt; Sep &lt;span class="m"&gt;27&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt;:08 public/post/index.html
-rw-rw-r--  &lt;span class="m"&gt;1&lt;/span&gt; mdhender  staff   &lt;span class="m"&gt;342&lt;/span&gt; Sep &lt;span class="m"&gt;27&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt;:08 public/post/second-post/index.html
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice that the page wasn’t created at the top level. It was created in a sub-directory named ‘about-time/’. That name came from our slug. Hugo will use the slug to name the generated content. It’s a reasonable default, by the way, but we can learn a few things by fighting it for this file.&lt;/p&gt;
&lt;p&gt;One other thing. Take a look at the home page.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cat public/index.html
&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"http://localhost:1313/post/theme/"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;creating a new theme&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"http://localhost:1313/about-time/"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;about&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"http://localhost:1313/post/second-post/"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;second&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"http://localhost:1313/post/first-post/"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;first&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'&amp;lt;script src="http://'&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'localhost'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;':'&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mf"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;':1313/livereload.js?mindelay=10"&amp;gt;&amp;lt;/'&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'script&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;)&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice that the “about” link is listed with the posts? That’s not desirable, so let’s change that first.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ vi themes/zafta/layouts/index.html
&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;posts&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;range&lt;/span&gt; &lt;span class="nv"&gt;first&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt; &lt;span class="nv"&gt;.Data.Pages&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;
    &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;eq&lt;/span&gt; &lt;span class="nv"&gt;.Type&lt;/span&gt; &lt;span class="s2"&gt;"post"&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;.Permalink&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;.Title&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;
  &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;

  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;pages&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;range&lt;/span&gt; &lt;span class="nv"&gt;.Data.Pages&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;
    &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;eq&lt;/span&gt; &lt;span class="nv"&gt;.Type&lt;/span&gt; &lt;span class="s2"&gt;"page"&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;.Permalink&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;.Title&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;
  &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
:wq
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Generate the web site and verify the results. The home page has two sections, posts and pages, and each section has the right set of headings and links in it.&lt;/p&gt;
&lt;p&gt;But, that about page still renders to about-time/index.html.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ find public -name &lt;span class="s1"&gt;'*.html'&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; xargs ls -l
-rw-rw-r--  &lt;span class="m"&gt;1&lt;/span&gt; mdhender  staff    &lt;span class="m"&gt;334&lt;/span&gt; Sep &lt;span class="m"&gt;27&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt;:33 public/about-time/index.html
-rw-rw-r--  &lt;span class="m"&gt;1&lt;/span&gt; mdhender  staff    &lt;span class="m"&gt;645&lt;/span&gt; Sep &lt;span class="m"&gt;27&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt;:33 public/index.html
-rw-rw-r--  &lt;span class="m"&gt;1&lt;/span&gt; mdhender  staff    &lt;span class="m"&gt;358&lt;/span&gt; Sep &lt;span class="m"&gt;27&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt;:33 public/post/first-post/index.html
-rw-rw-r--  &lt;span class="m"&gt;1&lt;/span&gt; mdhender  staff      &lt;span class="m"&gt;0&lt;/span&gt; Sep &lt;span class="m"&gt;27&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt;:33 public/post/index.html
-rw-rw-r--  &lt;span class="m"&gt;1&lt;/span&gt; mdhender  staff    &lt;span class="m"&gt;342&lt;/span&gt; Sep &lt;span class="m"&gt;27&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt;:33 public/post/second-post/index.html
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Knowing that hugo is using the slug to generate the file name, the simplest solution is to change the slug. Let’s do it the hard way and change the permalink in the configuration file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;vi&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toml&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;permalinks&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;"/:title/"&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;about&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;"/:filename/"&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Generate the web site and verify that this didn’t work. Hugo lets “slug” or “&lt;span class="caps"&gt;URL&lt;/span&gt;” override the permalinks setting in the configuration file. Go ahead and comment out the slug in content/about.md, then generate the web site to get it to be created in the right place.&lt;/p&gt;
&lt;h2 id="sharing-templates"&gt;Sharing Templates&lt;a class="headerlink" href="#sharing-templates" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you’ve been following along, you probably noticed that posts have titles in the browser and the home page doesn’t. That’s because we didn’t put the title in the home page’s template (layouts/index.html). That’s an easy thing to do, but let’s look at a different option.&lt;/p&gt;
&lt;p&gt;We can put the common bits into a shared template that’s stored in the themes/zafta/layouts/partials/ directory.&lt;/p&gt;
&lt;h3 id="create-the-header-and-footer-partials"&gt;Create the Header and Footer Partials&lt;a class="headerlink" href="#create-the-header-and-footer-partials" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In Hugo, a partial is a sugar-coated template. Normally a template reference has a path specified. Partials are different. Hugo searches for them along a &lt;span class="caps"&gt;TODO&lt;/span&gt; defined search path. This makes it easier for end-users to override the theme’s presentation.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ vi themes/zafta/layouts/partials/header.html
&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;.Title&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
:wq

$ vi themes/zafta/layouts/partials/footer.html
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
:wq
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="update-the-home-page-template-to-use-the-partials"&gt;Update the Home Page Template to Use the Partials&lt;a class="headerlink" href="#update-the-home-page-template-to-use-the-partials" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The most noticeable difference between a template call and a partials call is the lack of path:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;template&lt;/span&gt; &lt;span class="s2"&gt;"theme/partials/header.html"&lt;/span&gt; &lt;span class="err"&gt;.&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;versus&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;partial&lt;/span&gt; &lt;span class="s2"&gt;"header.html"&lt;/span&gt; &lt;span class="err"&gt;.&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Both pass in the context.&lt;/p&gt;
&lt;p&gt;Let’s change the home page template to use these new partials.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ vi themes/zafta/layouts/index.html
&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;partial&lt;/span&gt; &lt;span class="s2"&gt;"header.html"&lt;/span&gt; &lt;span class="err"&gt;.&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;posts&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;range&lt;/span&gt; &lt;span class="nv"&gt;first&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt; &lt;span class="nv"&gt;.Data.Pages&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;
    &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;eq&lt;/span&gt; &lt;span class="nv"&gt;.Type&lt;/span&gt; &lt;span class="s2"&gt;"post"&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;.Permalink&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;.Title&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;
  &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;pages&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;range&lt;/span&gt; &lt;span class="nv"&gt;.Data.Pages&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;
    &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;or&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;eq&lt;/span&gt; &lt;span class="nv"&gt;.Type&lt;/span&gt; &lt;span class="s2"&gt;"page"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;eq&lt;/span&gt; &lt;span class="nv"&gt;.Type&lt;/span&gt; &lt;span class="s2"&gt;"about"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;.Permalink&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;.Type&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt; - &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;.Title&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt; - &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;.RelPermalink&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;
  &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;

&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;partial&lt;/span&gt; &lt;span class="s2"&gt;"footer.html"&lt;/span&gt; &lt;span class="err"&gt;.&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;
:wq
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Generate the web site and verify the results. The title on the home page is now “your title here”, which comes from the “title” variable in the config.toml file.&lt;/p&gt;
&lt;h3 id="update-the-default-single-template-to-use-the-partials"&gt;Update the Default Single Template to Use the Partials&lt;a class="headerlink" href="#update-the-default-single-template-to-use-the-partials" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ vi themes/zafta/layouts/_default/single.html
&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;partial&lt;/span&gt; &lt;span class="s2"&gt;"header.html"&lt;/span&gt; &lt;span class="err"&gt;.&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;.Title&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;.Content&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;

&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;partial&lt;/span&gt; &lt;span class="s2"&gt;"footer.html"&lt;/span&gt; &lt;span class="err"&gt;.&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;
:wq
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Generate the web site and verify the results. The title on the posts and the about page should both reflect the value in the markdown file.&lt;/p&gt;
&lt;h2 id="add-date-published-to-posts"&gt;Add “Date Published” to Posts&lt;a class="headerlink" href="#add-date-published-to-posts" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It’s common to have posts display the date that they were written or published, so let’s add that. The front matter of our posts has a variable named “date.” It’s usually the date the content was created, but let’s pretend that’s the value we want to display.&lt;/p&gt;
&lt;h3 id="add-date-published-to-the-template"&gt;Add “Date Published” to the Template&lt;a class="headerlink" href="#add-date-published-to-the-template" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;We’ll start by updating the template used to render the posts. The template code will look like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;.Date.Format&lt;/span&gt; &lt;span class="s2"&gt;"Mon, Jan 2, 2006"&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Posts use the default single template, so we’ll change that file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ vi themes/zafta/layouts/_default/single.html
&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;partial&lt;/span&gt; &lt;span class="s2"&gt;"header.html"&lt;/span&gt; &lt;span class="err"&gt;.&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;.Title&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;.Date.Format&lt;/span&gt; &lt;span class="s2"&gt;"Mon, Jan 2, 2006"&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;.Content&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;

&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;partial&lt;/span&gt; &lt;span class="s2"&gt;"footer.html"&lt;/span&gt; &lt;span class="err"&gt;.&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;
:wq
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Generate the web site and verify the results. The posts now have the date displayed in them. There’s a problem, though. The “about” page also has the date displayed.&lt;/p&gt;
&lt;p&gt;As usual, there are a couple of ways to make the date display only on posts. We could do an “if” statement like we did on the home page. Another way would be to create a separate template for posts.&lt;/p&gt;
&lt;p&gt;The “if” solution works for sites that have just a couple of content types. It aligns with the principle of “code for today,” too.&lt;/p&gt;
&lt;p&gt;Let’s assume, though, that we’ve made our site so complex that we feel we have to create a new template type. In Hugo-speak, we’re going to create a section template.&lt;/p&gt;
&lt;p&gt;Let’s restore the default single template before we forget.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ mkdir themes/zafta/layouts/post
$ vi themes/zafta/layouts/_default/single.html
&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;partial&lt;/span&gt; &lt;span class="s2"&gt;"header.html"&lt;/span&gt; &lt;span class="err"&gt;.&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;.Title&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;.Content&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;

&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;partial&lt;/span&gt; &lt;span class="s2"&gt;"footer.html"&lt;/span&gt; &lt;span class="err"&gt;.&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;
:wq
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we’ll update the post’s version of the single template. If you remember Hugo’s rules, the template engine will use this version over the default.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ vi themes/zafta/layouts/post/single.html
&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;partial&lt;/span&gt; &lt;span class="s2"&gt;"header.html"&lt;/span&gt; &lt;span class="err"&gt;.&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;.Title&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;.Date.Format&lt;/span&gt; &lt;span class="s2"&gt;"Mon, Jan 2, 2006"&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;.Content&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;

&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;partial&lt;/span&gt; &lt;span class="s2"&gt;"footer.html"&lt;/span&gt; &lt;span class="err"&gt;.&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;
:wq
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that we removed the date logic from the default template and put it in the post template. Generate the web site and verify the results. Posts have dates and the about page doesn’t.&lt;/p&gt;
&lt;h3 id="dont-repeat-yourself"&gt;Don’t Repeat Yourself&lt;a class="headerlink" href="#dont-repeat-yourself" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span class="caps"&gt;DRY&lt;/span&gt; is a good design goal and Hugo does a great job supporting it. Part of the art of a good template is knowing when to add a new template and when to update an existing one. While you’re figuring that out, accept that you’ll be doing some refactoring. Hugo makes that easy and fast, so it’s okay to delay splitting up a template.&lt;/p&gt;</content><category term="Blog"></category><category term="themes"></category><category term="hugo"></category></entry><entry><title>Not Convinced?</title><link href="https://dvesti.github.io/Pelican/2014/06/01/what-people-say-about-elegant/" rel="alternate"></link><published>2014-06-01T23:45:00+03:00</published><updated>2014-06-01T23:45:00+03:00</updated><author><name>Talha Mansoor</name></author><id>tag:dvesti.github.io,2014-06-01:/Pelican/2014/06/01/what-people-say-about-elegant/</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;Thanks for this amazing&amp;nbsp;project.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://github.com/Pelican-Elegant/elegant/issues/111#issuecomment-40943827"&gt;Sebastian Lauwers&lt;/a&gt; &lt;!-- yaspeller ignore --&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Let me start by saying your theme is awesome. I would like to use it for my&amp;nbsp;blog.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://github.com/Pelican-Elegant/elegant/issues/115#issue-30103539"&gt;bnice5000&lt;/a&gt; &lt;!-- yaspeller ignore --&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;i love the elegant&amp;nbsp;theme&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://github.com/Pelican-Elegant/elegant/issues/118#issue-32226954"&gt;7rack&lt;/a&gt; &lt;!-- yaspeller ignore --&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I tried your pelican theme elegant, it&amp;#8217;s awesome, clean and&amp;nbsp;elegant.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://github.com/Pelican-Elegant/elegant/pull/2#issue-19502670"&gt;悟道洞穴人&lt;/a&gt;&lt;/p&gt;
&lt;blockquote class="twitter-tweet" lang="en"&gt;&lt;p&gt;&lt;a href="https://twitter.com/talham_"&gt;@talham_ …&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;Thanks for this amazing&amp;nbsp;project.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://github.com/Pelican-Elegant/elegant/issues/111#issuecomment-40943827"&gt;Sebastian Lauwers&lt;/a&gt; &lt;!-- yaspeller ignore --&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Let me start by saying your theme is awesome. I would like to use it for my&amp;nbsp;blog.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://github.com/Pelican-Elegant/elegant/issues/115#issue-30103539"&gt;bnice5000&lt;/a&gt; &lt;!-- yaspeller ignore --&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;i love the elegant&amp;nbsp;theme&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://github.com/Pelican-Elegant/elegant/issues/118#issue-32226954"&gt;7rack&lt;/a&gt; &lt;!-- yaspeller ignore --&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I tried your pelican theme elegant, it&amp;#8217;s awesome, clean and&amp;nbsp;elegant.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://github.com/Pelican-Elegant/elegant/pull/2#issue-19502670"&gt;悟道洞穴人&lt;/a&gt;&lt;/p&gt;
&lt;blockquote class="twitter-tweet" lang="en"&gt;&lt;p&gt;&lt;a href="https://twitter.com/talham_"&gt;@talham_&lt;/a&gt; yours is the most innovative Pelican theme I&amp;#39;ve seen yet: &lt;a href="http://t.co/worboJFRuX"&gt;http://t.co/worboJFRuX&lt;/a&gt;. I love the search&amp;nbsp;feature.&lt;/p&gt;&amp;mdash; Tshepang Lekhonkhobe (@tshepang_dev) &lt;a href="https://twitter.com/tshepang_dev/statuses/384347807387095040"&gt;September 29, 2013&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;!-- yaspeller ignore --&gt;
&lt;script async src="//platform.twitter.com/widgets.js"&gt;&lt;/script&gt;&lt;/p&gt;
&lt;blockquote class="twitter-tweet" lang="en"&gt;&lt;p&gt;&lt;a href="https://twitter.com/talham_"&gt;@talham_&lt;/a&gt; Thanks for the Elegant theme. It is really elegant&amp;nbsp;:).&lt;/p&gt;&amp;mdash; Simon Cahuk (@cahuk) &lt;a href="https://twitter.com/cahuk/statuses/391533360830775296"&gt;October 19, 2013&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;!-- yaspeller ignore --&gt;
&lt;script async src="//platform.twitter.com/widgets.js"&gt;&lt;/script&gt;&lt;/p&gt;
&lt;blockquote class="twitter-tweet" lang="en"&gt;&lt;p&gt;&lt;a href="https://twitter.com/talham_"&gt;@talham_&lt;/a&gt; Hi, Elegant is a cool theme. Checking it&amp;nbsp;out.&lt;/p&gt;&amp;mdash; Fayad Fami (@fayadfami) &lt;a href="https://twitter.com/fayadfami/statuses/451420620241137664"&gt;April 2, 2014&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;!-- yaspeller ignore --&gt;
&lt;script async src="//platform.twitter.com/widgets.js"&gt;&lt;/script&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I&amp;#8217;m hugely impressed with your work on the theme; thank you for opening the
code for&amp;nbsp;it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;J&amp;nbsp;L&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Thank you very much for your reply and for your great Pelican theme&amp;nbsp;!)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Alexandr &lt;!-- yaspeller ignore --&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;pelican-elegant is the best pelican&amp;nbsp;theme&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;vim xiang &lt;!-- yaspeller ignore --&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;as I&amp;#8217;m just starting using Pelican, I have to say: great work on the elegant&amp;nbsp;theme.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Yanxin &lt;!-- yaspeller ignore --&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I am using the very nice elegant theme for pelican that you&amp;nbsp;wrote.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Brian Blais &lt;!-- yaspeller ignore --&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It is really&amp;nbsp;awesome!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Jinkun Lin &lt;!-- yaspeller ignore --&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;thanks for writing the &amp;#8220;elegant&amp;#8221;&amp;nbsp;theme&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://plus.google.com/u/0/+JedBrown/"&gt;Jed Brown&lt;/a&gt; &lt;!-- yaspeller ignore --&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hi Talha, thanks to your great theme, I made my homepage better :) I was once &lt;!-- yaspeller ignore --&gt;
trying to make a theme of my own. But never can i make such an awesome one
like&amp;nbsp;#Elegant#.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="http://oncrashreboot.com/elegant-best-pelican-theme-features#comment-1451253675"&gt;liangfu&lt;/a&gt; &lt;!-- yaspeller ignore --&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Thanks for your beautiful&amp;nbsp;work!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="http://oncrashreboot.com/elegant-best-pelican-theme-features#comment-1429880788"&gt;xiaoweiz&lt;/a&gt; &lt;!-- yaspeller ignore --&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Awesome&amp;nbsp;work&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="http://oncrashreboot.com/elegant-best-pelican-theme-features#comment-1364943390"&gt;Kevin Ndung&amp;#8217;u&lt;/a&gt; &lt;!-- yaspeller ignore --&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Nice&amp;nbsp;work!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="http://oncrashreboot.com/elegant-best-pelican-theme-features#comment-1340387082"&gt;Mohamed&lt;/a&gt; &lt;!-- yaspeller ignore --&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Thanks dude, an awesome&amp;nbsp;theme!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="http://oncrashreboot.com/elegant-best-pelican-theme-features#comment-1123824877"&gt;linuxabc&lt;/a&gt; &lt;!-- yaspeller ignore --&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Really cool&amp;nbsp;theme.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="http://oncrashreboot.com/elegant-best-pelican-theme-features#comment-1117848663"&gt;Calf&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This theme is fucking awesome. I will start using it =). Thank you &lt;!-- yaspeller ignore --&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="http://oncrashreboot.com/elegant-best-pelican-theme-features#comment-1116584083"&gt;Kolmar Kafran&lt;/a&gt; &lt;!-- yaspeller ignore --&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Thank you so much for this wonderful pelican&amp;nbsp;theme&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="http://oncrashreboot.com/elegant-best-pelican-theme-features#comment-1080851511"&gt;phdbreak&lt;/a&gt; &lt;!-- yaspeller ignore --&gt;&lt;/p&gt;</content><category term="101 — Quick Start"></category><category term="pelican-theme"></category><category term="testimonials"></category></entry><entry><title>How to set Shortcut Icons</title><link href="https://dvesti.github.io/Pelican/2014/04/24/how-to-set-shortcut-icons/" rel="alternate"></link><published>2014-04-24T16:42:00+03:00</published><updated>2014-04-24T16:42:00+03:00</updated><author><name>Talha Mansoor</name></author><id>tag:dvesti.github.io,2014-04-24:/Pelican/2014/04/24/how-to-set-shortcut-icons/</id><summary type="html">&lt;p&gt;Elegant lets you set Favicon, Opera Speed Dial icon, and shortcut icons for Apple iOS and Android&amp;nbsp;devices.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Elegant supports Favicon, Opera Speed Dial, and shortcut or launcher icons on
Apple iOS and Android devices. These are disabled by default to avoid
unnecessary &lt;span class="caps"&gt;HTTP&lt;/span&gt; requests on sites that do not use&amp;nbsp;them.&lt;/p&gt;
&lt;p&gt;To enable, set &lt;code&gt;USE_SHORTCUT_ICONS&lt;/code&gt; in your&amp;nbsp;configuration&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;USE_SHORTCUT_ICONS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Place your images in &lt;code&gt;content/theme/images&lt;/code&gt; directory, and define &lt;code&gt;STATIC_PATHS&lt;/code&gt;
variable in your&amp;nbsp;configuration&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;STATIC_PATHS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;theme/images&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;images&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Your images should have these&amp;nbsp;names,&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;apple-touch-icon-152x152.png&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;apple-touch-icon-144x144.png&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;apple-touch-icon-120x120.png&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;apple-touch-icon-114x114.png&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;apple-touch-icon-76x76.png&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;apple-touch-icon-72x72.png&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;apple-touch-icon-57x57.png&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;apple-touch-icon.png&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;favicon.ico&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I highly recommend you to use
&lt;a href="http://iconifier.net/"&gt;Iconifier.net&lt;/a&gt; &lt;!-- yaspeller ignore --&gt;
to generate the set of&amp;nbsp;images.&lt;/p&gt;</content><category term="Advanced Features"></category><category term="web-design"></category></entry><entry><title>Footer — Add License to your Site</title><link href="https://dvesti.github.io/Pelican/2014/04/22/add-license-to-your-site/" rel="alternate"></link><published>2014-04-22T16:23:00+03:00</published><updated>2014-04-22T16:23:00+03:00</updated><author><name>Talha Mansoor</name></author><id>tag:dvesti.github.io,2014-04-22:/Pelican/2014/04/22/add-license-to-your-site/</id><summary type="html">&lt;p&gt;You can display your preferred license in the&amp;nbsp;footer&lt;/p&gt;</summary><content type="html">&lt;p&gt;You can optionally define &lt;code&gt;SITE_LICENSE&lt;/code&gt; variable in Pelican configuration. It will appear in the footer of the&amp;nbsp;site.&lt;/p&gt;
&lt;p&gt;For&amp;nbsp;example,&lt;/p&gt;
&lt;!-- yaspeller ignore:start --&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;SITE_LICENSE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;Content licensed under &amp;lt;a rel=&amp;quot;license nofollow noopener noreferrer&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;    href=&amp;quot;http://creativecommons.org/licenses/by/4.0/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;    Creative Commons Attribution 4.0 International License&amp;lt;/a&amp;gt;.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;!-- yaspeller ignore:end --&gt;

&lt;p&gt;It appears&amp;nbsp;as&lt;/p&gt;
&lt;p&gt;&lt;img alt="Site License Demonstration" src="https://dvesti.github.io/Pelican/images/elegant-theme_license.png" /&gt;&lt;/p&gt;</content><category term="Components"></category><category term="nuances"></category></entry><entry><title>Footer — Add Site Subtitle</title><link href="https://dvesti.github.io/Pelican/2014/04/22/add-site-subtitle/" rel="alternate"></link><published>2014-04-22T16:23:00+03:00</published><updated>2014-04-22T16:23:00+03:00</updated><author><name>Talha Mansoor</name></author><id>tag:dvesti.github.io,2014-04-22:/Pelican/2014/04/22/add-site-subtitle/</id><summary type="html">&lt;p&gt;You can add and display a site&amp;nbsp;subtitle&lt;/p&gt;</summary><content type="html">&lt;p&gt;You can optionally define &lt;code&gt;SITE_SUBTITLE&lt;/code&gt; variable in Pelican configuration. It will appear in the footer of the&amp;nbsp;site.&lt;/p&gt;
&lt;p&gt;For&amp;nbsp;example,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;SITESUBTITLE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;You can, you should, and if you&amp;#39;re brave enough to start, you will.&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It appears in the footer&amp;nbsp;as&lt;/p&gt;
&lt;p&gt;&lt;img alt="Site subtitle" src="https://dvesti.github.io/Pelican/images/elegant-theme_site-subtitle.png" /&gt;&lt;/p&gt;</content><category term="Components"></category><category term="nuances"></category></entry><entry><title>Web Safe Fonts</title><link href="https://dvesti.github.io/Pelican/2014/04/22/web-safe-fonts/" rel="alternate"></link><published>2014-04-22T16:23:00+03:00</published><updated>2014-04-22T16:23:00+03:00</updated><author><name>Talha Mansoor</name></author><id>tag:dvesti.github.io,2014-04-22:/Pelican/2014/04/22/web-safe-fonts/</id><summary type="html">&lt;p&gt;Elegant uses commonly available typefaces in every style rule. It has a list of
closely matching fonts in the fallback&amp;nbsp;list.&lt;/p&gt;
&lt;p&gt;For examples
Baskerville &lt;!-- yaspeller ignore --&gt;
is the
first choice for headings. But if reader does not have
Baskerville &lt;!-- yaspeller ignore --&gt;
installed,
Garamond &lt;!-- yaspeller ignore --&gt;
will be used. If that too fails then Georgia will be …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Elegant uses commonly available typefaces in every style rule. It has a list of
closely matching fonts in the fallback&amp;nbsp;list.&lt;/p&gt;
&lt;p&gt;For examples
Baskerville &lt;!-- yaspeller ignore --&gt;
is the
first choice for headings. But if reader does not have
Baskerville &lt;!-- yaspeller ignore --&gt;
installed,
Garamond &lt;!-- yaspeller ignore --&gt;
will be used. If that too fails then Georgia will be&amp;nbsp;used.&lt;/p&gt;</content><category term="Components"></category><category term="web-design"></category></entry><entry><title>Comments — Enable Disqus</title><link href="https://dvesti.github.io/Pelican/2014/04/21/enable-disqus-comments/" rel="alternate"></link><published>2014-04-21T16:39:00+03:00</published><updated>2014-04-21T16:39:00+03:00</updated><author><name>Talha Mansoor</name></author><id>tag:dvesti.github.io,2014-04-21:/Pelican/2014/04/21/enable-disqus-comments/</id><summary type="html">&lt;p&gt;Elegant offers Disqus comments out of the box with few unique&amp;nbsp;features&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;svg xmlns="http://www.w3.org/2000/svg" aria-label="Disqus" role="img" viewBox="0 0 512 512" width="150" height="150" style="float:left;"&gt;&lt;rect width="512" height="512" rx="15%" fill="#fff"/&gt;&lt;path fill="#2e9fff" d="M83 387l26-65a159 159 0 1 1 42 56zm168-52q90-6 90-81t-89-80h-61v161zm2-39h-18v-82h18q43 2 43 40t-43 42"/&gt;&lt;/svg&gt;&lt;/p&gt;
&lt;p&gt;You can use Disqus for comments. You have to set &lt;code&gt;DISQUS_SITENAME&lt;/code&gt; to Disqus
site name identifier in configuration to enable&amp;nbsp;comments.&lt;/p&gt;
&lt;p&gt;That&amp;#8217;s it. Elegant will take care of the&amp;nbsp;rest.&lt;/p&gt;
&lt;p&gt;You can see a working example of Disqus comments in this&amp;nbsp;article.&lt;/p&gt;
&lt;h2 id="show-disqus-comments-by-default"&gt;Show Disqus comments by default&lt;a class="headerlink" href="#show-disqus-comments-by-default" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Just set &lt;code&gt;DISQUS_SITENAME&lt;/code&gt; variable.&lt;/p&gt;
&lt;h2 id="hide-disqus-comments-by-default"&gt;Hide Disqus comments by default&lt;a class="headerlink" href="#hide-disqus-comments-by-default" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Unset &lt;code&gt;DISQUS_SITENAME&lt;/code&gt; variable.&lt;/p&gt;
&lt;p&gt;This is the default&amp;nbsp;setting.&lt;/p&gt;
&lt;h2 id="hide-disqus-comments-by-default-show-on-selected"&gt;Hide Disqus comments by default. Show on Selected&lt;a class="headerlink" href="#hide-disqus-comments-by-default-show-on-selected" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Set &lt;code&gt;DISQUS_SITENAME&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Set &lt;code&gt;DISQUS_FILTER&lt;/code&gt; to &lt;code&gt;True&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This will hide Disqus form on all&amp;nbsp;pages.&lt;/p&gt;
&lt;p&gt;Now to show Disqus form on selected posts, in article metadata&amp;nbsp;set&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;disqus_filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;off&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="show-disqus-comments-by-default-hide-on-selected"&gt;Show Disqus comments by default. Hide on Selected&lt;a class="headerlink" href="#show-disqus-comments-by-default-hide-on-selected" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Set &lt;code&gt;DISQUS_SITENAME&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Remove &lt;code&gt;DISQUS_FILTER&lt;/code&gt; or set it to &lt;code&gt;False&lt;/code&gt; which is its default&amp;nbsp;value&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This will hide Disqus form on all&amp;nbsp;pages.&lt;/p&gt;
&lt;p&gt;Now to hide Disqus form on selected posts, in article metadata&amp;nbsp;set&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;disqus_filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;on&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="Connecting With Your Readers"></category><category term="interaction"></category></entry><entry><title>Comments — Invite Visitors To Comment</title><link href="https://dvesti.github.io/Pelican/2014/04/21/invite-visitors-comment/" rel="alternate"></link><published>2014-04-21T16:39:00+03:00</published><updated>2014-04-21T16:39:00+03:00</updated><author><name>Talha Mansoor</name></author><id>tag:dvesti.github.io,2014-04-21:/Pelican/2014/04/21/invite-visitors-comment/</id><summary type="html">&lt;p&gt;Instead of just throwing in comments form at the end of every article, Elegant
offers you a way to write introductory text that would appear right before&amp;nbsp;comments.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Introductory text to the comments" src="https://dvesti.github.io/Pelican/images/elegant-theme_comments-introduction.png" /&gt;&lt;/p&gt;
&lt;p&gt;Set your message to &lt;code&gt;comments_intro&lt;/code&gt; in the article metadata. You may also
define &lt;code&gt;COMMENTS_INTRO&lt;/code&gt; in Pelican&amp;nbsp;configuration.&lt;/p&gt;
&lt;p&gt;Write whatever you think is …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Instead of just throwing in comments form at the end of every article, Elegant
offers you a way to write introductory text that would appear right before&amp;nbsp;comments.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Introductory text to the comments" src="https://dvesti.github.io/Pelican/images/elegant-theme_comments-introduction.png" /&gt;&lt;/p&gt;
&lt;p&gt;Set your message to &lt;code&gt;comments_intro&lt;/code&gt; in the article metadata. You may also
define &lt;code&gt;COMMENTS_INTRO&lt;/code&gt; in Pelican&amp;nbsp;configuration.&lt;/p&gt;
&lt;p&gt;Write whatever you think is appropriate to invite the visitor to comment. Be
creative! You can even put a link to your twitter account or newsletter&amp;nbsp;there.&lt;/p&gt;
&lt;p&gt;Elegant first looks for &lt;code&gt;comments_intro&lt;/code&gt; in article metadata, then for
&lt;code&gt;COMMENTS_INTRO&lt;/code&gt; in configuration. If it finds neither then no message is&amp;nbsp;displayed.&lt;/p&gt;</content><category term="Connecting With Your Readers"></category><category term="interaction"></category></entry><entry><title>Displaying a Series Information for Your Multipart Articles</title><link href="https://dvesti.github.io/Pelican/2014/04/20/how-to-use-multi-part-plugin/" rel="alternate"></link><published>2014-04-20T18:18:00+03:00</published><updated>2014-04-20T18:18:00+03:00</updated><author><name>Talha Mansoor</name></author><id>tag:dvesti.github.io,2014-04-20:/Pelican/2014/04/20/how-to-use-multi-part-plugin/</id><summary type="html">&lt;p&gt;Elegant can be configured to provide a series section on the right sidebar. Only visible in articles that are labelled as part of a series, this indicator allows navigation between the articles in the&amp;nbsp;series.&lt;/p&gt;</summary><content type="html">&lt;div class="admonition important"&gt;
&lt;p class="admonition-title"&gt;Deprecation&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;multi-part&lt;/code&gt; plugin has been deprecated in favor of the &lt;code&gt;series&lt;/code&gt;
plugin. For an up-to-date article on using the &lt;code&gt;series&lt;/code&gt; plugin, &lt;a href="https://dvesti.github.io/Pelican/2019/12/07/how-to-use-series-plugin/"&gt;go
here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;When writing articles about certain topics, it is advantageous to split a single article into
multiple articles. Without splitting the article up, the author would be forced to cram all
of the content into a denser and much longer article, reducing its effectiveness and
readability in the process. Splitting the article allows the author to focus on a specific
concept of the larger article, thereby increasing the overall appearance and&amp;nbsp;readability.&lt;/p&gt;
&lt;p&gt;Elegant provides the ability to present a view of the articles in the series in the middle of
the right sidebar. This section starts with the name of the series, followed by one bullet
point for each of the articles in the series. The text for the article is prefaced with
&amp;#8220;Part N: &amp;#8221; (where N is the index of the article) and then the title for the article. To make
navigation easier, the current article is presented in italics, with the other articles being
presented as links to their respective&amp;nbsp;articles.&lt;/p&gt;
&lt;p&gt;Here is an example of what the Series section may look&amp;nbsp;like:&lt;/p&gt;
&lt;p&gt;&lt;img alt="series example in the sidebar" src="https://dvesti.github.io/Pelican/images/elegant-theme_multi-part-sidebar.png" /&gt;&lt;/p&gt;
&lt;h2 id="configuration"&gt;Configuration&lt;a class="headerlink" href="#configuration" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To enable the reading time for your articles, you need to add &lt;code&gt;multi-part&lt;/code&gt; to the &lt;code&gt;PLUGINS&lt;/code&gt;
configuration variable in your Pelican&amp;nbsp;configuration.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;PLUGINS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;multi-part&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In addition, the &lt;code&gt;SERIES_TITLE&lt;/code&gt; configuration variable can be set to specify the title used for
the Series section, regardless of the&amp;nbsp;series.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;SERIES_TITLE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;More In This Series&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="article-metadata"&gt;Article Metadata&lt;a class="headerlink" href="#article-metadata" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Once the configuration for Series is enabled in the configuration file, using this feature for
a given set of articles requires that the article contains the &lt;code&gt;series&lt;/code&gt;
&lt;a href="https://dvesti.github.io/Pelican/2019/07/03/metadata/"&gt;metadata&lt;/a&gt; field&amp;nbsp;value.&lt;/p&gt;
&lt;p&gt;The text assigned to the &lt;code&gt;series&lt;/code&gt; metadata field is the title of the series. When the page is
created, Pelican provides Elegant with a list of all pages that have the same value for the
&lt;code&gt;series&lt;/code&gt; metadata field. By default, Elegant sorts that list according to the publish date for
each article. The titles for those pages is then displayed in sorted order, with the current
page presented in &lt;em&gt;italics&lt;/em&gt; and the other pages presented as a link to those&amp;nbsp;pages.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;series: Maximizing Elegant
series_index: 2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If there is a reason to override the ordering of the articles, the &lt;code&gt;series_index&lt;/code&gt; metadata
field is required. It is recommended that you use the part number you want displayed for the
article as the value to assign to the&amp;nbsp;field.&lt;/p&gt;</content><category term="Supported Plugins"></category><category term="pelican-plugin"></category><category term="navigation"></category><category term="web-design"></category><category term="deprecated"></category></entry><entry><title>Search Engine and Social Media Optimization</title><link href="https://dvesti.github.io/Pelican/2014/04/20/search-engine-and-social-media-optimization/" rel="alternate"></link><published>2014-04-20T16:31:00+03:00</published><updated>2014-04-20T16:31:00+03:00</updated><author><name>Talha Mansoor</name></author><id>tag:dvesti.github.io,2014-04-20:/Pelican/2014/04/20/search-engine-and-social-media-optimization/</id><summary type="html"></summary><content type="html">
&lt;p&gt;Search Engine Optimization(&lt;span class="caps"&gt;SEO&lt;/span&gt;) is a moving target which is often
misunderstood. Rise of social media has changed the traditional &lt;span class="caps"&gt;SEO&lt;/span&gt;
techniques. Changes in search algorithms has made several &lt;span class="caps"&gt;SEO&lt;/span&gt; techniques obsolete.&lt;/p&gt;
&lt;p&gt;Elegant does its best to leverage all available search and social media tags to
give your site higher ranking in search results and optimize it for sharing via
social media.&lt;/p&gt;
&lt;h2 id="social-media-optimization-smo"&gt;Social Media Optimization (&lt;span class="caps"&gt;SMO&lt;/span&gt;)&lt;a class="headerlink" href="#social-media-optimization-smo" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Inspired by the post &lt;a href="https://medium.com/on-startups/f15264e5d790"&gt;“What is the New &lt;span class="caps"&gt;SEO&lt;/span&gt;? Pubcon 2013 &lt;!-- yaspeller ignore --&gt;
Takeaways”&lt;/a&gt;, I looked into the
tags that social media sites use. They can be broadly divided into two
categories, &lt;a href="http://ogp.me/"&gt;Open Graph protocol&lt;/a&gt; and &lt;a href="https://dev.twitter.com/docs/cards"&gt;Twitter
Cards&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="open-graph-protocol"&gt;Open Graph protocol&lt;a class="headerlink" href="#open-graph-protocol" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Elegant uses following tags,&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;og:url&lt;/code&gt; is set to article &lt;span class="caps"&gt;URL&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;og:type&lt;/code&gt; is set to “article”&lt;/li&gt;
&lt;li&gt;&lt;code&gt;og:title&lt;/code&gt; is set to article tile and optional subtitle&lt;/li&gt;
&lt;li&gt;&lt;code&gt;og:site_name&lt;/code&gt; is set to &lt;code&gt;SITENAME&lt;/code&gt; from your Pelican configuration&lt;/li&gt;
&lt;li&gt;&lt;code&gt;og:description&lt;/code&gt; is set to article summary&lt;/li&gt;
&lt;li&gt;&lt;code&gt;og:article:author&lt;/code&gt; is set to article author&lt;/li&gt;
&lt;li&gt;&lt;code&gt;og:article:published_time&lt;/code&gt; is set to article date&lt;/li&gt;
&lt;li&gt;&lt;code&gt;og:image&lt;/code&gt; is an optional tag. It is set to value of &lt;code&gt;featured_image&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;featured_image&lt;/code&gt; should be the complete &lt;span class="caps"&gt;URL&lt;/span&gt; of an image. This image is
displayed with the article link on most social sites.&lt;/p&gt;
&lt;p&gt;Elegant looks for it first in the article metadata, here is metadata for an
example reST formatted file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nc"&gt;:featured_image:&lt;/span&gt; http://oncrashreboot.com/images/article-1-image.jpg
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then it looks for &lt;code&gt;FEATURED_IMAGE&lt;/code&gt; in Pelican configuration. If it finds
neither, &lt;code&gt;og:image&lt;/code&gt; is not used.&lt;/p&gt;
&lt;p&gt;If you want to use &lt;code&gt;og:image&lt;/code&gt; tag then make sure you define &lt;code&gt;featured_image&lt;/code&gt; in
your article metadata. You should also define &lt;code&gt;FEATURED_IMAGE&lt;/code&gt; in your
Pelican configuration to be used as a generic image in case an article does not
have &lt;code&gt;featured_image&lt;/code&gt; defined.&lt;/p&gt;
&lt;h3 id="twitter-cards"&gt;Twitter Cards&lt;a class="headerlink" href="#twitter-cards" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Elegant uses following tags,&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;twitter:card&lt;/code&gt; is set to “summary”&lt;/li&gt;
&lt;li&gt;&lt;code&gt;twitter:title&lt;/code&gt; is set to article title and optional subtitle&lt;/li&gt;
&lt;li&gt;&lt;code&gt;twitter:creator&lt;/code&gt; is set to &lt;code&gt;TWITTER_USERNAME&lt;/code&gt; if defined in Pelican configuration&lt;/li&gt;
&lt;li&gt;&lt;code&gt;twitter:description&lt;/code&gt; is set to article summary&lt;/li&gt;
&lt;li&gt;&lt;code&gt;twitter:image&lt;/code&gt; is set to &lt;code&gt;featured_image&lt;/code&gt;. The &lt;code&gt;featured_image&lt;/code&gt; discussion
   above is also applicable in this case&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Please note you need to be
&lt;a href="https://dev.twitter.com/docs/cards/validation/validator"&gt;approved&lt;/a&gt; by Twitter
before you can start using Twitter Cards.&lt;/p&gt;
&lt;h2 id="search-engine-optimization-seo"&gt;Search Engine Optimization (&lt;span class="caps"&gt;SEO&lt;/span&gt;)&lt;a class="headerlink" href="#search-engine-optimization-seo" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Elegant puts tags and category of your article in keywords tag &lt;code&gt;&amp;lt;meta name="keywords"&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can add your own keywords by defining &lt;code&gt;keywords&lt;/code&gt; in article metadata.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;SITE_DESCRIPTION&lt;/code&gt; and article &lt;code&gt;summary&lt;/code&gt; is used in description tag &lt;code&gt;&amp;lt;meta name="description"&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Your &lt;code&gt;AUTHOR&lt;/code&gt; name is used in copyright tag &lt;code&gt;&amp;lt;meta name="copyright"&lt;/code&gt;.&lt;/p&gt;</content><category term="Analytics, SEO and SMO"></category><category term="crawler"></category><category term="social-media"></category><category term="web-analytics"></category></entry><entry><title>How does modified metadata works</title><link href="https://dvesti.github.io/Pelican/2014/04/19/how-does-modified-metadata-works/" rel="alternate"></link><published>2014-04-19T14:52:00+03:00</published><updated>2014-04-19T14:52:00+03:00</updated><author><name>Talha Mansoor</name></author><id>tag:dvesti.github.io,2014-04-19:/Pelican/2014/04/19/how-does-modified-metadata-works/</id><summary type="html">&lt;p&gt;Use modified metadata to show the date at which you last updated the&amp;nbsp;article&lt;/p&gt;</summary><content type="html">&lt;p&gt;You need to update your articles time and again. Sometimes it makes sense to
display the date when you updated the&amp;nbsp;article.&lt;/p&gt;
&lt;p&gt;Pelican release &lt;a href="http://docs.getpelican.com/en/stable/changelog.html#id9"&gt;v3.4.0&lt;/a&gt; has a new
&lt;a href="https://github.com/getpelican/pelican/pull/1148"&gt; metadata field &lt;code&gt;modified&lt;/code&gt;&lt;/a&gt;. Type of
its value is &lt;code&gt;datetime&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can show the last updated
date of the article by defining &lt;code&gt;modified&lt;/code&gt; in your article&amp;nbsp;metadata.&lt;/p&gt;
&lt;p&gt;This is how it is displayed in the side&amp;nbsp;bar,&lt;/p&gt;
&lt;p&gt;&lt;img alt="Modified Date" src="https://dvesti.github.io/Pelican/images/elegant-theme_last-modified.png" /&gt;&lt;/p&gt;
&lt;p&gt;Depending on your
&lt;a href="http://docs.getpelican.com/en/latest/settings.html#basic-settings"&gt;&lt;code&gt;DATE_FORMATS&lt;/code&gt;&lt;/a&gt;
setting you can put modified date in your reST formatted file&amp;nbsp;as&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nc"&gt;:modified:&lt;/span&gt; 2014-01-22 14:30
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Elegant will process it and display the last updated as &amp;#8220;Jan 22,&amp;nbsp;2014&amp;#8221;.&lt;/p&gt;
&lt;div class="admonition important"&gt;
&lt;p class="admonition-title"&gt;Condition to Display Last&amp;nbsp;Updated&lt;/p&gt;
&lt;p&gt;Last Updated is only displayed if the difference between &lt;code&gt;article.modifed&lt;/code&gt;
and &lt;code&gt;article.date&lt;/code&gt;is more than or equal to a&amp;nbsp;day.&lt;/p&gt;
&lt;p&gt;This means if you modify and article the same day you add it, then Last
Updated will not be&amp;nbsp;displayed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="admonition-title"&gt;Tip&lt;/p&gt;
&lt;p&gt;You may want to enable
&lt;a href="https://github.com/getpelican/pelican-plugins/tree/master/filetime_from_git"&gt;&lt;code&gt;filetime_from_git&lt;/code&gt;&lt;/a&gt;
Pelican plugin to auto fill the modified field for your Git commit&amp;nbsp;history.&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id="deprecated"&gt;Deprecated&lt;a class="headerlink" href="#deprecated" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;div class="admonition danger"&gt;
&lt;p class="admonition-title"&gt;Warning: Legacy&amp;nbsp;Variable&lt;/p&gt;
&lt;p&gt;Pelican versions prior to 3.4 does not have &lt;code&gt;modified&lt;/code&gt; metadata in which case type of its
value is&amp;nbsp;string.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;If you are using old version of Pelican, i.e 3.3 or less, make
sure you assign it a value exactly the way you want it to appear.
Whatever you type, it will appear as it&amp;nbsp;is.&lt;/p&gt;
&lt;p&gt;Taking the
example from above, metadata in your reST formatted file should&amp;nbsp;be,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nc"&gt;:modified:&lt;/span&gt; Jan 22, 2014
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can also assign raw &lt;span class="caps"&gt;HTML&lt;/span&gt; to it. For&amp;nbsp;example,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;:modified: &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://github.com/talha131/onCrashReboot/&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Revision History&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Aug 29, 2013&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;But I do &lt;strong&gt;not&lt;/strong&gt; recommend it because it will break on newer versions of
Pelican. In fact, you should ditch Pelican 3.3 or less and move to a higher
version if you require &lt;code&gt;modified&lt;/code&gt; metadata.&lt;/p&gt;</content><category term="Advanced Features"></category><category term="web-design"></category><category term="metadata"></category><category term="date"></category></entry><entry><title>Add Social Sharing Links</title><link href="https://dvesti.github.io/Pelican/2014/03/24/how-to-use-social-sharing-plugin/" rel="alternate"></link><published>2014-03-24T20:14:00+02:00</published><updated>2014-03-24T20:14:00+02:00</updated><author><name>Talha Mansoor</name></author><id>tag:dvesti.github.io,2014-03-24:/Pelican/2014/03/24/how-to-use-social-sharing-plugin/</id><summary type="html">&lt;p&gt;Elegant can be configured to provide Social Media sharing links for each of your articles. These links provide a simple way to share on various Social Media platforms while endeavoring to not track users in the&amp;nbsp;process.&lt;/p&gt;</summary><content type="html">&lt;p&gt;No blog is complete without buttons or links that invites a reader to share your articles
with the friend and colleagues on various social media sites. The problem with these buttons
on many sites is that the buttons are used by big companies to track your web usage, sharing
that information with various companies. (For a more in-depth talk on this subject, please
read the &lt;a href="#Online-Trackers-and-Links"&gt;Online Trackers and Links&lt;/a&gt; section at the end of this&amp;nbsp;page.)&lt;/p&gt;
&lt;p&gt;Elegant provides a simple solution to this, using the &lt;code&gt;Share Post&lt;/code&gt; plugin from pelican to
provide simple and plain old-school URLs to provide the social media links. These have the
benefit of not having any ability to be used for online&amp;nbsp;tracking.&lt;/p&gt;
&lt;p&gt;Here is an example of what the Social Media Sharing section may look&amp;nbsp;like:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Share Post plugin in Elegant" src="https://dvesti.github.io/Pelican/images/elegant-theme-share-post-plugin.png" /&gt;&lt;/p&gt;
&lt;h2 id="configuration"&gt;Configuration&lt;a class="headerlink" href="#configuration" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To enable the Social Media Sharing links for your articles, add &lt;code&gt;share_post&lt;/code&gt; to the &lt;code&gt;PLUGINS&lt;/code&gt;
configuration variable in your Pelican&amp;nbsp;configuration.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;PLUGINS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;share_post&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Optionally, customize the list of networks where the article can be shared using &lt;code&gt;SHARE_LINKS&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;SHARE_LINKS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;twitter&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Twitter&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;facebook&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Facebook&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;email&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Email&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The first item in each pair refers to a network recognized by &lt;code&gt;share_post&lt;/code&gt;. Currently the list of supported networks includes &lt;code&gt;twitter&lt;/code&gt;, &lt;code&gt;facebook&lt;/code&gt;, &lt;code&gt;email&lt;/code&gt;, &lt;code&gt;hacker-news&lt;/code&gt;, &lt;code&gt;linkedin&lt;/code&gt; and &lt;code&gt;reddit&lt;/code&gt;. The second item in each pair is the text displayed for the link on the&amp;nbsp;page.&lt;/p&gt;
&lt;p&gt;The sharing links are displayed in the order of &lt;code&gt;SHARE_LINKS&lt;/code&gt;, therefore this variable can also be used to customize the link&amp;nbsp;order.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://github.com/getpelican/pelican-plugins/blob/master/share_post/README.md"&gt;share_post plugin&lt;/a&gt; requires the Python &lt;code&gt;beautifulsoup4&lt;/code&gt; package to be&amp;nbsp;installed.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The default text used to lead into the Social Media Sharing links is &amp;#8220;Share On:&amp;#8221;. This can
be overridden by defining the &lt;code&gt;SHARE_POST_INTRO&lt;/code&gt; configuration variable with the text you
want to replace&amp;nbsp;it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;SHARE_POST_INTRO&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Share me with your friends on&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="article-metadata"&gt;Article Metadata&lt;a class="headerlink" href="#article-metadata" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Once the configuration for Sharing Media Links is enabled in the configuration file, using
this feature to provide links for your readers to share your articles on social media is&amp;nbsp;completed.&lt;/p&gt;
&lt;p&gt;The only effect any &lt;a href="https://dvesti.github.io/Pelican/2019/07/03/metadata/"&gt;metadata&lt;/a&gt; field will have
on Sharing Media links is to change the text to lead into the Social Media Sharing links.
As documented above, the &lt;code&gt;SHARE_POST_INTRO&lt;/code&gt; can be used to provide an alternate lead in text
for the Social Media Sharing links. This text can be further overridden on an
article-by-article basis by specifying the &lt;code&gt;share_post_intro&lt;/code&gt; metadata field value for an
article as&amp;nbsp;follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;share_post_intro&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Share this article on Elegant with&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="online-trackers-and-links"&gt;Online Trackers and Links&lt;a class="headerlink" href="#online-trackers-and-links" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There are a plethora of social sharing widgets available online. The unfortunate problem with
most of the widgets is that they are used to track users and their browsing habits.
&lt;a href="http://techliberation.com/2011/05/20/privacy-solutions-how-to-block-facebooks-like-button-and-other-social-widgets/"&gt;Technology watchdogs&lt;/a&gt;
have been
&lt;a href="http://online.wsj.com/news/articles/SB10001424052748704281504576329441432995616#printMode"&gt;raising a hue and cry&lt;/a&gt;
since as
&lt;a href="https://www.eff.org/deeplinks/2009/09/online-trackers-and-social-networks"&gt;early as 2009&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Developers have responded to these concerned by coming up with
&lt;a href="http://fixtracking.com/"&gt;different ways&lt;/a&gt; to cope with this issue. The solutions range from
custom &lt;a href="https://disconnect.me/"&gt;browser plugins&lt;/a&gt; to completely totally
&lt;a href="http://panzi.github.io/SocialSharePrivacy/"&gt;reinventing share widgets&lt;/a&gt; for a given browser.
However, it is unreasonable to expect that each of your visitors uses a privacy plugin.
Depending on your setup, your computer&amp;#8217;s browser or mobile phone&amp;#8217;s browser may not let your
users install any kind of&amp;nbsp;plugin.&lt;/p&gt;
&lt;p&gt;Reinventing a social widget that respects the user&amp;#8217;s concerns will certainly requiring the more
educated readers about it. For other readers, the &amp;#8220;new&amp;#8221; or &amp;#8220;changed&amp;#8221; social widget will seem
alien to them, and will make them hesitant to use it. In turn, that will almost definitely
result in a decrease in the number of shares of your articles on social&amp;nbsp;networks.&lt;/p&gt;
&lt;p&gt;Pelican (and therefore Elegant) uses a simple approach to work around this issue. By using
plain URLs to provide it&amp;#8217;s ability to share with social media sites, the entire widget issue
is&amp;nbsp;avoided.&lt;/p&gt;</content><category term="Supported Plugins"></category><category term="pelican-theme"></category><category term="pelican-plugin"></category><category term="social-media"></category></entry><entry><title>How To Improve the Download Time For Your Pages</title><link href="https://dvesti.github.io/Pelican/2014/03/24/avoid-unnecessary-http-requests/" rel="alternate"></link><published>2014-03-24T14:09:00+02:00</published><updated>2014-03-24T14:09:00+02:00</updated><author><name>Talha Mansoor</name></author><id>tag:dvesti.github.io,2014-03-24:/Pelican/2014/03/24/avoid-unnecessary-http-requests/</id><summary type="html">&lt;p&gt;Pelican can be configured to compile multiple assets for your website into one single asset. When these assets are combined together, they are reduce to only their necessary components, and can be fetched by the browser in a single&amp;nbsp;call.&lt;/p&gt;</summary><content type="html">&lt;p&gt;When a webpage is created, webpage authors and static page generators will often grab
low-level asset files from a trusted location. Between Pelican and Elegant, these files will
often number between 8 and 15 &lt;span class="caps"&gt;CSS&lt;/span&gt; or JavaScript files. While these files are
essential to the proper look and feel of a properly designed website, the overhead of this
content being in separate files is that separate requests are made for each of them to the&amp;nbsp;server.&lt;/p&gt;
&lt;div class="admonition important"&gt;
&lt;p class="admonition-title"&gt;Important&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Elegant comes with a compressed and concatenated &lt;span class="caps"&gt;CSS&lt;/span&gt; stylesheet&lt;/strong&gt;, so that only one request is made to fetch the &lt;span class="caps"&gt;CSS&lt;/span&gt; stylesheets. &lt;strong&gt;Following instruction is redundant for most&amp;nbsp;users.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;But if you have decided to &lt;a href="https://dvesti.github.io/Pelican/2019/07/03/customize-style/"&gt;customize the theme using &lt;code&gt;custom.css&lt;/code&gt;&lt;/a&gt; then follow these&amp;nbsp;instruction.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Pelican provides a plugin that takes the various &lt;span class="caps"&gt;CSS&lt;/span&gt; and JavaScript files and compiles each
group of them into a single file. Not only does this process reduce the number of calls to
retrieve files from the server, but it minifies or reduces the overall size of
those files as&amp;nbsp;well.&lt;/p&gt;
&lt;h2 id="configuration"&gt;Configuration&lt;a class="headerlink" href="#configuration" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To enable Asset Management for your website, add &lt;code&gt;assets&lt;/code&gt; to the &lt;code&gt;PLUGINS&lt;/code&gt; configuration
variable in your Pelican&amp;nbsp;configuration.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;PLUGINS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;assets&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://github.com/getpelican/pelican-plugins/blob/master/assets/Readme.rst"&gt;assets plugin&lt;/a&gt; requires the Python &lt;code&gt;webassets&lt;/code&gt; and &lt;code&gt;cssmin&lt;/code&gt; packages to be&amp;nbsp;installed.&lt;/p&gt;
&lt;/div&gt;</content><category term="Supported Plugins"></category><category term="pelican-theme"></category><category term="pelican-plugin"></category><category term="page-speed"></category></entry><entry><title>How to Customize Elegant</title><link href="https://dvesti.github.io/Pelican/2014/03/24/how-to-customize-elegant/" rel="alternate"></link><published>2014-03-24T14:05:00+02:00</published><updated>2014-03-24T14:05:00+02:00</updated><author><name>Talha Mansoor</name></author><id>tag:dvesti.github.io,2014-03-24:/Pelican/2014/03/24/how-to-customize-elegant/</id><summary type="html">&lt;p&gt;You can customize every aspect of Elegant without touching the source&amp;nbsp;code&lt;/p&gt;</summary><content type="html">&lt;div class="toc"&gt;
&lt;ul&gt;&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;You can change Elegant&amp;#8217;s look, color palette, font, size, and even labels used
for widgets, sections and&amp;nbsp;plugins.&lt;/p&gt;
&lt;p&gt;Elegant is best maintained when you treat it as a separate resource in your
project. Do not edit template files, JavaScript code and style sheets. This
practice will make upgrading Elegant fuss free&amp;nbsp;process.&lt;/p&gt;
&lt;p&gt;Instead see the guides in &lt;a href="categories#extra-customization-ref"&gt;&amp;#8220;Extra Customization&amp;#8221; category&lt;/a&gt;.&lt;/p&gt;</content><category term="Advanced Features"></category><category term="config"></category></entry><entry><title>Add A Table Of Contents to Your Articles</title><link href="https://dvesti.github.io/Pelican/2014/03/18/how-elegant-displays-table-of-contents/" rel="alternate"></link><published>2014-03-18T11:03:00+02:00</published><updated>2014-03-18T11:03:00+02:00</updated><author><name>Talha Mansoor</name></author><id>tag:dvesti.github.io,2014-03-18:/Pelican/2014/03/18/how-elegant-displays-table-of-contents/</id><summary type="html">&lt;p&gt;Elegant can be configured to provide a non-intrusive Table of Contents, giving a cleaner reading experience for the&amp;nbsp;user.&lt;/p&gt;</summary><content type="html">
&lt;p&gt;The key concept driving Elegant’s design is to provide a reading experience that
is clean with minimal distractions. From that point of view, providing a table of
contents does not provide any additional information, but only exists to help guide the
reader through the article.&lt;/p&gt;
&lt;p&gt;Therefore, Elegant places the table of contents on the left side
of the page with a relatively smaller font. This enables the table to guide the reader without
grabbing the focus of the reader and distracting them.&lt;/p&gt;
&lt;h2 id="plugin-configuration"&gt;Plugin Configuration&lt;a class="headerlink" href="#plugin-configuration" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Enabling the Elegant’ display of the table of contents is a two-step process.&lt;/p&gt;
&lt;p&gt;In the first step,
use the markup languages to provide table of contents.&lt;/p&gt;
&lt;p&gt;Second step is to take the generated table of contents and display it
on the left side of the article.&lt;/p&gt;
&lt;p&gt;If both steps are not completed,
the table of contents will not be displayed on the left side of the article.&lt;/p&gt;
&lt;p&gt;For the second step, you need to enable the &lt;code&gt;extract_toc&lt;/code&gt; plugin in
your pelican configuration.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;PLUGINS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'extract_toc'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="configuring-markdown"&gt;Configuring Markdown&lt;a class="headerlink" href="#configuring-markdown" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You need to enable the &lt;code&gt;toc&lt;/code&gt; extension for Markdown in your Pelican configuration.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;MARKDOWN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="s1"&gt;'extension_configs'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;'markdown.extensions.toc'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now to generate a table of contents for you article, add the &lt;code&gt;[TOC]&lt;/code&gt; markdown tag to your document.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Title: My sample title
Date: 2014-12-03
Category: Examples

[TOC]

&lt;span class="gu"&gt;## This is my first heading&lt;/span&gt;

This is the content of my sample blog post.

&lt;span class="gu"&gt;## This my second heading&lt;/span&gt;

I will end my example here.
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="other-options"&gt;Other Options&lt;a class="headerlink" href="#other-options" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;For other options available for the Markdown Table of Contents extension, refer to the
&lt;a href="https://python-markdown.github.io/extensions/toc/"&gt;Python - Markdown - Table of Contents&lt;/a&gt; page.&lt;/p&gt;
&lt;h3 id="debugging"&gt;Debugging&lt;a class="headerlink" href="#debugging" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Verify that your Markdown file has &lt;code&gt;[TOC]&lt;/code&gt; tag&lt;/li&gt;
&lt;li&gt;Verify that the
   &lt;code&gt;MARKDOWN&lt;/code&gt; configuration variable is set properly.&lt;/li&gt;
&lt;li&gt;Verify that the &lt;code&gt;PLUGINS&lt;/code&gt; configuration variable is
   set properly.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="configuring-restructuredtext-format"&gt;Configuring reStructuredText Format&lt;a class="headerlink" href="#configuring-restructuredtext-format" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;reStructuredText format has the
&lt;a href="http://docutils.sourceforge.net/docs/ref/rst/directives.html#table-of-contents"&gt;&lt;code&gt;contents&lt;/code&gt; directive&lt;/a&gt;
that generates a table of contents in the article.&lt;/p&gt;
&lt;p&gt;To generate a table of contents for you article, add the &lt;code&gt;.. contents::&lt;/code&gt; directive to your document.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gh"&gt;My sample title&lt;/span&gt;
&lt;span class="gh"&gt;###############&lt;/span&gt;

&lt;span class="nc"&gt;:date:&lt;/span&gt; 2014-12-03
&lt;span class="nc"&gt;:category:&lt;/span&gt; Examples

&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="ow"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;

&lt;span class="gh"&gt;This is my first heading&lt;/span&gt;
&lt;span class="gh"&gt;========================&lt;/span&gt;

This is the content of my sample blog post.

&lt;span class="gh"&gt;This my second heading&lt;/span&gt;
&lt;span class="gh"&gt;======================&lt;/span&gt;

I will end my example here.
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="hide-default-title-text"&gt;Hide Default Title Text&lt;a class="headerlink" href="#hide-default-title-text" title="Permanent link"&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Possibly Deprecated&lt;/p&gt;
&lt;p&gt;We couldn’t not reproduce this issue in our testing. This should be considered deprecated, but is retained in this document in case someone encounters this.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Using the default configuration, reStructuredText will generate a default title for the table
of contents. According to the &lt;a href="http://docutils.sourceforge.net/docs/ref/rst/directives.html#table-of-contents"&gt;official
documentation&lt;/a&gt;,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Language-dependent boilerplate text will be used for the title. The English
default title text is “Contents”.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This default configuration creates two titles for your table of contents, one generated by
reStructuredText and the other by Elegant. To disable default title generation
&lt;sup id="fnref:disable-title"&gt;&lt;a class="footnote-ref" href="#fn:disable-title"&gt;1&lt;/a&gt;&lt;/sup&gt;, you need to add following rule in your &lt;code&gt;custom.css&lt;/code&gt; file to hide the
duplicate title:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="nn"&gt;contents&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;topic-title&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;first&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="footnote"&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id="fn:disable-title"&gt;
&lt;p&gt;There is &lt;a href="https://github.com/Pelican-Elegant/elegant/issues/54"&gt;no straightforward way&lt;/a&gt; to disable default title generation in reStructuredText. &lt;a class="footnote-backref" href="#fnref:disable-title" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Components"></category><category term="reST"></category><category term="markdown"></category><category term="navigation"></category><category term="web-design"></category><category term="contents"></category></entry><entry><title>How to show RSS feeds icon</title><link href="https://dvesti.github.io/Pelican/2014/03/17/how-to-show-rss-feeds-icon/" rel="alternate"></link><published>2014-03-17T15:28:00+02:00</published><updated>2014-03-17T15:28:00+02:00</updated><author><name>Talha Mansoor</name></author><id>tag:dvesti.github.io,2014-03-17:/Pelican/2014/03/17/how-to-show-rss-feeds-icon/</id><summary type="html">&lt;p&gt;Elegant supports &lt;span class="caps"&gt;RSS&lt;/span&gt; and Atom feeds for your posts, categories and&amp;nbsp;tags&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;span class="caps"&gt;RSS&lt;/span&gt; feeds is the oldest and arguably the most used format to publish blog
updates. Its use is not limited to &lt;span class="caps"&gt;RSS&lt;/span&gt;
aggregators &lt;!-- yaspeller ignore --&gt;
and readers. Tools like
&lt;a href="https://ifttt.com/recipes?channel=feed"&gt;&lt;span class="caps"&gt;IFTTT&lt;/span&gt;&lt;/a&gt; and
&lt;a href="http://manual.calibre-ebook.com/news.html"&gt;Calibre&lt;/a&gt; &lt;!-- yaspeller ignore --&gt;
increases &lt;span class="caps"&gt;RSS&lt;/span&gt; feeds&amp;#8217; power
and versatility by&amp;nbsp;manifolds.&lt;/p&gt;
&lt;p&gt;To enable &lt;span class="caps"&gt;RSS&lt;/span&gt; feeds, see &lt;a href="http://docs.getpelican.com/en/latest/settings.html#feed-settings"&gt;Feed
Settings&lt;/a&gt; in
Pelican&amp;nbsp;documentation.&lt;/p&gt;
&lt;p&gt;Links to &lt;span class="caps"&gt;RSS&lt;/span&gt; feeds are embedded in every page. Links to category and tag
feeds are embedded only in the Categories and Tags pages&amp;nbsp;respectively.&lt;/p&gt;
&lt;p&gt;Elegant does not show &lt;span class="caps"&gt;RSS&lt;/span&gt; feeds icon out of the box, though it can be easily&amp;nbsp;enabled.&lt;/p&gt;
&lt;p&gt;All &lt;span class="caps"&gt;RSS&lt;/span&gt; consumers have the ability to capture feed links from a web address.
For example, you need not put &lt;code&gt;http://oncrashreboot.com/feeds/all.atom.xml&lt;/code&gt; in
your &lt;span class="caps"&gt;RSS&lt;/span&gt; reader. Just &lt;code&gt;http://oncrashreboot.com&lt;/code&gt; is enough. Your reader should
be able to extract feed &lt;span class="caps"&gt;URL&lt;/span&gt; from the&amp;nbsp;link.&lt;/p&gt;
&lt;p&gt;All popular browsers can detect &lt;span class="caps"&gt;RSS&lt;/span&gt; feeds on the page and show a visual cue. In
Firefox, you can add &amp;#8220;Subscribe&amp;#8221; button to the
&lt;a href="https://support.mozilla.org/en-US/kb/customize-firefox-controls-buttons-and-toolbars?redirectlocale=en-US&amp;amp;redirectslug=How+to+customize+the+toolbar"&gt;toolbar&lt;/a&gt;.
For Chrome, you can use &lt;a href="https://chrome.google.com/webstore/detail/rss-subscription-extensio/nlbjncdgjeocebhnmkbbbdekmmmcbfjd"&gt;&lt;span class="caps"&gt;RSS&lt;/span&gt; Subscription
Extension&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here is an example of my category feeds in&amp;nbsp;Chrome.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Display RSS Feeds in Chrome" src="https://dvesti.github.io/Pelican/images/rss-feeds-chrome-category-feeds.png" /&gt;&lt;/p&gt;
&lt;p&gt;These options make it redundant to have a separate &lt;span class="caps"&gt;RSS&lt;/span&gt; icon on the page.
Elegant is all about a clean and minimal &lt;span class="caps"&gt;UI&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;But it is not so hard to enable it. First &lt;a href="how-to-display-your-social-media-profiles"&gt;configure the Social
widget&lt;/a&gt;. Then add a tuple for &lt;span class="caps"&gt;RSS&lt;/span&gt;,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;SOCIAL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;RSS&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://oncrashreboot.com/feeds/all.atom.xml&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Viola! You got yourself the &lt;span class="caps"&gt;RSS&lt;/span&gt;&amp;nbsp;icon.&lt;/p&gt;
&lt;p&gt;&lt;img alt="RSS Feeds icon in Social widget" src="https://dvesti.github.io/Pelican/images/rss-feeds-icon-social-widget.png" /&gt;&lt;/p&gt;</content><category term="Connecting With Your Readers"></category><category term="pelican-theme"></category><category term="font-awesome"></category><category term="web-design"></category></entry><entry><title>How to display your Social Media Profiles</title><link href="https://dvesti.github.io/Pelican/2014/01/27/how-to-display-your-social-media-profiles-deprecated/" rel="alternate"></link><published>2014-01-27T00:28:00+02:00</published><updated>2014-01-27T00:28:00+02:00</updated><author><name>Talha Mansoor</name></author><id>tag:dvesti.github.io,2014-01-27:/Pelican/2014/01/27/how-to-display-your-social-media-profiles-deprecated/</id><summary type="html">&lt;p&gt;Elegant displays links to your social media profiles in sidebar in a customizable&amp;nbsp;manner&lt;/p&gt;</summary><content type="html">&lt;p&gt;Bloggers use different tools to connect with their readers, engage in
discussion with them, and create a loyal following of fans. These tools range
from fully blown social web apps like twitter to old school &lt;span class="caps"&gt;RSS&lt;/span&gt;&amp;nbsp;feeds.&lt;/p&gt;
&lt;p&gt;Bloggers add a social media widget to their blog which has links to all their
social media profiles; inviting readers to engage with them else where on the
web too. Most social widgets are loud and obtrusive. Their colors and placement
takes away readers&amp;#8217; attention from the actual&amp;nbsp;content.&lt;/p&gt;
&lt;p&gt;&lt;img class="align-right" style="width: 262.0px; height: 140.0px;"
src="https://dvesti.github.io/Pelican/images/social-profiles-sidebar-default.png" alt="Social
Profiles in the Sidebar" /&gt;&lt;/p&gt;
&lt;p&gt;Elegant understands the importance of readers engagement but it makes sure
not to push author&amp;#8217;s &lt;em&gt;&amp;#8220;online social karma&amp;#8221;&lt;/em&gt; down readers&amp;#8217;&amp;nbsp;throats.&lt;/p&gt;
&lt;p&gt;Elegant displays the widget in the sidebar. Each icon is a link to a social
media profile with an appropriate title attribute. Icons use muted color which
changes when user hovers over&amp;nbsp;them.&lt;/p&gt;
&lt;p&gt;&lt;img class="align-right" style="width: 134.0px; height: 62.5px;"
src="https://dvesti.github.io/Pelican/images/social-profiles-sidebar-facebook.png" alt="Hover over
Facebook icon in the sidebar" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class="align-right" style="width: 134.0px; height: 62.5px;"
src="https://dvesti.github.io/Pelican/images/social-profiles-sidebar-twitter.png" alt="Hover over
Twitter icon in the sidebar" /&gt;&lt;/p&gt;
&lt;p&gt;Elegant uses scalable vector icons from &lt;a href="http://fortawesome.github.io/Font-Awesome/"&gt;Font
Awesome&lt;/a&gt;. You can instantly
customize the icons by tweaking the &lt;span class="caps"&gt;CSS&lt;/span&gt;. This customization can range from
changing size and color to adding drop&amp;nbsp;shadow.&lt;/p&gt;
&lt;h2 id="how-to-configure-the-widget"&gt;How to configure the &lt;em&gt;widget&lt;/em&gt;&lt;a class="headerlink" href="#how-to-configure-the-widget" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Define &lt;code&gt;SOCIAL&lt;/code&gt; in your &lt;code&gt;pelicanconf.py&lt;/code&gt;. &lt;code&gt;SOCIAL&lt;/code&gt; is list of tuple. Each tuple
has two items, title and &lt;span class="caps"&gt;URL&lt;/span&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;SOCIAL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Twitter&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://twitter.com/talham_&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Github&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://github.com/talha131&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In this example, &lt;code&gt;SOCIAL&lt;/code&gt; has two tuples. First tuple is &lt;code&gt;('Twitter', 'http://twitter.com/talham_')&lt;/code&gt;. First element of the tuple is the title
&lt;code&gt;Twitter&lt;/code&gt; and second element is the &lt;span class="caps"&gt;URL&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Elegant picks icons from Font Awesome. Title of the tuple, for example
&lt;code&gt;Twitter&lt;/code&gt;, is used to decide the icon of the social media&amp;nbsp;profile.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Twitter&lt;/code&gt; will use &lt;code&gt;fa-twitter&lt;/code&gt; &lt;span class="caps"&gt;CSS&lt;/span&gt; class, &lt;code&gt;Github&lt;/code&gt; will use &lt;code&gt;fa-github&lt;/code&gt;, and
&lt;code&gt;Facebook&lt;/code&gt; will use &lt;code&gt;fa-facebook&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can see all the icons and their corresponding &lt;span class="caps"&gt;CSS&lt;/span&gt; classes in &lt;a href="http://fortawesome.github.io/Font-Awesome/icons/#brand"&gt;Font Awesome
documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="how-to-customize-the-icon"&gt;How to customize the icon&lt;a class="headerlink" href="#how-to-customize-the-icon" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;What if the icon of your social media site is not available in Font Awesome?
What if the &lt;span class="caps"&gt;CSS&lt;/span&gt; class name does not follow &lt;code&gt;fa-&amp;lt;title&amp;gt;&lt;/code&gt; convention, for example
&lt;code&gt;Stack Exchange&lt;/code&gt; is different from &lt;code&gt;fa-stack-exchange&lt;/code&gt;? What if you want to use
&lt;code&gt;fa-youtube-play&lt;/code&gt; in place of &lt;code&gt;fa-youtube&lt;/code&gt; for your YouTube&amp;nbsp;profile?&lt;/p&gt;
&lt;p&gt;The solution is to add a third element to the tuple. &lt;span class="caps"&gt;CSS&lt;/span&gt; class&amp;nbsp;name.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;SOCIAL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Twitter&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://twitter.com/talham_&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;twitter-square&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Youtube&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://example.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;youtube-play&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This third element is optional. It should be equal to the Font Awesome &lt;span class="caps"&gt;CSS&lt;/span&gt;
class that you want to use for the social profile, minus the &lt;code&gt;fa&lt;/code&gt; part from the
&lt;span class="caps"&gt;CSS&lt;/span&gt; class&amp;nbsp;name.&lt;/p&gt;
&lt;h2 id="how-to-customize-social-profile-label"&gt;How to customize Social Profile Label&lt;a class="headerlink" href="#how-to-customize-social-profile-label" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;By default, Elegant labels social profile section as &lt;strong&gt;Contact&lt;/strong&gt;. You can
change this label by defining a new variable &lt;code&gt;SOCIAL_PROFILE_LABEL&lt;/code&gt; in your
&lt;code&gt;pelicanconf.py&lt;/code&gt; file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;SOCIAL_PROFILE_LABEL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Stay in Touch&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="Connecting With Your Readers"></category><category term="pelican-theme"></category><category term="font-awesome"></category><category term="social-media"></category><category term="web-design"></category></entry><entry><title>Add Previous and Next Article Links</title><link href="https://dvesti.github.io/Pelican/2014/01/27/how-to-show-previous-and-next-article/" rel="alternate"></link><published>2014-01-27T00:02:00+02:00</published><updated>2014-01-27T00:02:00+02:00</updated><author><name>Talha Mansoor</name></author><id>tag:dvesti.github.io,2014-01-27:/Pelican/2014/01/27/how-to-show-previous-and-next-article/</id><summary type="html">&lt;p&gt;Elegant can be configured to provide a Previous and Next article link at the bottom of your articles. This allows for easier navigation through the site if you are looking at articles in published date&amp;nbsp;order.&lt;/p&gt;</summary><content type="html">&lt;p&gt;When reading a series of articles on a website, a reader often desires to view the articles in
chronological order by publish&amp;nbsp;date.&lt;/p&gt;
&lt;p&gt;Elegant provides the ability to provide navigation links to the previous and next articles at
the bottom of each article. These links provide a powerful way to keep visitors engaged
and guide them through your&amp;nbsp;site.&lt;/p&gt;
&lt;p&gt;Here is an example of what the Previous and Next Articles section may look&amp;nbsp;like:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Show next and previous articles" src="https://dvesti.github.io/Pelican/images/elegant-theme_previous-next-article.png" /&gt;&lt;/p&gt;
&lt;h2 id="configuration"&gt;Configuration&lt;a class="headerlink" href="#configuration" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To enable the Previous and Next Article links for your articles, add &lt;code&gt;neighbors&lt;/code&gt; to the
&lt;code&gt;PLUGINS&lt;/code&gt; configuration variable in your Pelican&amp;nbsp;configuration.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;PLUGINS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;neighbors&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When enabled, Elegant will show the links for Previous and Next articles at the very bottom of
every article, after any footnotes for the article, but before the footer for the website. The
link for the next oldest or Previous article is displayed on the left side and the next
youngest or Next article on the right side, being consistent with most languages being
Left-to-Right language. If there is no article that is newer or older than the current article,
the respective link will not be&amp;nbsp;shown.&lt;/p&gt;</content><category term="Supported Plugins"></category><category term="pelican-plugin"></category><category term="navigation"></category><category term="web-design"></category></entry><entry><title>How to use Google Analytics</title><link href="https://dvesti.github.io/Pelican/2013/11/11/how-to-use-google-analytics/" rel="alternate"></link><published>2013-11-11T23:05:00+02:00</published><updated>2013-11-11T23:05:00+02:00</updated><author><name>Talha Mansoor</name></author><id>tag:dvesti.github.io,2013-11-11:/Pelican/2013/11/11/how-to-use-google-analytics/</id><summary type="html">&lt;p&gt;Elegant Pelican theme supports Google Analytics out of the box. This articles describes how to set it&amp;nbsp;up.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Elegant supports the popular web tracking service,
&lt;a href="http://www.google.com/analytics/"&gt;Google Analytics&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://support.google.com/analytics/answer/1032385?hl=en"&gt;Get your property
&lt;span class="caps"&gt;ID&lt;/span&gt;&lt;/a&gt; from your Google
Analytics account. It has this format &lt;code&gt;UA-XXXXX-X&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Set &lt;code&gt;GOOGLE_ANALYTICS&lt;/code&gt; variable to it in your&amp;nbsp;configuration.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;GOOGLE_ANALYTICS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;UA-00000000-1&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That&amp;#8217;s it. Elegant will take care of the&amp;nbsp;rest.&lt;/p&gt;</content><category term="Analytics, SEO and SMO"></category><category term="web-analytics"></category></entry><entry><title>How to use StatCounter</title><link href="https://dvesti.github.io/Pelican/2013/11/11/how-to-use-statcounter-analytics/" rel="alternate"></link><published>2013-11-11T23:05:00+02:00</published><updated>2013-11-11T23:05:00+02:00</updated><author><name>Talha Mansoor</name></author><id>tag:dvesti.github.io,2013-11-11:/Pelican/2013/11/11/how-to-use-statcounter-analytics/</id><summary type="html">&lt;p&gt;Elegant Pelican theme supports StatCounter out of the box. This articles describes how to set them&amp;nbsp;up.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Elegant has support for popular web tracking service,
&lt;a href="http://statcounter.com/"&gt;StatCounter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You need two codes from StatCounter - project &lt;span class="caps"&gt;ID&lt;/span&gt; and security&amp;nbsp;code.&lt;/p&gt;
&lt;p&gt;Create a project inside StatCounter. Click on &lt;em&gt;Config&lt;/em&gt;, &lt;em&gt;Reinstall Code&lt;/em&gt; and then
&lt;em&gt;Default Guide&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;It will show you a &lt;a href="http://statcounter.com/support/knowledge-base/14/"&gt;standard
code&lt;/a&gt;
that a website must have in order to use&amp;nbsp;StatCounter.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;lt;!--&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Start&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;StatCounter&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Code&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Default&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Guide&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;sc_project&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;5555555&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;sc_invisible&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;sc_security&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;XXXXXXXX&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!--&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;End&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;StatCounter&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Code&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Default&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Guide&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Assign &lt;code&gt;sc_project&lt;/code&gt; value to &lt;code&gt;STAT_COUNTER_PROJECT&lt;/code&gt; and &lt;code&gt;sc_security&lt;/code&gt; to &lt;code&gt;STAT_COUNTER_SECURITY&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;STAT_COUNTER_PROJECT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5555555&lt;/span&gt;
&lt;span class="n"&gt;STAT_COUNTER_SECURITY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;XXXXXXXX&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That&amp;#8217;s it. Elegant will take care of the&amp;nbsp;rest.&lt;/p&gt;</content><category term="Analytics, SEO and SMO"></category><category term="web-analytics"></category></entry><entry><title>Code Snippets — Display Line Numbers</title><link href="https://dvesti.github.io/Pelican/2013/11/05/display-line-numbers-in-code-snippets/" rel="alternate"></link><published>2013-11-05T17:36:00+02:00</published><updated>2013-11-05T17:36:00+02:00</updated><author><name>Talha Mansoor</name></author><id>tag:dvesti.github.io,2013-11-05:/Pelican/2013/11/05/display-line-numbers-in-code-snippets/</id><summary type="html">&lt;p&gt;reStructuredText and Markdown have directives that generate line numbers for code blocks. Use them to display line numbers in code&amp;nbsp;snippets.&lt;/p&gt;</summary><content type="html">&lt;p&gt;reStructuredText and Markdown have directives that generate line numbers for
code snippets. Install &lt;a href="http://pygments.org/"&gt;Pygments&lt;/a&gt; to use these&amp;nbsp;directives.&lt;/p&gt;
&lt;p&gt;Following examples will generate this&amp;nbsp;output,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;example&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Hello World&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;


&lt;h2 id="restructuredtext"&gt;reStructuredText&lt;a class="headerlink" href="#restructuredtext" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;reStructuredText has &lt;code&gt;code-block&lt;/code&gt; directive to insert code snippets in your
markup. Use &lt;code&gt;linenos&lt;/code&gt; flag to switch on line numbers for the&amp;nbsp;snippet.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="ow"&gt;code-block&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; python
    &lt;span class="nc"&gt;:linenos:&lt;/span&gt;

    def example():
        print &amp;#39;Hello World&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="markdown"&gt;Markdown&lt;a class="headerlink" href="#markdown" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/Python-Markdown/markdown/"&gt;Python-Markdown&lt;/a&gt; uses
&lt;a href="https://python-markdown.github.io/extensions/code_hilite/"&gt;CodeHilite&lt;/a&gt; &lt;!-- yaspeller ignore --&gt;
extension for syntax highlighting. Setup
CodeHilite &lt;!-- yaspeller ignore --&gt;
, then use Shebang &lt;code&gt;#!&lt;/code&gt; to
generate line&amp;nbsp;numbers.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gh"&gt;#!python&lt;/span&gt;
def example():
    print &amp;#39;Hello World&amp;#39;
&lt;/pre&gt;&lt;/div&gt;</content><category term="Components"></category><category term="markdown"></category><category term="reST"></category><category term="code-snippets"></category><category term="gist"></category></entry><entry><title>Newsletter — Add Mailchimp</title><link href="https://dvesti.github.io/Pelican/2013/08/27/add-mailchimp/" rel="alternate"></link><published>2013-08-27T23:20:00+03:00</published><updated>2013-08-27T23:20:00+03:00</updated><author><name>Talha Mansoor</name></author><id>tag:dvesti.github.io,2013-08-27:/Pelican/2013/08/27/add-mailchimp/</id><summary type="html">&lt;p&gt;&lt;svg xmlns="http://www.w3.org/2000/svg"
aria-label="Mailchimp" role="img"
viewBox="0 0 512 512" width="150" height="150" style="float:left;margin-right:10px"&gt;&lt;rect
width="512" height="512"
rx="15%" fill="#ffe01b"/&gt;&lt;path fill="#1e1e1e" d="M418 306l-6-17s25-38-37-51c0 0 4-47-18-69 48-47 37-118-72-72C229-10 13 241 103 281c-9 12-9 72 53 78 42 90 144 96 203 69s93-113 59-122zm-263 40c-51-5-56-75-12-82s55 86 12 82zm-15-95c-14 0-31 19-31 19-68-33 123-252 164-167 0 0-100 48-133 148zm200 85c0-4-21 6-59-7 3-21 48 18 123-33l6 21c28-5 0 90-90 89-73-1-96-76-56-117 8-8-29-24-22-59 3-15 16-37 49-31s40-24 62-13 9 53 12 59 35 7 41 24-41 54-114 44c-17-2-27 20-16 34 22 32 112 11 127-20-38 29-116 40-122 9 22 10 59 4 59 0zm-58-6zm-73-152c22-27 51-43 51-43l-6 15s21-16 44-16l-8 8c26 1 37 11 37 11s-61-18-118 25zm135 39c13-1 9 29 9 29h-8s-14-28-1-29zm-59 33c-9 1-19 6-18 2 4-16 41-12 40 2s-9-6-22-4zm21 12c1 2-7 0-13 1s-12 4-12 2 23-11 25-3zm20 3c3-6 15 0 12 6s-15 0-12-6zm25 2c-6 0-6-13 0-13s6 14 0 14zm-180 53c3 3-6 9-13 4s8-29-10-35-13 17-18 14 7-35 28-22-6 33 6 39 5-2 7 0z"/&gt;&lt;/svg&gt;&lt;/p&gt;
&lt;p&gt;Elegant shows a form to subscribe to your newsletter, above the fold, in the right section of every article. Increased visibility is said to increase number of&amp;nbsp;subscribers.&lt;/p&gt;
&lt;p&gt;You need to put your Mailchimp form action &lt;span class="caps"&gt;URL&lt;/span&gt; in &lt;code&gt;MAILCHIMP_FORM_ACTION&lt;/code&gt; in your configuration&amp;nbsp;file.&lt;/p&gt;
&lt;p&gt;To customize user experience you can also …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;svg xmlns="http://www.w3.org/2000/svg"
aria-label="Mailchimp" role="img"
viewBox="0 0 512 512" width="150" height="150" style="float:left;margin-right:10px"&gt;&lt;rect
width="512" height="512"
rx="15%" fill="#ffe01b"/&gt;&lt;path fill="#1e1e1e" d="M418 306l-6-17s25-38-37-51c0 0 4-47-18-69 48-47 37-118-72-72C229-10 13 241 103 281c-9 12-9 72 53 78 42 90 144 96 203 69s93-113 59-122zm-263 40c-51-5-56-75-12-82s55 86 12 82zm-15-95c-14 0-31 19-31 19-68-33 123-252 164-167 0 0-100 48-133 148zm200 85c0-4-21 6-59-7 3-21 48 18 123-33l6 21c28-5 0 90-90 89-73-1-96-76-56-117 8-8-29-24-22-59 3-15 16-37 49-31s40-24 62-13 9 53 12 59 35 7 41 24-41 54-114 44c-17-2-27 20-16 34 22 32 112 11 127-20-38 29-116 40-122 9 22 10 59 4 59 0zm-58-6zm-73-152c22-27 51-43 51-43l-6 15s21-16 44-16l-8 8c26 1 37 11 37 11s-61-18-118 25zm135 39c13-1 9 29 9 29h-8s-14-28-1-29zm-59 33c-9 1-19 6-18 2 4-16 41-12 40 2s-9-6-22-4zm21 12c1 2-7 0-13 1s-12 4-12 2 23-11 25-3zm20 3c3-6 15 0 12 6s-15 0-12-6zm25 2c-6 0-6-13 0-13s6 14 0 14zm-180 53c3 3-6 9-13 4s8-29-10-35-13 17-18 14 7-35 28-22-6 33 6 39 5-2 7 0z"/&gt;&lt;/svg&gt;&lt;/p&gt;
&lt;p&gt;Elegant shows a form to subscribe to your newsletter, above the fold, in the right section of every article. Increased visibility is said to increase number of&amp;nbsp;subscribers.&lt;/p&gt;
&lt;p&gt;You need to put your Mailchimp form action &lt;span class="caps"&gt;URL&lt;/span&gt; in &lt;code&gt;MAILCHIMP_FORM_ACTION&lt;/code&gt; in your configuration&amp;nbsp;file.&lt;/p&gt;
&lt;p&gt;To customize user experience you can also&amp;nbsp;define,&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;EMAIL_SUBSCRIPTION_LABEL&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;EMAIL_FIELD_PLACEHOLDER&lt;/code&gt; and&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SUBSCRIBE_BUTTON_TITLE&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You can see Mailchimp Form in action in the sidebar. It&amp;#8217;s a working example. Enter your email address so that we can send you news of new Elegant releases in your&amp;nbsp;inbox.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Mailchimp subscriber
form" src="https://dvesti.github.io/Pelican/images/elegant-theme_subscribe-form.png" /&gt;&lt;/p&gt;
&lt;h2 id="show-mailchimp-form-by-default"&gt;Show Mailchimp Form by default&lt;a class="headerlink" href="#show-mailchimp-form-by-default" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Just set &lt;code&gt;MAILCHIMP_FORM_ACTION&lt;/code&gt; variable.&lt;/p&gt;
&lt;h2 id="hide-mailchimp-form-by-default"&gt;Hide Mailchimp Form by default&lt;a class="headerlink" href="#hide-mailchimp-form-by-default" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Unset &lt;code&gt;MAILCHIMP_FORM_ACTION&lt;/code&gt; variable.&lt;/p&gt;
&lt;p&gt;This is the default&amp;nbsp;setting.&lt;/p&gt;
&lt;h2 id="hide-mailchimp-form-by-default-show-on-selected"&gt;Hide Mailchimp Form by default. Show on Selected&lt;a class="headerlink" href="#hide-mailchimp-form-by-default-show-on-selected" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Set &lt;code&gt;MAILCHIMP_FORM_ACTION&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Set &lt;code&gt;MAILCHIMP_FILTER&lt;/code&gt; to &lt;code&gt;True&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This will hide Mailchimp form on all&amp;nbsp;pages.&lt;/p&gt;
&lt;p&gt;Now to show Mailchimp form on selected posts, in article metadata&amp;nbsp;set&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;mailchimp_filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;off&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="show-mailchimp-form-by-default-hide-on-selected"&gt;Show Mailchimp Form by default. Hide on Selected&lt;a class="headerlink" href="#show-mailchimp-form-by-default-hide-on-selected" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Set &lt;code&gt;MAILCHIMP_FORM_ACTION&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Remove &lt;code&gt;MAILCHIMP_FILTER&lt;/code&gt; or set it to &lt;code&gt;False&lt;/code&gt; which is its default&amp;nbsp;value&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This will hide Mailchimp form on all&amp;nbsp;pages.&lt;/p&gt;
&lt;p&gt;Now to hide Mailchimp form on selected posts, in article metadata&amp;nbsp;set&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;mailchimp_filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;on&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="Connecting With Your Readers"></category><category term="marketing"></category><category term="network"></category><category term="subscriber"></category></entry><entry><title>Article Subtitle</title><link href="https://dvesti.github.io/Pelican/2013/08/27/article-subtitle/" rel="alternate"></link><published>2013-08-27T23:20:00+03:00</published><updated>2013-08-27T23:20:00+03:00</updated><author><name>Talha Mansoor</name></author><id>tag:dvesti.github.io,2013-08-27:/Pelican/2013/08/27/article-subtitle/</id><summary type="html">&lt;p&gt;Pelican lets you define title of your article in the metadata. Elegant adds
subtitle support. Just define &lt;code&gt;subtitle&lt;/code&gt; in your article&amp;#8217;s metadata and it
will appear along with your title. Here is an&amp;nbsp;example,&lt;/p&gt;
&lt;p&gt;&lt;img alt="Article subtitle
example" src="https://dvesti.github.io/Pelican/images/elegant-theme_article-subtitle.png" /&gt;&lt;/p&gt;
&lt;p&gt;Article subtitle is displayed with the title in every list. To keep it visibly
separate …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Pelican lets you define title of your article in the metadata. Elegant adds
subtitle support. Just define &lt;code&gt;subtitle&lt;/code&gt; in your article&amp;#8217;s metadata and it
will appear along with your title. Here is an&amp;nbsp;example,&lt;/p&gt;
&lt;p&gt;&lt;img alt="Article subtitle
example" src="https://dvesti.github.io/Pelican/images/elegant-theme_article-subtitle.png" /&gt;&lt;/p&gt;
&lt;p&gt;Article subtitle is displayed with the title in every list. To keep it visibly
separate from title, subtitle is enclosed in &lt;code&gt;&amp;lt;small&amp;gt;&lt;/code&gt; tag. When visible cue
cannot be used, like in the title attribute of &lt;span class="caps"&gt;HTML&lt;/span&gt; anchor tag &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;, a hyphen
is inserted between&amp;nbsp;them.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Article title and subtitle separated with a
hyphen" src="https://dvesti.github.io/Pelican/images/elegant-theme_article-subtitle-hyphen.png" /&gt;&lt;/p&gt;</content><category term="Components"></category><category term="nuances"></category></entry><entry><title>Articles Count With Every Tag and Category</title><link href="https://dvesti.github.io/Pelican/2013/08/27/articles-count-with-every-tag-and-category/" rel="alternate"></link><published>2013-08-27T23:20:00+03:00</published><updated>2013-08-27T23:20:00+03:00</updated><author><name>Talha Mansoor</name></author><id>tag:dvesti.github.io,2013-08-27:/Pelican/2013/08/27/articles-count-with-every-tag-and-category/</id><summary type="html">&lt;p&gt;Readers of an article on your site usually look for other articles on the same
topic. Categories and tags are a way of showing them related articles. Elegant
displays the count of articles that you have written in a category or tag in a
non-intrusive&amp;nbsp;manner.&lt;/p&gt;
&lt;p&gt;Every category and tag …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Readers of an article on your site usually look for other articles on the same
topic. Categories and tags are a way of showing them related articles. Elegant
displays the count of articles that you have written in a category or tag in a
non-intrusive&amp;nbsp;manner.&lt;/p&gt;
&lt;p&gt;Every category and tag has the count of articles in superscript. So if you have
written three articles in the C++ category or tag, it will have 3 in the
superscript. This way visitor will know you have written other articles too on
the same&amp;nbsp;topic.&lt;/p&gt;
&lt;p&gt;Check out the&amp;nbsp;screenshots,&lt;/p&gt;
&lt;p&gt;&lt;img alt="Count of articles in a category is displayed in
superscript" src="https://dvesti.github.io/Pelican/images/elegant-theme_category-superscript-count.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Count of articles that have been tagged is displayed in
superscript" src="https://dvesti.github.io/Pelican/images/elegant-theme_tag-superscript-count.png" /&gt;&lt;/p&gt;</content><category term="Components"></category><category term="nuances"></category></entry><entry><title>Code Snippets — Theme</title><link href="https://dvesti.github.io/Pelican/2013/08/27/code-snippets-theme/" rel="alternate"></link><published>2013-08-27T23:20:00+03:00</published><updated>2013-08-27T23:20:00+03:00</updated><author><name>Talha Mansoor</name></author><id>tag:dvesti.github.io,2013-08-27:/Pelican/2013/08/27/code-snippets-theme/</id><summary type="html">&lt;p&gt;Elegant uses &lt;a href="https://github.com/daveyarwood/gruvbox-pygments"&gt;Pygment port&lt;/a&gt;
of &lt;a href="https://github.com/morhetz/gruvbox"&gt;Gruvbox&lt;/a&gt; theme for syntax&amp;nbsp;highlighting.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;sample_function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;This is a sample function&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;


&lt;h2 id="html-example"&gt;&lt;span class="caps"&gt;HTML&lt;/span&gt; Example&lt;a class="headerlink" href="#html-example" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;
  &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;elegant-gallery&amp;quot;&lt;/span&gt;
  &lt;span class="na"&gt;itemscope&lt;/span&gt;
  &lt;span class="na"&gt;itemtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://schema.org/ImageGallery&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;figure&lt;/span&gt;
    &lt;span class="na"&gt;itemprop&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;associatedMedia&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;itemscope&lt;/span&gt;
    &lt;span class="na"&gt;itemtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://schema.org/ImageObject&amp;quot;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;
      &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://i.picsum …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Elegant uses &lt;a href="https://github.com/daveyarwood/gruvbox-pygments"&gt;Pygment port&lt;/a&gt;
of &lt;a href="https://github.com/morhetz/gruvbox"&gt;Gruvbox&lt;/a&gt; theme for syntax&amp;nbsp;highlighting.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;sample_function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;This is a sample function&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;


&lt;h2 id="html-example"&gt;&lt;span class="caps"&gt;HTML&lt;/span&gt; Example&lt;a class="headerlink" href="#html-example" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;
  &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;elegant-gallery&amp;quot;&lt;/span&gt;
  &lt;span class="na"&gt;itemscope&lt;/span&gt;
  &lt;span class="na"&gt;itemtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://schema.org/ImageGallery&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;figure&lt;/span&gt;
    &lt;span class="na"&gt;itemprop&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;associatedMedia&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;itemscope&lt;/span&gt;
    &lt;span class="na"&gt;itemtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://schema.org/ImageObject&amp;quot;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;
      &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://i.picsum.photos/id/1019/5472/3648.jpg&amp;quot;&lt;/span&gt;
      &lt;span class="na"&gt;itemprop&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;contentUrl&amp;quot;&lt;/span&gt;
      &lt;span class="na"&gt;data-size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;5472x3648&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt;
        &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://i.picsum.photos/id/1019/100/100.jpg&amp;quot;&lt;/span&gt;
        &lt;span class="na"&gt;itemprop&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;thumbnail&amp;quot;&lt;/span&gt;
        &lt;span class="na"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Image description&amp;quot;&lt;/span&gt;
      &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;figcaption&lt;/span&gt; &lt;span class="na"&gt;itemprop&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;caption description&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      Placeholder image from Unsplash
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;figcaption&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;figure&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;figure&lt;/span&gt;
    &lt;span class="na"&gt;itemprop&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;associatedMedia&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;itemscope&lt;/span&gt;
    &lt;span class="na"&gt;itemtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://schema.org/ImageObject&amp;quot;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;
      &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://i.picsum.photos/id/101/2621/1747.jpg&amp;quot;&lt;/span&gt;
      &lt;span class="na"&gt;itemprop&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;contentUrl&amp;quot;&lt;/span&gt;
      &lt;span class="na"&gt;data-size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;2621x1747&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt;
        &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://i.picsum.photos/id/101/100/100.jpg&amp;quot;&lt;/span&gt;
        &lt;span class="na"&gt;itemprop&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;thumbnail&amp;quot;&lt;/span&gt;
        &lt;span class="na"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Image description&amp;quot;&lt;/span&gt;
      &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;figcaption&lt;/span&gt; &lt;span class="na"&gt;itemprop&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;caption description&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      You can write anything in the caption
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;figcaption&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;figure&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="c-example"&gt;C++ example&lt;a class="headerlink" href="#c-example" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;eg&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                         &lt;/span&gt;&lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;34&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;55&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;89&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;144&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;233&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;377&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;610&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;eg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;erase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;remove_if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="n"&gt;eg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="n"&gt;eg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="p"&gt;[](&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                  &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;99&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="p"&gt;}),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="n"&gt;eg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// Print result&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;for_each&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;eg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;eg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="p"&gt;[](&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                    &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="Components"></category><category term="markdown"></category><category term="reST"></category><category term="code-snippets"></category><category term="gist"></category></entry><entry><title>Comments — Collapse Comments Section</title><link href="https://dvesti.github.io/Pelican/2013/08/27/collapsible-comments/" rel="alternate"></link><published>2013-08-27T23:20:00+03:00</published><updated>2013-08-27T23:20:00+03:00</updated><author><name>Talha Mansoor</name></author><id>tag:dvesti.github.io,2013-08-27:/Pelican/2013/08/27/collapsible-comments/</id><summary type="html">&lt;p&gt;Readers use scroll bar to track their progress when reading inside their
browsers. Very often comments take up more space than the actual article. When
comments take up more space, it throws the scroll bar proportion off and reader
cannot judge his progress correctly. Hacker News hosted &lt;a href="https://news.ycombinator.com/item?id=6246777"&gt;a
discussion&lt;/a&gt; on …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Readers use scroll bar to track their progress when reading inside their
browsers. Very often comments take up more space than the actual article. When
comments take up more space, it throws the scroll bar proportion off and reader
cannot judge his progress correctly. Hacker News hosted &lt;a href="https://news.ycombinator.com/item?id=6246777"&gt;a
discussion&lt;/a&gt; on this&amp;nbsp;topic.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;tons of online articles list comments on the same page, so the scroll bar is
almost a negative incentive to keep reading. &amp;#8220;I&amp;#8217;ve read this much of the
article and I&amp;#8217;m only 1/20th of the way down?&amp;#8221;
[user stops reading, unaware that there&amp;#8217;s 450 comments and the article is actually pretty&amp;nbsp;short]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Elegant keeps the comments section hidden by default. Reader can hide and
unhide the section by clicking on the comments&amp;nbsp;section.&lt;/p&gt;
&lt;p&gt;This is how comments section&amp;nbsp;appear&lt;/p&gt;
&lt;p&gt;&lt;img alt="Collapsed comments
section" src="https://dvesti.github.io/Pelican/images/elegant-theme_comments-section-collapsed.png" /&gt;&lt;/p&gt;
&lt;p&gt;It expands when reader clicks on&amp;nbsp;it&lt;/p&gt;
&lt;p&gt;&lt;img alt="Uncollapsed comments
section" src="https://dvesti.github.io/Pelican/images/elegant-theme_comments-section-uncollapsed.png" /&gt;&lt;/p&gt;</content><category term="Connecting With Your Readers"></category><category term="interaction"></category></entry><entry><title>Live Filter for Tags</title><link href="https://dvesti.github.io/Pelican/2013/08/27/live-filter-for-tags/" rel="alternate"></link><published>2013-08-27T23:20:00+03:00</published><updated>2013-08-27T23:20:00+03:00</updated><author><name>Talha Mansoor</name></author><id>tag:dvesti.github.io,2013-08-27:/Pelican/2013/08/27/live-filter-for-tags/</id><summary type="html">&lt;p&gt;Elegant is a minimal theme. Instead of creating separate pages for each tag,
Elegant shows all the tags on a single page. To help visitor find the tags he
is interested in, Elegant offers live&amp;nbsp;filter.&lt;/p&gt;
&lt;p&gt;Go to tags page and type your required tag in &amp;#8220;Find a tag&amp;#8221; search …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Elegant is a minimal theme. Instead of creating separate pages for each tag,
Elegant shows all the tags on a single page. To help visitor find the tags he
is interested in, Elegant offers live&amp;nbsp;filter.&lt;/p&gt;
&lt;p&gt;Go to tags page and type your required tag in &amp;#8220;Find a tag&amp;#8221; search box. Elegant
will automatically filter the&amp;nbsp;list.&lt;/p&gt;
&lt;p&gt;For example, this is how my tags page looks&amp;nbsp;like&lt;/p&gt;
&lt;p&gt;&lt;img alt="Tags view unfiltered" src="https://dvesti.github.io/Pelican/images/elegant-theme_tags-live-filter-default.png" /&gt;&lt;/p&gt;
&lt;p&gt;As soon as I type
&amp;#8220;os&amp;#8221;, &lt;!-- yaspeller ignore --&gt;
all other tags are filtered&amp;nbsp;out&lt;/p&gt;
&lt;p&gt;&lt;img alt="Tags view filtered for &amp;quot;os&amp;quot;" src="https://dvesti.github.io/Pelican/images/elegant-theme_tags-live-filter-filtered.png" /&gt; &lt;!-- yaspeller ignore --&gt;&lt;/p&gt;
&lt;p&gt;With live filter, your reader will have no difficulty in picking up his desired
tag from the list, even if your site has hundreds of&amp;nbsp;tags.&lt;/p&gt;</content><category term="Components"></category><category term="nuances"></category><category term="search"></category></entry><entry><title>Page Title</title><link href="https://dvesti.github.io/Pelican/2013/08/27/page-title/" rel="alternate"></link><published>2013-08-27T23:20:00+03:00</published><updated>2013-08-27T23:20:00+03:00</updated><author><name>Talha Mansoor</name></author><id>tag:dvesti.github.io,2013-08-27:/Pelican/2013/08/27/page-title/</id><summary type="html">&lt;p&gt;Elegant follows following format for the &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt; tag&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Article title · Site Name
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="Article title is always visible in the
tab" src="https://dvesti.github.io/Pelican/images/elegant-theme_page-title.png" /&gt;&lt;/p&gt;
&lt;p&gt;Some sites put site title first and article title later in the &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt; tag.
There is a problem with this approach. When you open too many tabs, browser
delimits tab&amp;#8217;s title from the end. In such cases …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Elegant follows following format for the &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt; tag&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Article title · Site Name
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="Article title is always visible in the
tab" src="https://dvesti.github.io/Pelican/images/elegant-theme_page-title.png" /&gt;&lt;/p&gt;
&lt;p&gt;Some sites put site title first and article title later in the &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt; tag.
There is a problem with this approach. When you open too many tabs, browser
delimits tab&amp;#8217;s title from the end. In such cases, only the first few words or
even letters of the &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt; are left&amp;nbsp;visible.&lt;/p&gt;
&lt;p&gt;If visitor has opened several tabs from your website, all tabs will have &amp;#8220;Site
Name&amp;#8230;&amp;#8221; title. User will need to click on each tab to identify his required
tab from the content. But with Elegant&amp;#8217;s approach article title will always be
visible, and reader will have less difficultly in identifying the tab he is&amp;nbsp;after.&lt;/p&gt;
&lt;p&gt;Putting site title before the article title increases your site name
visibility. Elegant achieves this by putting site name in the top navigation
bar of every page, where it always stays above the&amp;nbsp;fold.&lt;/p&gt;</content><category term="Components"></category><category term="nuances"></category></entry><entry><title>Zero Clutter Categories</title><link href="https://dvesti.github.io/Pelican/2013/08/27/zero-clutter-categories/" rel="alternate"></link><published>2013-08-27T23:20:00+03:00</published><updated>2013-08-27T23:20:00+03:00</updated><author><name>Talha Mansoor</name></author><id>tag:dvesti.github.io,2013-08-27:/Pelican/2013/08/27/zero-clutter-categories/</id><summary type="html">&lt;p&gt;Pelican by default creates a separate page for each category. Themes list all
the articles filed in that category at its page. Elegant takes a different
approach which is, &amp;#8220;all Categories but with zero&amp;nbsp;clutter&amp;#8221;.&lt;/p&gt;
&lt;p&gt;It lists all the categories and their articles on the same page. To reduce
clutter …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Pelican by default creates a separate page for each category. Themes list all
the articles filed in that category at its page. Elegant takes a different
approach which is, &amp;#8220;all Categories but with zero&amp;nbsp;clutter&amp;#8221;.&lt;/p&gt;
&lt;p&gt;It lists all the categories and their articles on the same page. To reduce
clutter and utilize space efficiently, each category and its list of articles
is enclosed in &lt;a href="http://getbootstrap.com/2.3.2/javascript.html#collapse"&gt;collapsible accordions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here is how categories appear&amp;nbsp;collapsed&lt;/p&gt;
&lt;p&gt;&lt;img alt="Categories accordions
collapsed" src="https://dvesti.github.io/Pelican/images/elegant-theme_category-accordions-collapsed.png" /&gt;&lt;/p&gt;
&lt;p&gt;And this is how they appear&amp;nbsp;uncollapsed&lt;/p&gt;
&lt;p&gt;&lt;img alt="Categories accordions
uncollapsed" src="https://dvesti.github.io/Pelican/images/elegant-theme_category-accordions-uncollapsed.png" /&gt;&lt;/p&gt;
&lt;p&gt;Did you notice that categories are listed in ascending alphabetical order and
articles are sorted by their date in descending&amp;nbsp;order?&lt;/p&gt;</content><category term="Components"></category><category term="nuances"></category><category term="clean"></category></entry><entry><title>Подсветка Синтаксиса — Syntax Highlighting</title><link href="https://dvesti.github.io/Pelican/2011/08/30/syntax-highlighting/" rel="alternate"></link><published>2011-08-30T16:01:00+03:00</published><updated>2011-08-30T16:01:00+03:00</updated><author><name>Dvesti</name></author><id>tag:dvesti.github.io,2011-08-30:/Pelican/2011/08/30/syntax-highlighting/</id><summary type="html">&lt;p&gt;More detail: &lt;a href="https://gohugo.io/content-management/syntax-highlighting/"&gt;Syntax Highlighting | Hugo&lt;/a&gt; &lt;/p&gt;

&lt;h2 id="javascript"&gt;JavaScript&lt;a class="headerlink" href="#javascript" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;helloWorld&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Hello, World!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;!--more--&gt;
&lt;h2 id="java"&gt;Java&lt;a class="headerlink" href="#java" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HelloWorld&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello, World!"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;package&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;hello&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="kd"&gt;fun&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Array&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello World!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="cm"&gt;/* Hello */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello, World!"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// 'Hello World …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;More detail: &lt;a href="https://gohugo.io/content-management/syntax-highlighting/"&gt;Syntax Highlighting | Hugo&lt;/a&gt; &lt;/p&gt;

&lt;h2 id="javascript"&gt;JavaScript&lt;a class="headerlink" href="#javascript" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;helloWorld&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Hello, World!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;!--more--&gt;
&lt;h2 id="java"&gt;Java&lt;a class="headerlink" href="#java" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HelloWorld&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello, World!"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;package&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;hello&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="kd"&gt;fun&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Array&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello World!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="cm"&gt;/* Hello */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello, World!"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// 'Hello World!' program&lt;/span&gt;

&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"Hello World!"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;using&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;System&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;HelloWorld&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;Main&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello, World!"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="html"&gt;&lt;span class="caps"&gt;HTML&lt;/span&gt;&lt;a class="headerlink" href="#html" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  Hello, World!
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="go"&gt;Go&lt;a class="headerlink" href="#go" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;package&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"fmt"&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello, World!\n"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;object&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;HelloWorld&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;with&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Application&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nc"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello, World!"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="php"&gt;&lt;span class="caps"&gt;PHP&lt;/span&gt;&lt;a class="headerlink" href="#php" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
  &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Hello, World!'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="python"&gt;Python&lt;a class="headerlink" href="#python" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Hello, World!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="no-named-code-block"&gt;no named code block&lt;a class="headerlink" href="#no-named-code-block" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gu"&gt;## this is a comment&lt;/span&gt;
$ echo this is a command
this is a command

&lt;span class="gu"&gt;## edit the file  &lt;/span&gt;

$vi foo.md
+++
date = "2014-09-28"
title = "creating a new theme"
+++

bah and humbug
:wq

&lt;span class="gu"&gt;## show it  &lt;/span&gt;

$ cat foo.md
+++
date = "2014-09-28"
title = "creating a new theme"
+++

bah and humbug
$
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="highlight-shortcode"&gt;highlight shortcode&lt;a class="headerlink" href="#highlight-shortcode" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/*&lt;/span&gt; &lt;span class="nv"&gt;highlight&lt;/span&gt; &lt;span class="nv"&gt;go&lt;/span&gt; &lt;span class="s2"&gt;"linenos=table,hl_lines=8 15-17,linenostart=199"&lt;/span&gt; &lt;span class="o"&gt;*/&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;
// ... code
&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/*&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;highlight&lt;/span&gt; &lt;span class="o"&gt;*/&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// GetTitleFunc returns a func that can be used to transform a string to&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// title case.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;//&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// The supported styles are&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;//&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// - "Go" (strings.Title)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// - "AP" (see &amp;lt;https://www.apstylebook.com/)&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// - "Chicago" (see &amp;lt;http://www.chicagomanualofstyle.org/home.html)&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;//&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// If an unknown or empty style is provided, AP style is what you get.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;GetTitleFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;switch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;strings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ToLower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"go"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;strings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Title&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"chicago"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;tc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NewTitleConverter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ChicagoStyle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;tc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Title&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;tc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NewTitleConverter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;APStyle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;tc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Title&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="Blog"></category><category term="preview"></category><category term="syntax highlighting"></category></entry><entry><title>Мой первый Обзор — My First Review</title><link href="https://dvesti.github.io/Pelican/2010/12/03/moi-pervyi-obzor-my-first-review/" rel="alternate"></link><published>2010-12-03T10:20:00+02:00</published><updated>2010-12-03T10:20:00+02:00</updated><author><name>Dmitriev</name></author><id>tag:dvesti.github.io,2010-12-03:/Pelican/2010/12/03/moi-pervyi-obzor-my-first-review/</id><content type="html">&lt;p&gt;Following is a review of my favorite mechanical&amp;nbsp;keyboard.  &lt;/p&gt;
&lt;p&gt;Будет&amp;nbsp;оборзевать&amp;#8230;&lt;/p&gt;</content><category term="Blog"></category><category term="example"></category></entry><entry><title>Моё первое Сообщение — My First Post</title><link href="https://dvesti.github.io/Pelican/2010/12/03/my-first-post/" rel="alternate"></link><published>2010-12-03T10:20:00+02:00</published><updated>2010-12-05T19:30:00+02:00</updated><author><name>Dvesti</name></author><id>tag:dvesti.github.io,2010-12-03:/Pelican/2010/12/03/my-first-post/</id><summary type="html">&lt;p&gt;Short version for index and&amp;nbsp;feeds&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is the content of my super blog&amp;nbsp;post.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello Clipboard&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;поменял на яваскрипт подсветку 2020-06-01&lt;br /&gt;
15-35&lt;br /&gt;
тест от 09-06-2020&amp;nbsp;19-35  &lt;/p&gt;</content><category term="Blog"></category><category term="pelican"></category><category term="publishing"></category></entry><entry><title>Мой супер пост — My super post</title><link href="https://dvesti.github.io/Pelican/2010/12/03/my-super-post/" rel="alternate"></link><published>2010-12-03T10:20:00+02:00</published><updated>2010-12-05T19:30:00+02:00</updated><author><name>Alexis Metaireau</name></author><id>tag:dvesti.github.io,2010-12-03:/Pelican/2010/12/03/my-super-post/</id><summary type="html">&lt;p&gt;Short version for index and&amp;nbsp;feeds&lt;/p&gt;</summary><content type="html">&lt;p&gt;В то время некий безымянный печатник создал большую коллекцию размеров и форм шрифтов, используя.&lt;br /&gt;
This is the content of my super blog post.
Lorem Ipsum - это текст-&amp;#8220;рыба&amp;#8221;, часто используемый в печати и вэб-дизайне. Lorem Ipsum является стандартной &amp;#8220;рыбой&amp;#8221; для текстов на латинице с начала &lt;span class="caps"&gt;XVI&lt;/span&gt; века. В то время некий безымянный печатник создал большую коллекцию размеров и форм шрифтов, используя Lorem Ipsum для распечатки образцов. Lorem Ipsum не только успешно пережил без заметных изменений пять веков, но и перешагнул в электронный дизайн. Его популяризации в новое время послужили публикация листов Letraset с образцами Lorem Ipsum в 60-х годах и, в более недавнее время, программы электронной вёрстки типа Aldus PageMaker, в шаблонах которых используется Lorem&amp;nbsp;Ipsum.&lt;/p&gt;
&lt;p&gt;Lorem Ipsum - это текст-&amp;#8220;рыба&amp;#8221;, часто используемый в печати и вэб-дизайне. Lorem Ipsum является стандартной &amp;#8220;рыбой&amp;#8221; для текстов на латинице с начала &lt;span class="caps"&gt;XVI&lt;/span&gt; века. В то время некий безымянный печатник создал большую коллекцию размеров и форм шрифтов, используя Lorem Ipsum для распечатки образцов. Lorem Ipsum не только успешно пережил без заметных изменений пять веков, но и перешагнул в электронный дизайн. Его популяризации в новое время послужили публикация листов Letraset с образцами Lorem Ipsum в 60-х годах и, в более недавнее время, программы электронной вёрстки типа Aldus PageMaker, в шаблонах которых используется Lorem&amp;nbsp;Ipsum.&lt;/p&gt;
&lt;p&gt;Lorem Ipsum - это текст-&amp;#8220;рыба&amp;#8221;, часто используемый в печати и вэб-дизайне. Lorem Ipsum является стандартной &amp;#8220;рыбой&amp;#8221; для текстов на латинице с начала &lt;span class="caps"&gt;XVI&lt;/span&gt; века. В то время некий безымянный печатник создал большую коллекцию размеров и форм шрифтов, используя Lorem Ipsum для распечатки образцов. Lorem Ipsum не только успешно пережил без заметных изменений пять веков, но и перешагнул в электронный дизайн. Его популяризации в новое время послужили публикация листов Letraset с образцами Lorem Ipsum в 60-х годах и, в более недавнее время, программы электронной вёрстки типа Aldus PageMaker, в шаблонах которых используется Lorem&amp;nbsp;Ipsum.&lt;/p&gt;
&lt;p&gt;Lorem Ipsum - это текст-&amp;#8220;рыба&amp;#8221;, часто используемый в печати и вэб-дизайне. Lorem Ipsum является стандартной &amp;#8220;рыбой&amp;#8221; для текстов на латинице с начала &lt;span class="caps"&gt;XVI&lt;/span&gt; века. В то время некий безымянный печатник создал большую коллекцию размеров и форм шрифтов, используя Lorem Ipsum для распечатки образцов. Lorem Ipsum не только успешно пережил без заметных изменений пять веков, но и перешагнул в электронный дизайн. Его популяризации в новое время послужили публикация листов Letraset с образцами Lorem Ipsum в 60-х годах и, в более недавнее время, программы электронной вёрстки типа Aldus PageMaker, в шаблонах которых используется Lorem&amp;nbsp;Ipsum.&lt;/p&gt;</content><category term="Blog"></category><category term="pelican"></category><category term="publishing"></category></entry></feed>